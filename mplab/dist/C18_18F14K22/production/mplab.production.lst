

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Apr 08 21:34:51 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 2.00
    29                           ; Generated 27/05/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F14K22 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  000754                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _writeIndex
    68  000754  01                 	db	1
    69  0000                     _RCREG	set	4014
    70  0000                     _IPR1bits	set	3999
    71  0000                     _PIE1bits	set	3997
    72  0000                     _RCSTA1bits	set	4011
    73  0000                     _SPBRGH	set	4016
    74  0000                     _SPBRG1	set	4015
    75  0000                     _BAUDCONbits	set	4024
    76  0000                     _TMR0L	set	4054
    77  0000                     _TMR0H	set	4055
    78  0000                     _INTCON2bits	set	4081
    79  0000                     _T0CON	set	4053
    80  0000                     _TRISC	set	3988
    81  0000                     _PORTC	set	3970
    82  0000                     _LATC	set	3979
    83  0000                     _TRISB	set	3987
    84  0000                     _LATB	set	3978
    85  0000                     _PORTB	set	3969
    86  0000                     _TRISA	set	3986
    87  0000                     _PORTA	set	3968
    88  0000                     _LATA	set	3977
    89  0000                     _ANSELH	set	3967
    90  0000                     _ANSEL	set	3966
    91  0000                     _CM2CON0	set	3947
    92  0000                     _CM1CON0	set	3949
    93  0000                     _OSCCONbits	set	4051
    94  0000                     _RCONbits	set	4048
    95  0000                     _PIR1bits	set	3998
    96  0000                     _INTCONbits	set	4082
    97  0000                     _FERR	set	32090
    98  0000                     _RCIE	set	31981
    99  0000                     _SPEN	set	32095
   100  0000                     _OERR	set	32089
   101                           
   102                           ; #config settings
   103  0000                     
   104                           	psect	cinit
   105  0006F8                     __pcinit:
   106                           	opt stack 0
   107  0006F8                     start_initialization:
   108                           	opt stack 0
   109  0006F8                     __initialization:
   110                           	opt stack 0
   111                           
   112                           ; Initialize objects allocated to COMRAM (1 bytes)
   113                           ; load TBLPTR registers with __pidataCOMRAM
   114  0006F8  0E54               	movlw	low __pidataCOMRAM
   115  0006FA  6EF6               	movwf	tblptrl,c
   116  0006FC  0E07               	movlw	high __pidataCOMRAM
   117  0006FE  6EF7               	movwf	tblptrh,c
   118  000700  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   119  000702  6EF8               	movwf	tblptru,c
   120  000704  0009               	tblrd		*+	;fetch initializer
   121  000706  CFF5 F053          	movff	tablat,__pdataCOMRAM
   122                           
   123                           ; Clear objects allocated to COMRAM (64 bytes)
   124  00070A  EE00  F001         	lfsr	0,__pbssCOMRAM
   125  00070E  0E40               	movlw	64
   126  000710                     clear_0:
   127  000710  6AEE               	clrf	postinc0,c
   128  000712  06E8               	decf	wreg,f,c
   129  000714  E1FD               	bnz	clear_0
   130  000716                     end_of_initialization:
   131                           	opt stack 0
   132  000716                     __end_of__initialization:
   133                           	opt stack 0
   134  000716  9054               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   135  000718  9254               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   136  00071A  0100               	movlb	0
   137  00071C  EF33  F003         	goto	_main	;jump to C main() function
   138                           tblptru	equ	0xFF8
   139                           tblptrh	equ	0xFF7
   140                           tblptrl	equ	0xFF6
   141                           tablat	equ	0xFF5
   142                           postinc0	equ	0xFEE
   143                           wreg	equ	0xFE8
   144                           
   145                           	psect	bssCOMRAM
   146  000001                     __pbssCOMRAM:
   147                           	opt stack 0
   148  000001                     _channelRank:
   149                           	opt stack 0
   150  000001                     	ds	4
   151  000005                     _channelLevel:
   152                           	opt stack 0
   153  000005                     	ds	4
   154  000009                     _currentAdress:
   155                           	opt stack 0
   156  000009                     	ds	2
   157  00000B                     _swapCount:
   158                           	opt stack 0
   159  00000B                     	ds	2
   160  00000D                     _pCITmp:
   161                           	opt stack 0
   162  00000D                     	ds	2
   163  00000F                     _pCIWrite:
   164                           	opt stack 0
   165  00000F                     	ds	2
   166  000011                     _tTmp:
   167                           	opt stack 0
   168  000011                     	ds	2
   169  000013                     _pCIRead:
   170                           	opt stack 0
   171  000013                     	ds	2
   172  000015                     _dummy:
   173                           	opt stack 0
   174  000015                     	ds	1
   175  000016                     _received:
   176                           	opt stack 0
   177  000016                     	ds	1
   178  000017                     _errflag:
   179                           	opt stack 0
   180  000017                     	ds	1
   181  000018                     _dmxState:
   182                           	opt stack 0
   183  000018                     	ds	1
   184  000019                     _updated:
   185                           	opt stack 0
   186  000019                     	ds	1
   187  00001A                     _syncLock:
   188                           	opt stack 0
   189  00001A                     	ds	1
   190  00001B                     _readIndex:
   191                           	opt stack 0
   192  00001B                     	ds	1
   193  00001C                     _dummy1:
   194                           	opt stack 0
   195  00001C                     	ds	1
   196  00001D                     _intCount:
   197                           	opt stack 0
   198  00001D                     	ds	1
   199  00001E                     _errorCounter:
   200                           	opt stack 0
   201  00001E                     	ds	1
   202  00001F                     _counterForSimulator:
   203                           	opt stack 0
   204  00001F                     	ds	1
   205  000020                     _lastInChainReceived:
   206                           	opt stack 0
   207  000020                     	ds	1
   208  000021                     _ci2:
   209                           	opt stack 0
   210  000021                     	ds	16
   211  000031                     _ci1:
   212                           	opt stack 0
   213  000031                     	ds	16
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           
   221                           	psect	dataCOMRAM
   222  000053                     __pdataCOMRAM:
   223                           	opt stack 0
   224  000053                     _writeIndex:
   225                           	opt stack 0
   226  000053                     	ds	1
   227                           tblptru	equ	0xFF8
   228                           tblptrh	equ	0xFF7
   229                           tblptrl	equ	0xFF6
   230                           tablat	equ	0xFF5
   231                           postinc0	equ	0xFEE
   232                           wreg	equ	0xFE8
   233                           
   234                           	psect	cstackBANK0
   235  000060                     __pcstackBANK0:
   236                           	opt stack 0
   237  000060                     ??_calculateTimerDiffsAndMask:
   238                           
   239                           ; 1 bytes @ 0x0
   240  000060                     	ds	10
   241                           tblptru	equ	0xFF8
   242                           tblptrh	equ	0xFF7
   243                           tblptrl	equ	0xFF6
   244                           tablat	equ	0xFF5
   245                           postinc0	equ	0xFEE
   246                           wreg	equ	0xFE8
   247                           
   248                           	psect	cstackCOMRAM
   249  000041                     __pcstackCOMRAM:
   250                           	opt stack 0
   251  000041                     
   252                           ; 1 bytes @ 0x0
   253  000041                     	ds	1
   254  000042                     ??_high_isr:
   255                           
   256                           ; 1 bytes @ 0x1
   257  000042                     	ds	4
   258  000046                     ??_low_isr:
   259                           
   260                           ; 1 bytes @ 0x5
   261  000046                     	ds	5
   262  00004B                     initChannels@i:
   263                           	opt stack 0
   264  00004B                     calculateTimerDiffsAndMask@sumTimers:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0xA
   268  00004B                     	ds	2
   269  00004D                     doRank@j:
   270                           	opt stack 0
   271  00004D                     calculateTimerDiffsAndMask@pivot:
   272                           	opt stack 0
   273                           
   274                           ; 4 bytes @ 0xC
   275  00004D                     	ds	1
   276  00004E                     doRank@i:
   277                           	opt stack 0
   278                           
   279                           ; 1 bytes @ 0xD
   280  00004E                     	ds	3
   281  000051                     calculateTimerDiffsAndMask@i2:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0x10
   285  000051                     	ds	1
   286  000052                     calculateTimerDiffsAndMask@i:
   287                           	opt stack 0
   288                           
   289                           ; 1 bytes @ 0x11
   290  000052                     	ds	1
   291  000053                     tblptru	equ	0xFF8
   292                           tblptrh	equ	0xFF7
   293                           tblptrl	equ	0xFF6
   294                           tablat	equ	0xFF5
   295                           postinc0	equ	0xFEE
   296                           wreg	equ	0xFE8
   297                           
   298                           ; 1 bytes @ 0x12
   299 ;;
   300 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   301 ;;
   302 ;; *************** function _main *****************
   303 ;; Defined at:
   304 ;;		line 35 in file "main.c"
   305 ;; Parameters:    Size  Location     Type
   306 ;;		None
   307 ;; Auto vars:     Size  Location     Type
   308 ;;		None
   309 ;; Return value:  Size  Location     Type
   310 ;;                  1    wreg      void 
   311 ;; Registers used:
   312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   313 ;; Tracked objects:
   314 ;;		On entry : 0/0
   315 ;;		On exit  : 0/0
   316 ;;		Unchanged: 0/0
   317 ;; Data sizes:     COMRAM   BANK0   BANK1
   318 ;;      Params:         0       0       0
   319 ;;      Locals:         0       0       0
   320 ;;      Temps:          0       0       0
   321 ;;      Totals:         0       0       0
   322 ;;Total ram usage:        0 bytes
   323 ;; Hardware stack levels required when called:    6
   324 ;; This function calls:
   325 ;;		_calculateTimerDiffsAndMask
   326 ;;		_doRank
   327 ;;		_initChannels
   328 ;;		_initDMX
   329 ;;		_initHardware
   330 ;;		_initPwm
   331 ;; This function is called by:
   332 ;;		Startup code after reset
   333 ;; This function uses a non-reentrant model
   334 ;;
   335                           
   336                           	psect	text0
   337  000666                     __ptext0:
   338                           	opt stack 0
   339  000666                     _main:
   340                           	opt stack 25
   341                           
   342                           ;main.c: 42: initHardware();
   343                           
   344                           ;incstack = 0
   345  000666  EC12  F003         	call	_initHardware	;wreg free
   346                           
   347                           ;main.c: 43: initPwm();
   348  00066A  ECA1  F003         	call	_initPwm	;wreg free
   349                           
   350                           ;main.c: 44: initChannels();
   351  00066E  ECEB  F002         	call	_initChannels	;wreg free
   352                           
   353                           ;main.c: 45: initDMX();
   354  000672  EC90  F003         	call	_initDMX	;wreg free
   355                           
   356                           ;main.c: 48: RCONbits.IPEN = 1;
   357  000676  8ED0               	bsf	4048,7,c	;volatile
   358                           
   359                           ;main.c: 51: INTCONbits.GIEH = 1;
   360  000678  8EF2               	bsf	intcon,7,c	;volatile
   361  00067A                     
   362                           ;main.c: 94: if (OERR == 1) {
   363  00067A  A2AB               	btfss	4011,1,c	;volatile
   364  00067C  D005               	goto	l54
   365                           
   366                           ;main.c: 97: errorCounter++;
   367  00067E  2A1E               	incf	_errorCounter,f,c
   368                           
   369                           ;main.c: 98: SPEN = 0;
   370  000680  9EAB               	bcf	4011,7,c	;volatile
   371                           
   372                           ;main.c: 99: RCIE = 0;
   373  000682  9A9D               	bcf	3997,5,c	;volatile
   374                           
   375                           ;main.c: 100: initDMX();
   376  000684  EC90  F003         	call	_initDMX	;wreg free
   377  000688                     l54:
   378                           
   379                           ;main.c: 101: };main.c: 105: if (lastInChainReceived ) {
   380  000688  5020               	movf	_lastInChainReceived,w,c	;volatile
   381  00068A  B4D8               	btfsc	status,2,c
   382  00068C  D7F6               	goto	l53
   383                           
   384                           ;main.c: 106: doRank();
   385  00068E  ECAA  F002         	call	_doRank	;wreg free
   386                           
   387                           ;main.c: 107: calculateTimerDiffsAndMask();
   388  000692  EC2A  F000         	call	_calculateTimerDiffsAndMask	;wreg free
   389                           
   390                           ;main.c: 108: lastInChainReceived = 0;
   391  000696  0E00               	movlw	0
   392  000698  6E20               	movwf	_lastInChainReceived,c	;volatile
   393                           
   394                           ;main.c: 109: };main.c: 110: }
   395  00069A  D7EF               	goto	l53
   396  00069C                     __end_of_main:
   397                           	opt stack 0
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           intcon	equ	0xFF2
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           status	equ	0xFD8
   406                           
   407 ;; *************** function _initPwm *****************
   408 ;; Defined at:
   409 ;;		line 19 in file "pwm.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;  i               1    0        unsigned char 
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, status,2
   418 ;; Tracked objects:
   419 ;;		On entry : 0/0
   420 ;;		On exit  : 0/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMRAM   BANK0   BANK1
   423 ;;      Params:         0       0       0
   424 ;;      Locals:         0       0       0
   425 ;;      Temps:          0       0       0
   426 ;;      Totals:         0       0       0
   427 ;;Total ram usage:        0 bytes
   428 ;; Hardware stack levels used:    1
   429 ;; Hardware stack levels required when called:    5
   430 ;; This function calls:
   431 ;;		Nothing
   432 ;; This function is called by:
   433 ;;		_main
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           	psect	text1
   438  000742                     __ptext1:
   439                           	opt stack 0
   440  000742                     _initPwm:
   441                           	opt stack 25
   442                           
   443                           ;pwm.c: 21: unsigned char i;;pwm.c: 23: INTCONbits.TMR0IF = 0;
   444                           
   445                           ;incstack = 0
   446  000742  94F2               	bcf	intcon,2,c	;volatile
   447                           
   448                           ;pwm.c: 25: T0CON = 0b10000001;
   449  000744  0E81               	movlw	129
   450  000746  6ED5               	movwf	4053,c	;volatile
   451                           
   452                           ;pwm.c: 27: INTCON2bits.TMR0IP = 1;
   453  000748  84F1               	bsf	intcon2,2,c	;volatile
   454                           
   455                           ;pwm.c: 28: INTCONbits.TMR0IE = 1;
   456  00074A  8AF2               	bsf	intcon,5,c	;volatile
   457                           
   458                           ;pwm.c: 30: INTCONbits.GIEH = 1;
   459  00074C  8EF2               	bsf	intcon,7,c	;volatile
   460                           
   461                           ;pwm.c: 31: INTCONbits.GIEL = 1;
   462  00074E  8CF2               	bsf	intcon,6,c	;volatile
   463                           
   464                           ;pwm.c: 33: INTCONbits.PEIE = 1;
   465  000750  8CF2               	bsf	intcon,6,c	;volatile
   466  000752  0012               	return		;funcret
   467  000754                     __end_of_initPwm:
   468                           	opt stack 0
   469                           tblptru	equ	0xFF8
   470                           tblptrh	equ	0xFF7
   471                           tblptrl	equ	0xFF6
   472                           tablat	equ	0xFF5
   473                           intcon	equ	0xFF2
   474                           intcon2	equ	0xFF1
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           status	equ	0xFD8
   478                           
   479 ;; *************** function _initHardware *****************
   480 ;; Defined at:
   481 ;;		line 6 in file "hardware.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;		None
   484 ;; Auto vars:     Size  Location     Type
   485 ;;		None
   486 ;; Return value:  Size  Location     Type
   487 ;;                  1    wreg      void 
   488 ;; Registers used:
   489 ;;		wreg, status,2
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMRAM   BANK0   BANK1
   495 ;;      Params:         0       0       0
   496 ;;      Locals:         0       0       0
   497 ;;      Temps:          0       0       0
   498 ;;      Totals:         0       0       0
   499 ;;Total ram usage:        0 bytes
   500 ;; Hardware stack levels used:    1
   501 ;; Hardware stack levels required when called:    5
   502 ;; This function calls:
   503 ;;		Nothing
   504 ;; This function is called by:
   505 ;;		_main
   506 ;; This function uses a non-reentrant model
   507 ;;
   508                           
   509                           	psect	text2
   510  000624                     __ptext2:
   511                           	opt stack 0
   512  000624                     _initHardware:
   513                           	opt stack 25
   514                           
   515                           ;hardware.c: 10: OSCCONbits.IDLEN = 0;
   516                           
   517                           ;incstack = 0
   518  000624  9ED3               	bcf	4051,7,c	;volatile
   519                           
   520                           ;hardware.c: 12: OSCCONbits.IRCF2 = 1;
   521  000626  8CD3               	bsf	4051,6,c	;volatile
   522                           
   523                           ;hardware.c: 13: OSCCONbits.IRCF1 = 1;
   524  000628  8AD3               	bsf	4051,5,c	;volatile
   525                           
   526                           ;hardware.c: 14: OSCCONbits.IRCF0 = 0;
   527  00062A  98D3               	bcf	4051,4,c	;volatile
   528                           
   529                           ;hardware.c: 16: OSCCONbits.SCS1 = 1;
   530  00062C  82D3               	bsf	4051,1,c	;volatile
   531                           
   532                           ;hardware.c: 17: OSCCONbits.SCS0 = 0;
   533  00062E  90D3               	bcf	4051,0,c	;volatile
   534                           
   535                           ;hardware.c: 23: CM1CON0 = 0;
   536  000630  0E00               	movlw	0
   537  000632  6E6D               	movwf	3949,c	;volatile
   538                           
   539                           ;hardware.c: 24: CM2CON0 = 0;
   540  000634  0E00               	movlw	0
   541  000636  6E6B               	movwf	3947,c	;volatile
   542                           
   543                           ;hardware.c: 27: ANSEL = 0x00;
   544  000638  0E00               	movlw	0
   545  00063A  6E7E               	movwf	3966,c	;volatile
   546                           
   547                           ;hardware.c: 28: ANSELH = 0x00;
   548  00063C  0E00               	movlw	0
   549  00063E  6E7F               	movwf	3967,c	;volatile
   550                           
   551                           ;hardware.c: 30: LATA = 0x00;
   552  000640  0E00               	movlw	0
   553  000642  6E89               	movwf	3977,c	;volatile
   554                           
   555                           ;hardware.c: 31: PORTA = 0x00;
   556  000644  0E00               	movlw	0
   557  000646  6E80               	movwf	3968,c	;volatile
   558                           
   559                           ;hardware.c: 32: TRISA = 0b00000111;
   560  000648  0E07               	movlw	7
   561  00064A  6E92               	movwf	3986,c	;volatile
   562                           
   563                           ;hardware.c: 41: PORTB = 0x00;
   564  00064C  0E00               	movlw	0
   565  00064E  6E81               	movwf	3969,c	;volatile
   566                           
   567                           ;hardware.c: 42: LATB = 0x00;
   568  000650  0E00               	movlw	0
   569  000652  6E8A               	movwf	3978,c	;volatile
   570                           
   571                           ;hardware.c: 44: TRISB = 0b00100111;
   572  000654  0E27               	movlw	39
   573  000656  6E93               	movwf	3987,c	;volatile
   574                           
   575                           ;hardware.c: 46: LATC = 0x00;
   576  000658  0E00               	movlw	0
   577  00065A  6E8B               	movwf	3979,c	;volatile
   578                           
   579                           ;hardware.c: 47: PORTC = 0x00;
   580  00065C  0E00               	movlw	0
   581  00065E  6E82               	movwf	3970,c	;volatile
   582                           
   583                           ;hardware.c: 49: TRISC = 0b00000000;
   584  000660  0E00               	movlw	0
   585  000662  6E94               	movwf	3988,c	;volatile
   586  000664  0012               	return		;funcret
   587  000666                     __end_of_initHardware:
   588                           	opt stack 0
   589                           tblptru	equ	0xFF8
   590                           tblptrh	equ	0xFF7
   591                           tblptrl	equ	0xFF6
   592                           tablat	equ	0xFF5
   593                           intcon	equ	0xFF2
   594                           intcon2	equ	0xFF1
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           status	equ	0xFD8
   598                           
   599 ;; *************** function _initDMX *****************
   600 ;; Defined at:
   601 ;;		line 31 in file "dmx.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;		None
   604 ;; Auto vars:     Size  Location     Type
   605 ;;		None
   606 ;; Return value:  Size  Location     Type
   607 ;;                  1    wreg      void 
   608 ;; Registers used:
   609 ;;		wreg, status,2
   610 ;; Tracked objects:
   611 ;;		On entry : 0/0
   612 ;;		On exit  : 0/0
   613 ;;		Unchanged: 0/0
   614 ;; Data sizes:     COMRAM   BANK0   BANK1
   615 ;;      Params:         0       0       0
   616 ;;      Locals:         0       0       0
   617 ;;      Temps:          0       0       0
   618 ;;      Totals:         0       0       0
   619 ;;Total ram usage:        0 bytes
   620 ;; Hardware stack levels used:    1
   621 ;; Hardware stack levels required when called:    5
   622 ;; This function calls:
   623 ;;		Nothing
   624 ;; This function is called by:
   625 ;;		_main
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text3
   630  000720                     __ptext3:
   631                           	opt stack 0
   632  000720                     _initDMX:
   633                           	opt stack 25
   634                           
   635                           ;dmx.c: 35: BAUDCONbits.BRG16 = 1;
   636                           
   637                           ;incstack = 0
   638  000720  86B8               	bsf	4024,3,c	;volatile
   639                           
   640                           ;dmx.c: 36: BAUDCONbits.CKTXP = 1;
   641  000722  88B8               	bsf	4024,4,c	;volatile
   642                           
   643                           ;dmx.c: 38: SPBRG1 = 1;
   644  000724  0E01               	movlw	1
   645  000726  6EAF               	movwf	4015,c	;volatile
   646                           
   647                           ;dmx.c: 39: SPBRGH = 0;
   648  000728  0E00               	movlw	0
   649  00072A  6EB0               	movwf	4016,c	;volatile
   650                           
   651                           ;dmx.c: 41: RCSTA1bits.CREN = 1;
   652  00072C  88AB               	bsf	4011,4,c	;volatile
   653                           
   654                           ;dmx.c: 43: RCSTA1bits.SPEN = 1;
   655  00072E  8EAB               	bsf	4011,7,c	;volatile
   656                           
   657                           ;dmx.c: 45: PIE1bits.RCIE = 1;
   658  000730  8A9D               	bsf	3997,5,c	;volatile
   659                           
   660                           ;dmx.c: 46: IPR1bits.RCIP = 0;
   661  000732  9A9F               	bcf	3999,5,c	;volatile
   662                           
   663                           ;dmx.c: 49: currentAdress = 0;
   664  000734  0E00               	movlw	0
   665  000736  6E0A               	movwf	_currentAdress+1,c
   666  000738  0E00               	movlw	0
   667  00073A  6E09               	movwf	_currentAdress,c
   668                           
   669                           ;dmx.c: 51: dmxState = 0x00;
   670  00073C  0E00               	movlw	0
   671  00073E  6E18               	movwf	_dmxState,c
   672  000740  0012               	return		;funcret
   673  000742                     __end_of_initDMX:
   674                           	opt stack 0
   675                           tblptru	equ	0xFF8
   676                           tblptrh	equ	0xFF7
   677                           tblptrl	equ	0xFF6
   678                           tablat	equ	0xFF5
   679                           intcon	equ	0xFF2
   680                           intcon2	equ	0xFF1
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           status	equ	0xFD8
   684                           
   685 ;; *************** function _initChannels *****************
   686 ;; Defined at:
   687 ;;		line 38 in file "channels.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;  i               1   10[COMRAM] unsigned char 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1
   701 ;;      Params:         0       0       0
   702 ;;      Locals:         1       0       0
   703 ;;      Temps:          0       0       0
   704 ;;      Totals:         1       0       0
   705 ;;Total ram usage:        1 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; Hardware stack levels required when called:    5
   708 ;; This function calls:
   709 ;;		Nothing
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text4
   716  0005D6                     __ptext4:
   717                           	opt stack 0
   718  0005D6                     _initChannels:
   719                           	opt stack 25
   720                           
   721                           ;channels.c: 40: unsigned char i;;channels.c: 42: for (i = 0; i < 4; i++) {
   722                           
   723                           ;incstack = 0
   724  0005D6  0E00               	movlw	0
   725  0005D8  6E4B               	movwf	initChannels@i,c
   726  0005DA                     l1306:
   727  0005DA  0E03               	movlw	3
   728  0005DC  644B               	cpfsgt	initChannels@i,c
   729  0005DE  D001               	goto	l141
   730  0005E0  D00C               	goto	u500
   731  0005E2                     l141:
   732                           
   733                           ;channels.c: 43: channelLevel[i] = 10;
   734  0005E2  504B               	movf	initChannels@i,w,c
   735  0005E4  0D01               	mullw	1
   736  0005E6  0E05               	movlw	low _channelLevel
   737  0005E8  24F3               	addwf	prodl,w,c
   738  0005EA  6ED9               	movwf	fsr2l,c
   739  0005EC  0E00               	movlw	high _channelLevel
   740  0005EE  20F4               	addwfc	prodh,w,c
   741  0005F0  6EDA               	movwf	fsr2h,c
   742  0005F2  0E0A               	movlw	10
   743  0005F4  6EDF               	movwf	indf2,c
   744  0005F6  2A4B               	incf	initChannels@i,f,c
   745  0005F8  D7F0               	goto	l1306
   746  0005FA                     u500:
   747                           
   748                           ;channels.c: 44: };channels.c: 46: pCIRead = &ci1;
   749  0005FA  0E31               	movlw	low _ci1
   750  0005FC  6E13               	movwf	_pCIRead,c
   751  0005FE  0E00               	movlw	high _ci1
   752  000600  6E14               	movwf	_pCIRead+1,c
   753                           
   754                           ;channels.c: 47: pCIWrite = &ci2;
   755  000602  0E21               	movlw	low _ci2
   756  000604  6E0F               	movwf	_pCIWrite,c
   757  000606  0E00               	movlw	high _ci2
   758  000608  6E10               	movwf	_pCIWrite+1,c
   759                           
   760                           ;channels.c: 49: pCIRead -> numInts = 4;
   761  00060A  C013  FFD9         	movff	_pCIRead,fsr2l
   762  00060E  C014  FFDA         	movff	_pCIRead+1,fsr2h
   763  000612  0E04               	movlw	4
   764  000614  6EDF               	movwf	indf2,c
   765                           
   766                           ;channels.c: 50: pCIWrite -> numInts = 4;
   767  000616  C00F  FFD9         	movff	_pCIWrite,fsr2l
   768  00061A  C010  FFDA         	movff	_pCIWrite+1,fsr2h
   769  00061E  0E04               	movlw	4
   770  000620  6EDF               	movwf	indf2,c
   771  000622  0012               	return		;funcret
   772  000624                     __end_of_initChannels:
   773                           	opt stack 0
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           prodh	equ	0xFF4
   779                           prodl	equ	0xFF3
   780                           intcon	equ	0xFF2
   781                           intcon2	equ	0xFF1
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           indf2	equ	0xFDF
   785                           fsr2h	equ	0xFDA
   786                           fsr2l	equ	0xFD9
   787                           status	equ	0xFD8
   788                           
   789 ;; *************** function _doRank *****************
   790 ;; Defined at:
   791 ;;		line 95 in file "channels.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;  i               1   13[COMRAM] unsigned char 
   796 ;;  j               1   12[COMRAM] unsigned char 
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1
   806 ;;      Params:         0       0       0
   807 ;;      Locals:         2       0       0
   808 ;;      Temps:          2       0       0
   809 ;;      Totals:         4       0       0
   810 ;;Total ram usage:        4 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; Hardware stack levels required when called:    5
   813 ;; This function calls:
   814 ;;		Nothing
   815 ;; This function is called by:
   816 ;;		_main
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text5
   821  000554                     __ptext5:
   822                           	opt stack 0
   823  000554                     _doRank:
   824                           	opt stack 25
   825                           
   826                           ;channels.c: 97: unsigned char i, j;;channels.c: 99: for ( i = 0; i < 4; i++)
   827                           
   828                           ;incstack = 0
   829  000554  0E00               	movlw	0
   830  000556  6E4E               	movwf	doRank@i,c
   831  000558                     l1110:
   832  000558  0E03               	movlw	3
   833  00055A  644E               	cpfsgt	doRank@i,c
   834  00055C  D001               	goto	l158
   835  00055E  D00C               	goto	u180
   836  000560                     l158:
   837                           
   838                           ;channels.c: 100: channelRank[i] = 0;
   839  000560  504E               	movf	doRank@i,w,c
   840  000562  0D01               	mullw	1
   841  000564  0E01               	movlw	low _channelRank
   842  000566  24F3               	addwf	prodl,w,c
   843  000568  6ED9               	movwf	fsr2l,c
   844  00056A  0E00               	movlw	high _channelRank
   845  00056C  20F4               	addwfc	prodh,w,c
   846  00056E  6EDA               	movwf	fsr2h,c
   847  000570  0E00               	movlw	0
   848  000572  6EDF               	movwf	indf2,c
   849  000574  2A4E               	incf	doRank@i,f,c
   850  000576  D7F0               	goto	l1110
   851  000578                     u180:
   852                           
   853                           ;channels.c: 102: for ( i = 0; i < 4-1; i++) {
   854  000578  0E00               	movlw	0
   855  00057A  6E4E               	movwf	doRank@i,c
   856  00057C                     l1122:
   857  00057C  0E02               	movlw	2
   858  00057E  644E               	cpfsgt	doRank@i,c
   859  000580  D001               	goto	l160
   860  000582  0012               	return	
   861  000584                     l160:
   862                           
   863                           ;channels.c: 104: for ( j = i + 1; j < 4;j++) {
   864  000584  284E               	incf	doRank@i,w,c
   865  000586  6E4D               	movwf	doRank@j,c
   866  000588  0E03               	movlw	3
   867  00058A  644D               	cpfsgt	doRank@j,c
   868  00058C  D001               	goto	l162
   869  00058E  D021               	goto	u220
   870  000590                     l162:
   871                           
   872                           ;channels.c: 106: if (channelLevel[i] > channelLevel[j])
   873  000590  504E               	movf	doRank@i,w,c
   874  000592  0D01               	mullw	1
   875  000594  0E05               	movlw	low _channelLevel
   876  000596  24F3               	addwf	prodl,w,c
   877  000598  6ED9               	movwf	fsr2l,c
   878  00059A  0E00               	movlw	high _channelLevel
   879  00059C  20F4               	addwfc	prodh,w,c
   880  00059E  6EDA               	movwf	fsr2h,c
   881  0005A0  504D               	movf	doRank@j,w,c
   882  0005A2  0D01               	mullw	1
   883  0005A4  0E05               	movlw	low _channelLevel
   884  0005A6  24F3               	addwf	prodl,w,c
   885  0005A8  6EE1               	movwf	fsr1l,c
   886  0005AA  0E00               	movlw	high _channelLevel
   887  0005AC  20F4               	addwfc	prodh,w,c
   888  0005AE  6EE2               	movwf	fsr1h,c
   889  0005B0  50DE               	movf	postinc2,w,c
   890  0005B2  5CE6               	subwf	postinc1,w,c
   891  0005B4  B0D8               	btfsc	status,0,c
   892  0005B6  D002               	goto	l164
   893                           
   894                           ;channels.c: 107: channelRank[i]++;
   895  0005B8  504E               	movf	doRank@i,w,c
   896  0005BA  D001               	goto	L1
   897  0005BC                     l164:
   898                           
   899                           ;channels.c: 108: else;channels.c: 109: channelRank[j]++;
   900  0005BC  504D               	movf	doRank@j,w,c
   901  0005BE                     L1:
   902  0005BE  0D01               	mullw	1
   903  0005C0  0E01               	movlw	low _channelRank
   904  0005C2  24F3               	addwf	prodl,w,c
   905  0005C4  6ED9               	movwf	fsr2l,c
   906  0005C6  0E00               	movlw	high _channelRank
   907  0005C8  20F4               	addwfc	prodh,w,c
   908  0005CA  6EDA               	movwf	fsr2h,c
   909  0005CC  2ADF               	incf	indf2,f,c
   910  0005CE  2A4D               	incf	doRank@j,f,c
   911  0005D0  D7DB               	goto	L2
   912  0005D2                     u220:
   913  0005D2  2A4E               	incf	doRank@i,f,c
   914  0005D4  D7D3               	goto	l1122
   915  0005D6                     __end_of_doRank:
   916                           	opt stack 0
   917                           tblptru	equ	0xFF8
   918                           tblptrh	equ	0xFF7
   919                           tblptrl	equ	0xFF6
   920                           tablat	equ	0xFF5
   921                           prodh	equ	0xFF4
   922                           prodl	equ	0xFF3
   923                           intcon	equ	0xFF2
   924                           intcon2	equ	0xFF1
   925                           postinc0	equ	0xFEE
   926                           wreg	equ	0xFE8
   927                           postinc1	equ	0xFE6
   928                           fsr1h	equ	0xFE2
   929                           fsr1l	equ	0xFE1
   930                           indf2	equ	0xFDF
   931                           postinc2	equ	0xFDE
   932                           fsr2h	equ	0xFDA
   933                           fsr2l	equ	0xFD9
   934                           status	equ	0xFD8
   935                           
   936 ;; *************** function _calculateTimerDiffsAndMask *****************
   937 ;; Defined at:
   938 ;;		line 128 in file "channels.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  pivot           4   12[COMRAM] unsigned char [4]
   943 ;;  sumTimers       2   10[COMRAM] unsigned int 
   944 ;;  i               1   17[COMRAM] unsigned char 
   945 ;;  i2              1   16[COMRAM] unsigned char 
   946 ;; Return value:  Size  Location     Type
   947 ;;                  1    wreg      void 
   948 ;; Registers used:
   949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1
   955 ;;      Params:         0       0       0
   956 ;;      Locals:         8       0       0
   957 ;;      Temps:          0      10       0
   958 ;;      Totals:         8      10       0
   959 ;;Total ram usage:       18 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; Hardware stack levels required when called:    5
   962 ;; This function calls:
   963 ;;		Nothing
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969                           	psect	text6
   970  000054                     __ptext6:
   971                           	opt stack 0
   972  000054                     _calculateTimerDiffsAndMask:
   973                           	opt stack 25
   974                           
   975                           ;channels.c: 130: unsigned char i;;channels.c: 131: unsigned char i2;;channels.c: 132: u
      +                          nsigned int sumTimers;;channels.c: 134: unsigned char pivot[4];;channels.c: 136: for (i 
      +                          = 0; i < 4; i++) {
   976                           
   977                           ;incstack = 0
   978  000054  0E00               	movlw	0
   979  000056  6E52               	movwf	calculateTimerDiffsAndMask@i,c
   980  000058                     l1356:
   981  000058  0E03               	movlw	3
   982  00005A  6452               	cpfsgt	calculateTimerDiffsAndMask@i,c
   983  00005C  D001               	goto	l169
   984  00005E  D017               	goto	u550
   985  000060                     l169:
   986                           
   987                           ;channels.c: 137: pivot[channelRank[i]] = i;
   988  000060  5052               	movf	calculateTimerDiffsAndMask@i,w,c
   989  000062  0D01               	mullw	1
   990  000064  0E01               	movlw	low _channelRank
   991  000066  24F3               	addwf	prodl,w,c
   992  000068  6ED9               	movwf	fsr2l,c
   993  00006A  0E00               	movlw	high _channelRank
   994  00006C  20F4               	addwfc	prodh,w,c
   995  00006E  6EDA               	movwf	fsr2h,c
   996  000070  50DF               	movf	indf2,w,c
   997  000072  0100               	movlb	0	; () banked
   998  000074  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
   999  000076  5160               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1000  000078  0D01               	mullw	1
  1001  00007A  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1002  00007C  24F3               	addwf	prodl,w,c
  1003  00007E  6ED9               	movwf	fsr2l,c
  1004  000080  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1005  000082  20F4               	addwfc	prodh,w,c
  1006  000084  6EDA               	movwf	fsr2h,c
  1007  000086  C052  FFDF         	movff	calculateTimerDiffsAndMask@i,indf2
  1008                           
  1009                           ; BSR set to: 0
  1010  00008A  2A52               	incf	calculateTimerDiffsAndMask@i,f,c
  1011  00008C  D7E5               	goto	l1356
  1012  00008E                     u550:
  1013                           
  1014                           ;channels.c: 138: };channels.c: 141: syncLock = 1;
  1015                           
  1016                           ; BSR set to: 0
  1017  00008E  0E01               	movlw	1
  1018  000090  6E1A               	movwf	_syncLock,c	;volatile
  1019                           
  1020                           ;channels.c: 143: pCIWrite -> numInts = 4;
  1021  000092  C00F  FFD9         	movff	_pCIWrite,fsr2l
  1022  000096  C010  FFDA         	movff	_pCIWrite+1,fsr2h
  1023  00009A  0E04               	movlw	4
  1024  00009C  6EDF               	movwf	indf2,c
  1025                           
  1026                           ;channels.c: 149: pCIWrite -> bitmask[0] = 0x00;
  1027  00009E  EE20 F00B          	lfsr	2,11
  1028  0000A2  500F               	movf	_pCIWrite,w,c
  1029  0000A4  26D9               	addwf	fsr2l,f,c
  1030  0000A6  5010               	movf	_pCIWrite+1,w,c
  1031  0000A8  22DA               	addwfc	fsr2h,f,c
  1032  0000AA  0E00               	movlw	0
  1033  0000AC  6EDF               	movwf	indf2,c
  1034                           
  1035                           ;channels.c: 150: for ( i = 0; i < 4; i++) {
  1036  0000AE  0E00               	movlw	0
  1037  0000B0  6E52               	movwf	calculateTimerDiffsAndMask@i,c
  1038  0000B2                     l1374:
  1039  0000B2  0E03               	movlw	3
  1040  0000B4  6452               	cpfsgt	calculateTimerDiffsAndMask@i,c
  1041  0000B6  D001               	goto	l171
  1042  0000B8  D027               	goto	u590
  1043  0000BA                     l171:
  1044                           
  1045                           ;channels.c: 151: if ( channelLevel[i] > 0)
  1046  0000BA  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1047  0000BC  0D01               	mullw	1
  1048  0000BE  0E05               	movlw	low _channelLevel
  1049  0000C0  24F3               	addwf	prodl,w,c
  1050  0000C2  6ED9               	movwf	fsr2l,c
  1051  0000C4  0E00               	movlw	high _channelLevel
  1052  0000C6  20F4               	addwfc	prodh,w,c
  1053  0000C8  6EDA               	movwf	fsr2h,c
  1054  0000CA  50DF               	movf	indf2,w,c
  1055  0000CC  B4D8               	btfsc	status,2,c
  1056  0000CE  D015               	goto	l173
  1057                           
  1058                           ;channels.c: 152: pCIWrite -> bitmask[0] |= (1 << i);
  1059  0000D0  C052  F060         	movff	calculateTimerDiffsAndMask@i,??_calculateTimerDiffsAndMask
  1060  0000D4  0E01               	movlw	1
  1061  0000D6  0100               	movlb	0	; () banked
  1062  0000D8  6F61               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1063  0000DA  2B60               	incf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1064  0000DC  D002               	goto	u584
  1065  0000DE                     u585:
  1066  0000DE  90D8               	bcf	status,0,c
  1067  0000E0  3761               	rlcf	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1068  0000E2                     u584:
  1069  0000E2  2F60               	decfsz	??_calculateTimerDiffsAndMask& (0+255),f,b
  1070  0000E4  D7FC               	goto	u585
  1071  0000E6  EE20 F00B          	lfsr	2,11
  1072  0000EA  500F               	movf	_pCIWrite,w,c
  1073  0000EC  26D9               	addwf	fsr2l,f,c
  1074  0000EE  5010               	movf	_pCIWrite+1,w,c
  1075  0000F0  22DA               	addwfc	fsr2h,f,c
  1076  0000F2  0100               	movlb	0	; () banked
  1077  0000F4  5161               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1078  0000F6  12DF               	iorwf	indf2,f,c
  1079  0000F8  D005               	goto	l174
  1080  0000FA                     l173:
  1081                           
  1082                           ;channels.c: 153: else {;channels.c: 154: pCIWrite -> numInts--;
  1083                           
  1084                           ; BSR set to: 0
  1085  0000FA  C00F  FFD9         	movff	_pCIWrite,fsr2l
  1086  0000FE  C010  FFDA         	movff	_pCIWrite+1,fsr2h
  1087  000102  06DF               	decf	indf2,f,c
  1088  000104                     l174:
  1089  000104  2A52               	incf	calculateTimerDiffsAndMask@i,f,c
  1090  000106  D7D5               	goto	l1374
  1091  000108                     u590:
  1092                           
  1093                           ;channels.c: 155: };channels.c: 156: };channels.c: 162: i2 = 0;
  1094  000108  0E00               	movlw	0
  1095  00010A  6E51               	movwf	calculateTimerDiffsAndMask@i2,c
  1096                           
  1097                           ;channels.c: 163: for ( i = 0; i < 4; i++) {
  1098  00010C  0E00               	movlw	0
  1099  00010E  6E52               	movwf	calculateTimerDiffsAndMask@i,c
  1100  000110                     l1390:
  1101  000110  0E03               	movlw	3
  1102  000112  6452               	cpfsgt	calculateTimerDiffsAndMask@i,c
  1103  000114  D001               	goto	l175
  1104  000116  D117               	goto	u670
  1105  000118                     l175:
  1106                           
  1107                           ;channels.c: 165: if ( channelLevel[pivot[i]] == 0) {
  1108  000118  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1109  00011A  0D01               	mullw	1
  1110  00011C  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1111  00011E  24F3               	addwf	prodl,w,c
  1112  000120  6ED9               	movwf	fsr2l,c
  1113  000122  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1114  000124  20F4               	addwfc	prodh,w,c
  1115  000126  6EDA               	movwf	fsr2h,c
  1116  000128  50DF               	movf	indf2,w,c
  1117  00012A  0100               	movlb	0	; () banked
  1118  00012C  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1119  00012E  5160               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1120  000130  0D01               	mullw	1
  1121  000132  0E05               	movlw	low _channelLevel
  1122  000134  24F3               	addwf	prodl,w,c
  1123  000136  6ED9               	movwf	fsr2l,c
  1124  000138  0E00               	movlw	high _channelLevel
  1125  00013A  20F4               	addwfc	prodh,w,c
  1126  00013C  6EDA               	movwf	fsr2h,c
  1127  00013E  50DF               	movf	indf2,w,c
  1128  000140  B4D8               	btfsc	status,2,c
  1129  000142  D0FF               	goto	l178
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;channels.c: 167: };channels.c: 169: if ( i == 0 ) {
  1133                           
  1134                           ; BSR set to: 0
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;channels.c: 166: continue;
  1138  000144  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1139  000146  A4D8               	btfss	status,2,c
  1140  000148  D027               	goto	l179
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;channels.c: 170: pCIWrite -> timer[i2] = channelLevel[pivot[i]] * 16;
  1144  00014A  5051               	movf	calculateTimerDiffsAndMask@i2,w,c
  1145  00014C  0D02               	mullw	2
  1146  00014E  0E01               	movlw	1
  1147  000150  26F3               	addwf	prodl,f,c
  1148  000152  0E00               	movlw	0
  1149  000154  22F4               	addwfc	prodh,f,c
  1150  000156  50F3               	movf	prodl,w,c
  1151  000158  240F               	addwf	_pCIWrite,w,c
  1152  00015A  6ED9               	movwf	fsr2l,c
  1153  00015C  50F4               	movf	prodh,w,c
  1154  00015E  2010               	addwfc	_pCIWrite+1,w,c
  1155  000160  6EDA               	movwf	fsr2h,c
  1156  000162  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1157  000164  0D01               	mullw	1
  1158  000166  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1159  000168  24F3               	addwf	prodl,w,c
  1160  00016A  6EE1               	movwf	fsr1l,c
  1161  00016C  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1162  00016E  20F4               	addwfc	prodh,w,c
  1163  000170  6EE2               	movwf	fsr1h,c
  1164  000172  50E7               	movf	indf1,w,c
  1165  000174  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1166  000176  5160               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1167  000178  0D01               	mullw	1
  1168  00017A  0E05               	movlw	low _channelLevel
  1169  00017C  24F3               	addwf	prodl,w,c
  1170  00017E  6EE1               	movwf	fsr1l,c
  1171  000180  0E00               	movlw	high _channelLevel
  1172  000182  20F4               	addwfc	prodh,w,c
  1173  000184  6EE2               	movwf	fsr1h,c
  1174  000186  50E7               	movf	indf1,w,c
  1175  000188  6F61               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1176  00018A  5161               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1177  00018C  0D10               	mullw	16
  1178  00018E  CFF3 FFDE          	movff	prodl,postinc2
  1179  000192  CFF4 FFDD          	movff	prodh,postdec2
  1180                           
  1181                           ;channels.c: 171: }
  1182  000196  D054               	goto	l180
  1183  000198                     l179:
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;channels.c: 172: else {;channels.c: 173: pCIWrite -> timer[i2] = (channelLevel[pivot[i]
      +                          ] - channelLevel[pivot[i-1]]) * 16;
  1187                           
  1188                           ; BSR set to: 0
  1189  000198  0EFF               	movlw	255
  1190  00019A  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1191  00019C  0EFF               	movlw	255
  1192  00019E  6F61               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1193  0001A0  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1194  0001A2  6F62               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1195  0001A4  6B63               	clrf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1196  0001A6  5160               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1197  0001A8  2762               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1198  0001AA  5161               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1199  0001AC  2363               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1200  0001AE  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1201  0001B0  2562               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),w,b
  1202  0001B2  6ED9               	movwf	fsr2l,c
  1203  0001B4  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1204  0001B6  2163               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1205  0001B8  6EDA               	movwf	fsr2h,c
  1206  0001BA  50DF               	movf	indf2,w,c
  1207  0001BC  6F64               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1208  0001BE  5164               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1209  0001C0  0D01               	mullw	1
  1210  0001C2  0E05               	movlw	low _channelLevel
  1211  0001C4  24F3               	addwf	prodl,w,c
  1212  0001C6  6ED9               	movwf	fsr2l,c
  1213  0001C8  0E00               	movlw	high _channelLevel
  1214  0001CA  20F4               	addwfc	prodh,w,c
  1215  0001CC  6EDA               	movwf	fsr2h,c
  1216  0001CE  50DF               	movf	indf2,w,c
  1217  0001D0  6F65               	movwf	(??_calculateTimerDiffsAndMask+5)& (0+255),b
  1218  0001D2  6B66               	clrf	(??_calculateTimerDiffsAndMask+6)& (0+255),b
  1219  0001D4  1F65               	comf	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1220  0001D6  1F66               	comf	(??_calculateTimerDiffsAndMask+6)& (0+255),f,b
  1221  0001D8  4B65               	infsnz	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1222  0001DA  2B66               	incf	(??_calculateTimerDiffsAndMask+6)& (0+255),f,b
  1223  0001DC  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1224  0001DE  0D01               	mullw	1
  1225  0001E0  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1226  0001E2  24F3               	addwf	prodl,w,c
  1227  0001E4  6ED9               	movwf	fsr2l,c
  1228  0001E6  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1229  0001E8  20F4               	addwfc	prodh,w,c
  1230  0001EA  6EDA               	movwf	fsr2h,c
  1231  0001EC  50DF               	movf	indf2,w,c
  1232  0001EE  6F67               	movwf	(??_calculateTimerDiffsAndMask+7)& (0+255),b
  1233  0001F0  5167               	movf	(??_calculateTimerDiffsAndMask+7)& (0+255),w,b
  1234  0001F2  0D01               	mullw	1
  1235  0001F4  0E05               	movlw	low _channelLevel
  1236  0001F6  24F3               	addwf	prodl,w,c
  1237  0001F8  6ED9               	movwf	fsr2l,c
  1238  0001FA  0E00               	movlw	high _channelLevel
  1239  0001FC  20F4               	addwfc	prodh,w,c
  1240  0001FE  6EDA               	movwf	fsr2h,c
  1241  000200  50DF               	movf	indf2,w,c
  1242  000202  6F68               	movwf	(??_calculateTimerDiffsAndMask+8)& (0+255),b
  1243  000204  6B69               	clrf	(??_calculateTimerDiffsAndMask+9)& (0+255),b
  1244  000206  5165               	movf	(??_calculateTimerDiffsAndMask+5)& (0+255),w,b
  1245  000208  2768               	addwf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1246  00020A  5166               	movf	(??_calculateTimerDiffsAndMask+6)& (0+255),w,b
  1247  00020C  2369               	addwfc	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1248  00020E  3B68               	swapf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1249  000210  3B69               	swapf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1250  000212  0EF0               	movlw	240
  1251  000214  1769               	andwf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1252  000216  5168               	movf	(??_calculateTimerDiffsAndMask+8)& (0+255),w,b
  1253  000218  0B0F               	andlw	15
  1254  00021A  1369               	iorwf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1255  00021C  0EF0               	movlw	240
  1256  00021E  1768               	andwf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1257  000220  5051               	movf	calculateTimerDiffsAndMask@i2,w,c
  1258  000222  0D02               	mullw	2
  1259  000224  0E01               	movlw	1
  1260  000226  26F3               	addwf	prodl,f,c
  1261  000228  0E00               	movlw	0
  1262  00022A  22F4               	addwfc	prodh,f,c
  1263  00022C  50F3               	movf	prodl,w,c
  1264  00022E  240F               	addwf	_pCIWrite,w,c
  1265  000230  6ED9               	movwf	fsr2l,c
  1266  000232  50F4               	movf	prodh,w,c
  1267  000234  2010               	addwfc	_pCIWrite+1,w,c
  1268  000236  6EDA               	movwf	fsr2h,c
  1269  000238  C068  FFDE         	movff	??_calculateTimerDiffsAndMask+8,postinc2
  1270  00023C  C069  FFDD         	movff	??_calculateTimerDiffsAndMask+9,postdec2
  1271  000240                     l180:
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;channels.c: 174: };channels.c: 176: pCIWrite -> bitmask[i2+1] = (1 << pivot[i]);
  1275                           
  1276                           ; BSR set to: 0
  1277  000240  5051               	movf	calculateTimerDiffsAndMask@i2,w,c
  1278  000242  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1279  000244  6B61               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1280  000246  0E0C               	movlw	12
  1281  000248  2760               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1282  00024A  0E00               	movlw	0
  1283  00024C  2361               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1284  00024E  5160               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1285  000250  240F               	addwf	_pCIWrite,w,c
  1286  000252  6ED9               	movwf	fsr2l,c
  1287  000254  5161               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1288  000256  2010               	addwfc	_pCIWrite+1,w,c
  1289  000258  6EDA               	movwf	fsr2h,c
  1290  00025A  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1291  00025C  0D01               	mullw	1
  1292  00025E  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1293  000260  24F3               	addwf	prodl,w,c
  1294  000262  6EE1               	movwf	fsr1l,c
  1295  000264  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1296  000266  20F4               	addwfc	prodh,w,c
  1297  000268  6EE2               	movwf	fsr1h,c
  1298  00026A  50E7               	movf	indf1,w,c
  1299  00026C  6F62               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1300  00026E  0E01               	movlw	1
  1301  000270  6F63               	movwf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1302  000272  2B62               	incf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1303  000274  D002               	goto	u634
  1304  000276                     u635:
  1305  000276  90D8               	bcf	status,0,c
  1306  000278  3763               	rlcf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1307  00027A                     u634:
  1308  00027A  2F62               	decfsz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1309  00027C  D7FC               	goto	u635
  1310  00027E  0100               	movlb	0	; () banked
  1311  000280  5163               	movf	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1312  000282  6EDF               	movwf	indf2,c
  1313                           
  1314                           ;channels.c: 182: while ((i < (4 - 1)) && (channelLevel[pivot[i]] == channelLevel[pivot[
      +                          i+1]] ) ) {
  1315  000284  D02D               	goto	l181
  1316  000286                     
  1317                           ; BSR set to: 0
  1318                           ;channels.c: 183: pCIWrite -> bitmask[i2+1] |= (1 << pivot[i+1]);
  1319                           
  1320                           ; BSR set to: 0
  1321  000286  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1322  000288  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1323  00028A  6B61               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1324  00028C  0E01               	movlw	1
  1325  00028E  2760               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1326  000290  0E00               	movlw	0
  1327  000292  2361               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1328  000294  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1329  000296  2560               	addwf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1330  000298  6ED9               	movwf	fsr2l,c
  1331  00029A  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1332  00029C  2161               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1333  00029E  6EDA               	movwf	fsr2h,c
  1334  0002A0  50DF               	movf	indf2,w,c
  1335  0002A2  6F62               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1336  0002A4  0E01               	movlw	1
  1337  0002A6  6F63               	movwf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1338  0002A8  2B62               	incf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1339  0002AA  D002               	goto	u644
  1340  0002AC                     u645:
  1341  0002AC  90D8               	bcf	status,0,c
  1342  0002AE  3763               	rlcf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1343  0002B0                     u644:
  1344  0002B0  2F62               	decfsz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1345  0002B2  D7FC               	goto	u645
  1346  0002B4  5051               	movf	calculateTimerDiffsAndMask@i2,w,c
  1347  0002B6  0100               	movlb	0	; () banked
  1348  0002B8  6F64               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1349  0002BA  6B65               	clrf	(??_calculateTimerDiffsAndMask+5)& (0+255),b
  1350  0002BC  0E0C               	movlw	12
  1351  0002BE  2764               	addwf	(??_calculateTimerDiffsAndMask+4)& (0+255),f,b
  1352  0002C0  0E00               	movlw	0
  1353  0002C2  2365               	addwfc	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1354  0002C4  5164               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1355  0002C6  240F               	addwf	_pCIWrite,w,c
  1356  0002C8  6ED9               	movwf	fsr2l,c
  1357  0002CA  5165               	movf	(??_calculateTimerDiffsAndMask+5)& (0+255),w,b
  1358  0002CC  2010               	addwfc	_pCIWrite+1,w,c
  1359  0002CE  6EDA               	movwf	fsr2h,c
  1360  0002D0  5163               	movf	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1361  0002D2  12DF               	iorwf	indf2,f,c
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;channels.c: 184: i++;
  1365  0002D4  2A52               	incf	calculateTimerDiffsAndMask@i,f,c
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;channels.c: 185: pCIWrite -> numInts--;
  1369  0002D6  C00F  FFD9         	movff	_pCIWrite,fsr2l
  1370  0002DA  C010  FFDA         	movff	_pCIWrite+1,fsr2h
  1371  0002DE  06DF               	decf	indf2,f,c
  1372  0002E0                     l181:
  1373                           
  1374                           ; BSR set to: 0
  1375  0002E0  0E03               	movlw	3
  1376  0002E2  6052               	cpfslt	calculateTimerDiffsAndMask@i,c
  1377  0002E4  D02D               	goto	u660
  1378                           
  1379                           ; BSR set to: 0
  1380  0002E6  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1381  0002E8  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1382  0002EA  6B61               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1383  0002EC  0E01               	movlw	1
  1384  0002EE  2760               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1385  0002F0  0E00               	movlw	0
  1386  0002F2  2361               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1387  0002F4  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1388  0002F6  2560               	addwf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1389  0002F8  6ED9               	movwf	fsr2l,c
  1390  0002FA  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1391  0002FC  2161               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1392  0002FE  6EDA               	movwf	fsr2h,c
  1393  000300  50DF               	movf	indf2,w,c
  1394  000302  6F62               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1395  000304  5162               	movf	(??_calculateTimerDiffsAndMask+2)& (0+255),w,b
  1396  000306  0D01               	mullw	1
  1397  000308  0E05               	movlw	low _channelLevel
  1398  00030A  24F3               	addwf	prodl,w,c
  1399  00030C  6ED9               	movwf	fsr2l,c
  1400  00030E  0E00               	movlw	high _channelLevel
  1401  000310  20F4               	addwfc	prodh,w,c
  1402  000312  6EDA               	movwf	fsr2h,c
  1403  000314  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1404  000316  0D01               	mullw	1
  1405  000318  0E4D               	movlw	low calculateTimerDiffsAndMask@pivot
  1406  00031A  24F3               	addwf	prodl,w,c
  1407  00031C  6EE1               	movwf	fsr1l,c
  1408  00031E  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1409  000320  20F4               	addwfc	prodh,w,c
  1410  000322  6EE2               	movwf	fsr1h,c
  1411  000324  50E7               	movf	indf1,w,c
  1412  000326  6F64               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1413  000328  5164               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1414  00032A  0D01               	mullw	1
  1415  00032C  0E05               	movlw	low _channelLevel
  1416  00032E  24F3               	addwf	prodl,w,c
  1417  000330  6EE1               	movwf	fsr1l,c
  1418  000332  0E00               	movlw	high _channelLevel
  1419  000334  20F4               	addwfc	prodh,w,c
  1420  000336  6EE2               	movwf	fsr1h,c
  1421  000338  50DE               	movf	postinc2,w,c
  1422  00033A  18E6               	xorwf	postinc1,w,c
  1423  00033C  B4D8               	btfsc	status,2,c
  1424  00033E  D7A3               	goto	l182
  1425  000340                     u660:
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;channels.c: 186: };channels.c: 188: i2++;
  1429                           
  1430                           ; BSR set to: 0
  1431                           
  1432                           ; BSR set to: 0
  1433  000340  2A51               	incf	calculateTimerDiffsAndMask@i2,f,c
  1434  000342                     l178:
  1435                           
  1436                           ; BSR set to: 0
  1437  000342  2A52               	incf	calculateTimerDiffsAndMask@i,f,c
  1438  000344  D6E5               	goto	l1390
  1439  000346                     u670:
  1440                           
  1441                           ;channels.c: 189: };channels.c: 195: sumTimers = 0;
  1442                           
  1443                           ; BSR set to: 0
  1444  000346  0E00               	movlw	0
  1445  000348  6E4C               	movwf	calculateTimerDiffsAndMask@sumTimers+1,c
  1446  00034A  0E00               	movlw	0
  1447  00034C  6E4B               	movwf	calculateTimerDiffsAndMask@sumTimers,c
  1448                           
  1449                           ;channels.c: 196: for ( i = 0; i < i2; i++) {
  1450  00034E  0E00               	movlw	0
  1451  000350  6E52               	movwf	calculateTimerDiffsAndMask@i,c
  1452  000352  D011               	goto	l186
  1453  000354                     
  1454                           ;channels.c: 197: sumTimers += pCIWrite -> timer[i];
  1455  000354  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1456  000356  0D02               	mullw	2
  1457  000358  0E01               	movlw	1
  1458  00035A  26F3               	addwf	prodl,f,c
  1459  00035C  0E00               	movlw	0
  1460  00035E  22F4               	addwfc	prodh,f,c
  1461  000360  50F3               	movf	prodl,w,c
  1462  000362  240F               	addwf	_pCIWrite,w,c
  1463  000364  6ED9               	movwf	fsr2l,c
  1464  000366  50F4               	movf	prodh,w,c
  1465  000368  2010               	addwfc	_pCIWrite+1,w,c
  1466  00036A  6EDA               	movwf	fsr2h,c
  1467  00036C  50DE               	movf	postinc2,w,c
  1468  00036E  264B               	addwf	calculateTimerDiffsAndMask@sumTimers,f,c
  1469  000370  50DD               	movf	postdec2,w,c
  1470  000372  224C               	addwfc	calculateTimerDiffsAndMask@sumTimers+1,f,c
  1471  000374  2A52               	incf	calculateTimerDiffsAndMask@i,f,c
  1472  000376                     l186:
  1473  000376  5051               	movf	calculateTimerDiffsAndMask@i2,w,c
  1474  000378  5C52               	subwf	calculateTimerDiffsAndMask@i,w,c
  1475  00037A  A0D8               	btfss	status,0,c
  1476  00037C  D7EB               	goto	l187
  1477                           
  1478                           ;channels.c: 198: };channels.c: 200: pCIWrite -> timer[i2] = (0x00ff * 16) - sumTimers;
  1479  00037E  0EF0               	movlw	240
  1480  000380  0100               	movlb	0	; () banked
  1481  000382  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1482  000384  0E0F               	movlw	15
  1483  000386  6F61               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1484  000388  C04B  F062         	movff	calculateTimerDiffsAndMask@sumTimers,??_calculateTimerDiffsAndMask+2
  1485  00038C  C04C  F063         	movff	calculateTimerDiffsAndMask@sumTimers+1,??_calculateTimerDiffsAndMask+3
  1486  000390  1F62               	comf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1487  000392  1F63               	comf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1488  000394  4B62               	infsnz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1489  000396  2B63               	incf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1490  000398  5160               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1491  00039A  2762               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1492  00039C  5161               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1493  00039E  2363               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1494  0003A0  5051               	movf	calculateTimerDiffsAndMask@i2,w,c
  1495  0003A2  0D02               	mullw	2
  1496  0003A4  0E01               	movlw	1
  1497  0003A6  26F3               	addwf	prodl,f,c
  1498  0003A8  0E00               	movlw	0
  1499  0003AA  22F4               	addwfc	prodh,f,c
  1500  0003AC  50F3               	movf	prodl,w,c
  1501  0003AE  240F               	addwf	_pCIWrite,w,c
  1502  0003B0  6ED9               	movwf	fsr2l,c
  1503  0003B2  50F4               	movf	prodh,w,c
  1504  0003B4  2010               	addwfc	_pCIWrite+1,w,c
  1505  0003B6  6EDA               	movwf	fsr2h,c
  1506  0003B8  C062  FFDE         	movff	??_calculateTimerDiffsAndMask+2,postinc2
  1507  0003BC  C063  FFDD         	movff	??_calculateTimerDiffsAndMask+3,postdec2
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;channels.c: 202: for ( i = 0; i < 4 + 1; i++) {
  1511  0003C0  0E00               	movlw	0
  1512  0003C2  6E52               	movwf	calculateTimerDiffsAndMask@i,c
  1513  0003C4                     l1430:
  1514                           
  1515                           ; BSR set to: 0
  1516  0003C4  0E04               	movlw	4
  1517  0003C6  6452               	cpfsgt	calculateTimerDiffsAndMask@i,c
  1518  0003C8  D001               	goto	l189
  1519  0003CA  D02E               	goto	u700
  1520  0003CC                     l189:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;channels.c: 203: pCIWrite -> timer[i] = 0xFFFF - pCIWrite -> timer[i];
  1524                           
  1525                           ; BSR set to: 0
  1526  0003CC  0EFF               	movlw	255
  1527  0003CE  6F60               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1528  0003D0  0EFF               	movlw	255
  1529  0003D2  6F61               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1530  0003D4  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1531  0003D6  0D02               	mullw	2
  1532  0003D8  0E01               	movlw	1
  1533  0003DA  26F3               	addwf	prodl,f,c
  1534  0003DC  0E00               	movlw	0
  1535  0003DE  22F4               	addwfc	prodh,f,c
  1536  0003E0  50F3               	movf	prodl,w,c
  1537  0003E2  240F               	addwf	_pCIWrite,w,c
  1538  0003E4  6ED9               	movwf	fsr2l,c
  1539  0003E6  50F4               	movf	prodh,w,c
  1540  0003E8  2010               	addwfc	_pCIWrite+1,w,c
  1541  0003EA  6EDA               	movwf	fsr2h,c
  1542  0003EC  CFDE F062          	movff	postinc2,??_calculateTimerDiffsAndMask+2
  1543  0003F0  CFDD F063          	movff	postdec2,??_calculateTimerDiffsAndMask+3
  1544  0003F4  1F62               	comf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1545  0003F6  1F63               	comf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1546  0003F8  4B62               	infsnz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1547  0003FA  2B63               	incf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1548  0003FC  5160               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1549  0003FE  2762               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1550  000400  5161               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1551  000402  2363               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1552  000404  5052               	movf	calculateTimerDiffsAndMask@i,w,c
  1553  000406  0D02               	mullw	2
  1554  000408  0E01               	movlw	1
  1555  00040A  26F3               	addwf	prodl,f,c
  1556  00040C  0E00               	movlw	0
  1557  00040E  22F4               	addwfc	prodh,f,c
  1558  000410  50F3               	movf	prodl,w,c
  1559  000412  240F               	addwf	_pCIWrite,w,c
  1560  000414  6ED9               	movwf	fsr2l,c
  1561  000416  50F4               	movf	prodh,w,c
  1562  000418  2010               	addwfc	_pCIWrite+1,w,c
  1563  00041A  6EDA               	movwf	fsr2h,c
  1564  00041C  C062  FFDE         	movff	??_calculateTimerDiffsAndMask+2,postinc2
  1565  000420  C063  FFDD         	movff	??_calculateTimerDiffsAndMask+3,postdec2
  1566                           
  1567                           ; BSR set to: 0
  1568  000424  2A52               	incf	calculateTimerDiffsAndMask@i,f,c
  1569  000426  D7CE               	goto	l1430
  1570  000428                     u700:
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;channels.c: 204: };channels.c: 206: syncLock = 0;
  1574                           
  1575                           ; BSR set to: 0
  1576  000428  0E00               	movlw	0
  1577  00042A  6E1A               	movwf	_syncLock,c	;volatile
  1578                           
  1579                           ;channels.c: 207: updated = 1;
  1580  00042C  0E01               	movlw	1
  1581  00042E  6E19               	movwf	_updated,c	;volatile
  1582                           
  1583                           ; BSR set to: 0
  1584  000430  0012               	return		;funcret
  1585  000432                     __end_of_calculateTimerDiffsAndMask:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           intcon	equ	0xFF2
  1594                           intcon2	equ	0xFF1
  1595                           postinc0	equ	0xFEE
  1596                           wreg	equ	0xFE8
  1597                           indf1	equ	0xFE7
  1598                           postinc1	equ	0xFE6
  1599                           fsr1h	equ	0xFE2
  1600                           fsr1l	equ	0xFE1
  1601                           indf2	equ	0xFDF
  1602                           postinc2	equ	0xFDE
  1603                           postdec2	equ	0xFDD
  1604                           fsr2h	equ	0xFDA
  1605                           fsr2l	equ	0xFD9
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function _low_isr *****************
  1609 ;; Defined at:
  1610 ;;		line 31 in file "interrupts.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1
  1624 ;;      Params:         0       0       0
  1625 ;;      Locals:         0       0       0
  1626 ;;      Temps:          5       0       0
  1627 ;;      Totals:         5       0       0
  1628 ;;Total ram usage:        5 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    4
  1631 ;; This function calls:
  1632 ;;		_handleDMX
  1633 ;; This function is called by:
  1634 ;;		Interrupt level 1
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	intcodelo
  1639  000018                     __pintcodelo:
  1640                           	opt stack 0
  1641  000018                     _low_isr:
  1642                           	opt stack 25
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;incstack = 0
  1646  000018  8054               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1647  00001A  CFD8 F046          	movff	status,??_low_isr
  1648  00001E  CFE8 F047          	movff	wreg,??_low_isr+1
  1649  000022  CFE0 F048          	movff	bsr,??_low_isr+2
  1650  000026  CFD9 F049          	movff	fsr2l,??_low_isr+3
  1651  00002A  CFDA F04A          	movff	fsr2h,??_low_isr+4
  1652                           
  1653                           ;interrupts.c: 37: if (PIR1bits.RCIF == 1) {
  1654  00002E  AA9E               	btfss	3998,5,c	;volatile
  1655  000030  D003               	goto	i1l19
  1656                           
  1657                           ;interrupts.c: 38: handleDMX();
  1658  000032  EC19  F002         	call	_handleDMX	;wreg free
  1659                           
  1660                           ;interrupts.c: 39: PIR1bits.RCIF = 0;
  1661  000036  9A9E               	bcf	3998,5,c	;volatile
  1662  000038                     i1l19:
  1663  000038  C04A  FFDA         	movff	??_low_isr+4,fsr2h
  1664  00003C  C049  FFD9         	movff	??_low_isr+3,fsr2l
  1665  000040  C048  FFE0         	movff	??_low_isr+2,bsr
  1666  000044  C047  FFE8         	movff	??_low_isr+1,wreg
  1667  000048  C046  FFD8         	movff	??_low_isr,status
  1668  00004C  9054               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1669  00004E  0010               	retfie	
  1670  000050                     __end_of_low_isr:
  1671                           	opt stack 0
  1672                           tblptru	equ	0xFF8
  1673                           tblptrh	equ	0xFF7
  1674                           tblptrl	equ	0xFF6
  1675                           tablat	equ	0xFF5
  1676                           prodh	equ	0xFF4
  1677                           prodl	equ	0xFF3
  1678                           intcon	equ	0xFF2
  1679                           intcon2	equ	0xFF1
  1680                           postinc0	equ	0xFEE
  1681                           wreg	equ	0xFE8
  1682                           indf1	equ	0xFE7
  1683                           postinc1	equ	0xFE6
  1684                           fsr1h	equ	0xFE2
  1685                           fsr1l	equ	0xFE1
  1686                           bsr	equ	0xFE0
  1687                           indf2	equ	0xFDF
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _handleDMX *****************
  1695 ;; Defined at:
  1696 ;;		line 60 in file "dmx.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1
  1710 ;;      Params:         0       0       0
  1711 ;;      Locals:         0       0       0
  1712 ;;      Temps:          0       0       0
  1713 ;;      Totals:         0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    3
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_low_isr
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text8
  1725  000432                     __ptext8:
  1726                           	opt stack 0
  1727  000432                     _handleDMX:
  1728                           	opt stack 25
  1729                           
  1730                           ;dmx.c: 65: errflag = FERR;
  1731                           
  1732                           ;incstack = 0
  1733  000432  0E00               	movlw	0
  1734  000434  B4AB               	btfsc	4011,2,c	;volatile
  1735  000436  0E01               	movlw	1
  1736  000438  6E17               	movwf	_errflag,c
  1737                           
  1738                           ;dmx.c: 70: received = RCREG;
  1739  00043A  CFAE F016          	movff	4014,_received	;volatile
  1740                           
  1741                           ;dmx.c: 72: if ((errflag == 1) && ( dmxState == 0x00) ) {
  1742  00043E  0417               	decf	_errflag,w,c
  1743  000440  A4D8               	btfss	status,2,c
  1744  000442  D00A               	goto	i1l229
  1745  000444  5018               	movf	_dmxState,w,c
  1746  000446  A4D8               	btfss	status,2,c
  1747  000448  D007               	goto	i1l229
  1748                           
  1749                           ;dmx.c: 73: currentAdress = 0;
  1750  00044A  0E00               	movlw	0
  1751  00044C  6E0A               	movwf	_currentAdress+1,c
  1752  00044E  0E00               	movlw	0
  1753  000450  6E09               	movwf	_currentAdress,c
  1754                           
  1755                           ;dmx.c: 74: dmxState = 0x01;
  1756  000452  0E01               	movlw	1
  1757  000454  6E18               	movwf	_dmxState,c
  1758                           
  1759                           ;dmx.c: 75: return;
  1760  000456  0012               	return	
  1761  000458                     i1l229:
  1762                           
  1763                           ;dmx.c: 76: };dmx.c: 78: if ( (dmxState == 0x01) && (received == 0x00)) {
  1764  000458  0418               	decf	_dmxState,w,c
  1765  00045A  A4D8               	btfss	status,2,c
  1766  00045C  D006               	goto	i1l231
  1767  00045E  5016               	movf	_received,w,c
  1768  000460  A4D8               	btfss	status,2,c
  1769  000462  D003               	goto	i1l231
  1770                           
  1771                           ;dmx.c: 80: dmxState = 0x02;
  1772  000464  0E02               	movlw	2
  1773  000466  6E18               	movwf	_dmxState,c
  1774                           
  1775                           ;dmx.c: 81: return;
  1776  000468  0012               	return	
  1777  00046A                     i1l231:
  1778                           
  1779                           ;dmx.c: 82: };dmx.c: 84: if ( dmxState == 0x02) {
  1780  00046A  0E02               	movlw	2
  1781  00046C  1818               	xorwf	_dmxState,w,c
  1782  00046E  A4D8               	btfss	status,2,c
  1783  000470  0012               	return	
  1784                           
  1785                           ;dmx.c: 86: if (currentAdress >= 0 && currentAdress < 0 + 4) {
  1786  000472  500A               	movf	_currentAdress+1,w,c
  1787  000474  E119               	bnz	i1l1050
  1788  000476  0E04               	movlw	4
  1789  000478  5C09               	subwf	_currentAdress,w,c
  1790  00047A  B0D8               	btfsc	status,0,c
  1791  00047C  D015               	goto	i1l233
  1792                           
  1793                           ;dmx.c: 88: if ( channelLevel[currentAdress-0] == 0 && received != 0) {
  1794  00047E  0E05               	movlw	low _channelLevel
  1795  000480  2409               	addwf	_currentAdress,w,c
  1796  000482  6ED9               	movwf	fsr2l,c
  1797  000484  0E00               	movlw	high _channelLevel
  1798  000486  200A               	addwfc	_currentAdress+1,w,c
  1799  000488  6EDA               	movwf	fsr2h,c
  1800  00048A  50DF               	movf	indf2,w,c
  1801  00048C  A4D8               	btfss	status,2,c
  1802  00048E  D004               	goto	i1l234
  1803  000490  5016               	movf	_received,w,c
  1804  000492  A4D8               	btfss	status,2,c
  1805                           
  1806                           ;dmx.c: 90: dummy = LATA;
  1807  000494  CF89 F015          	movff	3977,_dummy	;volatile
  1808  000498                     i1l234:
  1809                           
  1810                           ;dmx.c: 92: };dmx.c: 94: channelLevel[currentAdress-0] = received;
  1811  000498  0E05               	movlw	low _channelLevel
  1812  00049A  2409               	addwf	_currentAdress,w,c
  1813  00049C  6ED9               	movwf	fsr2l,c
  1814  00049E  0E00               	movlw	high _channelLevel
  1815  0004A0  200A               	addwfc	_currentAdress+1,w,c
  1816  0004A2  6EDA               	movwf	fsr2h,c
  1817  0004A4  C016  FFDF         	movff	_received,indf2
  1818  0004A8                     i1l233:
  1819  0004A8                     i1l1050:
  1820                           
  1821                           ;dmx.c: 101: };dmx.c: 104: if (currentAdress == 0 + 4)
  1822  0004A8  0E04               	movlw	4
  1823  0004AA  1809               	xorwf	_currentAdress,w,c
  1824  0004AC  100A               	iorwf	_currentAdress+1,w,c
  1825  0004AE  A4D8               	btfss	status,2,c
  1826  0004B0  D002               	goto	i1l235
  1827                           
  1828                           ;dmx.c: 105: lastInChainReceived = 1;
  1829  0004B2  0E01               	movlw	1
  1830  0004B4  6E20               	movwf	_lastInChainReceived,c	;volatile
  1831  0004B6                     i1l235:
  1832                           
  1833                           ;dmx.c: 107: currentAdress++;
  1834  0004B6  4A09               	infsnz	_currentAdress,f,c
  1835  0004B8  2A0A               	incf	_currentAdress+1,f,c
  1836                           
  1837                           ;dmx.c: 109: if ( currentAdress >= 128)
  1838  0004BA  500A               	movf	_currentAdress+1,w,c
  1839  0004BC  E104               	bnz	i1u14_20
  1840  0004BE  0E80               	movlw	128
  1841  0004C0  5C09               	subwf	_currentAdress,w,c
  1842  0004C2  A0D8               	btfss	status,0,c
  1843  0004C4  0012               	return	
  1844  0004C6                     i1u14_20:
  1845                           
  1846                           ;dmx.c: 110: dmxState = 0x00;
  1847  0004C6  0E00               	movlw	0
  1848  0004C8  6E18               	movwf	_dmxState,c
  1849  0004CA  0012               	return	
  1850  0004CC                     __end_of_handleDMX:
  1851                           	opt stack 0
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           prodh	equ	0xFF4
  1857                           prodl	equ	0xFF3
  1858                           intcon	equ	0xFF2
  1859                           intcon2	equ	0xFF1
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           indf1	equ	0xFE7
  1863                           postinc1	equ	0xFE6
  1864                           fsr1h	equ	0xFE2
  1865                           fsr1l	equ	0xFE1
  1866                           bsr	equ	0xFE0
  1867                           indf2	equ	0xFDF
  1868                           postinc2	equ	0xFDE
  1869                           postdec2	equ	0xFDD
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _high_isr *****************
  1875 ;; Defined at:
  1876 ;;		line 14 in file "interrupts.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1
  1890 ;;      Params:         0       0       0
  1891 ;;      Locals:         0       0       0
  1892 ;;      Temps:          4       0       0
  1893 ;;      Totals:         4       0       0
  1894 ;;Total ram usage:        4 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    2
  1897 ;; This function calls:
  1898 ;;		_pwmStep
  1899 ;; This function is called by:
  1900 ;;		Interrupt level 2
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	intcode
  1905  000008                     __pintcode:
  1906                           	opt stack 0
  1907  000008                     _high_isr:
  1908                           	opt stack 25
  1909                           
  1910                           ;incstack = 0
  1911  000008  8254               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1912  00000A  EF4E  F003         	goto	int_func
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon	equ	0xFF2
  1920                           intcon2	equ	0xFF1
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           indf1	equ	0xFE7
  1924                           postinc1	equ	0xFE6
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           bsr	equ	0xFE0
  1928                           indf2	equ	0xFDF
  1929                           postinc2	equ	0xFDE
  1930                           postdec2	equ	0xFDD
  1931                           fsr2h	equ	0xFDA
  1932                           fsr2l	equ	0xFD9
  1933                           status	equ	0xFD8
  1934                           
  1935                           	psect	intcode_body
  1936  00069C                     __pintcode_body:
  1937                           	opt stack 25
  1938  00069C                     int_func:
  1939                           	opt stack 25
  1940  00069C  CFD9 F042          	movff	fsr2l,??_high_isr
  1941  0006A0  CFDA F043          	movff	fsr2h,??_high_isr+1
  1942  0006A4  CFF3 F044          	movff	prodl,??_high_isr+2
  1943  0006A8  CFF4 F045          	movff	prodh,??_high_isr+3
  1944                           
  1945                           ;interrupts.c: 19: if ( INTCONbits.T0IF == 1) {
  1946  0006AC  A4F2               	btfss	intcon,2,c	;volatile
  1947  0006AE  D003               	goto	i2l13
  1948                           
  1949                           ;interrupts.c: 20: INTCONbits.T0IF = 0;
  1950  0006B0  94F2               	bcf	intcon,2,c	;volatile
  1951                           
  1952                           ;interrupts.c: 21: pwmStep();
  1953  0006B2  EC66  F002         	call	_pwmStep	;wreg free
  1954  0006B6                     i2l13:
  1955  0006B6  C045  FFF4         	movff	??_high_isr+3,prodh
  1956  0006BA  C044  FFF3         	movff	??_high_isr+2,prodl
  1957  0006BE  C043  FFDA         	movff	??_high_isr+1,fsr2h
  1958  0006C2  C042  FFD9         	movff	??_high_isr,fsr2l
  1959  0006C6  9254               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1960  0006C8  0011               	retfie		f
  1961  0006CA                     __end_of_high_isr:
  1962                           	opt stack 0
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           prodh	equ	0xFF4
  1968                           prodl	equ	0xFF3
  1969                           intcon	equ	0xFF2
  1970                           intcon2	equ	0xFF1
  1971                           postinc0	equ	0xFEE
  1972                           wreg	equ	0xFE8
  1973                           indf1	equ	0xFE7
  1974                           postinc1	equ	0xFE6
  1975                           fsr1h	equ	0xFE2
  1976                           fsr1l	equ	0xFE1
  1977                           bsr	equ	0xFE0
  1978                           indf2	equ	0xFDF
  1979                           postinc2	equ	0xFDE
  1980                           postdec2	equ	0xFDD
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _pwmStep *****************
  1986 ;; Defined at:
  1987 ;;		line 76 in file "pwm.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;		None
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1
  2001 ;;      Params:         0       0       0
  2002 ;;      Locals:         0       0       0
  2003 ;;      Temps:          1       0       0
  2004 ;;      Totals:         1       0       0
  2005 ;;Total ram usage:        1 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    1
  2008 ;; This function calls:
  2009 ;;		_swapBuffers
  2010 ;; This function is called by:
  2011 ;;		_high_isr
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text10
  2016  0004CC                     __ptext10:
  2017                           	opt stack 0
  2018  0004CC                     _pwmStep:
  2019                           	opt stack 25
  2020                           
  2021                           ;pwm.c: 78: tTmp = pCIRead -> timer[intCount];
  2022                           
  2023                           ;incstack = 0
  2024  0004CC  501D               	movf	_intCount,w,c
  2025  0004CE  0D02               	mullw	2
  2026  0004D0  0E01               	movlw	1
  2027  0004D2  26F3               	addwf	prodl,f,c
  2028  0004D4  0E00               	movlw	0
  2029  0004D6  22F4               	addwfc	prodh,f,c
  2030  0004D8  50F3               	movf	prodl,w,c
  2031  0004DA  2413               	addwf	_pCIRead,w,c
  2032  0004DC  6ED9               	movwf	fsr2l,c
  2033  0004DE  50F4               	movf	prodh,w,c
  2034  0004E0  2014               	addwfc	_pCIRead+1,w,c
  2035  0004E2  6EDA               	movwf	fsr2h,c
  2036  0004E4  CFDE F011          	movff	postinc2,_tTmp
  2037  0004E8  CFDD F012          	movff	postdec2,_tTmp+1
  2038                           
  2039                           ;pwm.c: 80: TMR0H = ((tTmp >> 8) & 0xFF);
  2040  0004EC  5012               	movf	_tTmp+1,w,c
  2041  0004EE  6ED7               	movwf	4055,c	;volatile
  2042                           
  2043                           ;pwm.c: 81: TMR0L = (tTmp & 0xFF);
  2044  0004F0  C011  FFD6         	movff	_tTmp,4054	;volatile
  2045                           
  2046                           ;pwm.c: 83: if (intCount == 0) {
  2047  0004F4  501D               	movf	_intCount,w,c
  2048  0004F6  A4D8               	btfss	status,2,c
  2049  0004F8  D010               	goto	i2l116
  2050                           
  2051                           ;pwm.c: 85: PORTC = ~pCIRead -> bitmask[intCount];
  2052  0004FA  501D               	movf	_intCount,w,c
  2053  0004FC  0D01               	mullw	1
  2054  0004FE  0E0B               	movlw	11
  2055  000500  26F3               	addwf	prodl,f,c
  2056  000502  0E00               	movlw	0
  2057  000504  22F4               	addwfc	prodh,f,c
  2058  000506  50F3               	movf	prodl,w,c
  2059  000508  2413               	addwf	_pCIRead,w,c
  2060  00050A  6ED9               	movwf	fsr2l,c
  2061  00050C  50F4               	movf	prodh,w,c
  2062  00050E  2014               	addwfc	_pCIRead+1,w,c
  2063  000510  6EDA               	movwf	fsr2h,c
  2064  000512  50DF               	movf	indf2,w,c
  2065  000514  0AFF               	xorlw	255
  2066  000516  6E82               	movwf	3970,c	;volatile
  2067                           
  2068                           ;pwm.c: 86: }
  2069  000518  D00E               	goto	i2l117
  2070  00051A                     i2l116:
  2071                           
  2072                           ;pwm.c: 87: else {;pwm.c: 88: PORTC |= (pCIRead -> bitmask[intCount]);
  2073  00051A  501D               	movf	_intCount,w,c
  2074  00051C  0D01               	mullw	1
  2075  00051E  0E0B               	movlw	11
  2076  000520  26F3               	addwf	prodl,f,c
  2077  000522  0E00               	movlw	0
  2078  000524  22F4               	addwfc	prodh,f,c
  2079  000526  50F3               	movf	prodl,w,c
  2080  000528  2413               	addwf	_pCIRead,w,c
  2081  00052A  6ED9               	movwf	fsr2l,c
  2082  00052C  50F4               	movf	prodh,w,c
  2083  00052E  2014               	addwfc	_pCIRead+1,w,c
  2084  000530  6EDA               	movwf	fsr2h,c
  2085  000532  50DF               	movf	indf2,w,c
  2086  000534  1282               	iorwf	3970,f,c	;volatile
  2087  000536                     i2l117:
  2088                           
  2089                           ;pwm.c: 89: };pwm.c: 91: if (intCount >= pCIRead -> numInts ) {
  2090  000536  C013  FFD9         	movff	_pCIRead,fsr2l
  2091  00053A  C014  FFDA         	movff	_pCIRead+1,fsr2h
  2092  00053E  50DE               	movf	postinc2,w,c
  2093  000540  5C1D               	subwf	_intCount,w,c
  2094  000542  A0D8               	btfss	status,0,c
  2095  000544  D005               	goto	i2l118
  2096                           
  2097                           ;pwm.c: 93: swapBuffers();
  2098  000546  EC65  F003         	call	_swapBuffers	;wreg free
  2099                           
  2100                           ;pwm.c: 94: intCount = 0;
  2101  00054A  0E00               	movlw	0
  2102  00054C  6E1D               	movwf	_intCount,c
  2103                           
  2104                           ;pwm.c: 96: }
  2105  00054E  0012               	return	
  2106  000550                     i2l118:
  2107                           
  2108                           ;pwm.c: 97: else {;pwm.c: 99: intCount++;
  2109  000550  2A1D               	incf	_intCount,f,c
  2110  000552  0012               	return	
  2111  000554                     __end_of_pwmStep:
  2112                           	opt stack 0
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           prodh	equ	0xFF4
  2118                           prodl	equ	0xFF3
  2119                           intcon	equ	0xFF2
  2120                           intcon2	equ	0xFF1
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           indf1	equ	0xFE7
  2124                           postinc1	equ	0xFE6
  2125                           fsr1h	equ	0xFE2
  2126                           fsr1l	equ	0xFE1
  2127                           bsr	equ	0xFE0
  2128                           indf2	equ	0xFDF
  2129                           postinc2	equ	0xFDE
  2130                           postdec2	equ	0xFDD
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _swapBuffers *****************
  2136 ;; Defined at:
  2137 ;;		line 68 in file "channels.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;		None
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;		None
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      void 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1
  2151 ;;      Params:         0       0       0
  2152 ;;      Locals:         0       0       0
  2153 ;;      Temps:          0       0       0
  2154 ;;      Totals:         0       0       0
  2155 ;;Total ram usage:        0 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; This function calls:
  2158 ;;		Nothing
  2159 ;; This function is called by:
  2160 ;;		_pwmStep
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text11
  2165  0006CA                     __ptext11:
  2166                           	opt stack 0
  2167  0006CA                     _swapBuffers:
  2168                           	opt stack 25
  2169                           
  2170                           ;channels.c: 71: if (syncLock == 1 || updated == 0)
  2171                           
  2172                           ;incstack = 0
  2173  0006CA  041A               	decf	_syncLock,w,c	;volatile
  2174  0006CC  B4D8               	btfsc	status,2,c
  2175  0006CE  0012               	return	
  2176  0006D0  5019               	movf	_updated,w,c	;volatile
  2177  0006D2  B4D8               	btfsc	status,2,c
  2178  0006D4  0012               	return	
  2179                           
  2180                           ;channels.c: 74: updated = 0;
  2181                           
  2182                           ;channels.c: 72: return;
  2183  0006D6  0E00               	movlw	0
  2184  0006D8  6E19               	movwf	_updated,c	;volatile
  2185                           
  2186                           ;channels.c: 76: swapCount++;
  2187  0006DA  4A0B               	infsnz	_swapCount,f,c
  2188  0006DC  2A0C               	incf	_swapCount+1,f,c
  2189                           
  2190                           ;channels.c: 78: pCITmp = pCIRead;
  2191  0006DE  C013  F00D         	movff	_pCIRead,_pCITmp
  2192  0006E2  C014  F00E         	movff	_pCIRead+1,_pCITmp+1
  2193                           
  2194                           ;channels.c: 79: pCIRead = pCIWrite;
  2195  0006E6  C00F  F013         	movff	_pCIWrite,_pCIRead
  2196  0006EA  C010  F014         	movff	_pCIWrite+1,_pCIRead+1
  2197                           
  2198                           ;channels.c: 80: pCIWrite = pCITmp;
  2199  0006EE  C00D  F00F         	movff	_pCITmp,_pCIWrite
  2200  0006F2  C00E  F010         	movff	_pCITmp+1,_pCIWrite+1
  2201  0006F6  0012               	return		;funcret
  2202  0006F8                     __end_of_swapBuffers:
  2203                           	opt stack 0
  2204  0000                     tblptru	equ	0xFF8
  2205                           tblptrh	equ	0xFF7
  2206                           tblptrl	equ	0xFF6
  2207                           tablat	equ	0xFF5
  2208                           prodh	equ	0xFF4
  2209                           prodl	equ	0xFF3
  2210                           intcon	equ	0xFF2
  2211                           intcon2	equ	0xFF1
  2212                           postinc0	equ	0xFEE
  2213                           wreg	equ	0xFE8
  2214                           indf1	equ	0xFE7
  2215                           postinc1	equ	0xFE6
  2216                           fsr1h	equ	0xFE2
  2217                           fsr1l	equ	0xFE1
  2218                           bsr	equ	0xFE0
  2219                           indf2	equ	0xFDF
  2220                           postinc2	equ	0xFDE
  2221                           postdec2	equ	0xFDD
  2222                           fsr2h	equ	0xFDA
  2223                           fsr2l	equ	0xFD9
  2224                           status	equ	0xFD8
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           prodh	equ	0xFF4
  2230                           prodl	equ	0xFF3
  2231                           intcon	equ	0xFF2
  2232                           intcon2	equ	0xFF1
  2233                           postinc0	equ	0xFEE
  2234                           wreg	equ	0xFE8
  2235                           indf1	equ	0xFE7
  2236                           postinc1	equ	0xFE6
  2237                           fsr1h	equ	0xFE2
  2238                           fsr1l	equ	0xFE1
  2239                           bsr	equ	0xFE0
  2240                           indf2	equ	0xFDF
  2241                           postinc2	equ	0xFDE
  2242                           postdec2	equ	0xFDD
  2243                           fsr2h	equ	0xFDA
  2244                           fsr2l	equ	0xFD9
  2245                           status	equ	0xFD8
  2246                           
  2247                           	psect	rparam
  2248  0000                     tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           prodh	equ	0xFF4
  2253                           prodl	equ	0xFF3
  2254                           intcon	equ	0xFF2
  2255                           intcon2	equ	0xFF1
  2256                           postinc0	equ	0xFEE
  2257                           wreg	equ	0xFE8
  2258                           indf1	equ	0xFE7
  2259                           postinc1	equ	0xFE6
  2260                           fsr1h	equ	0xFE2
  2261                           fsr1l	equ	0xFE1
  2262                           bsr	equ	0xFE0
  2263                           indf2	equ	0xFDF
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270                           	psect	temp
  2271  000054                     btemp:
  2272                           	opt stack 0
  2273  000054                     	ds	1
  2274  0000                     int$flags	set	btemp
  2275  0000                     wtemp8	set	btemp+1
  2276  0000                     ttemp5	set	btemp+1
  2277  0000                     ttemp6	set	btemp+4
  2278  0000                     ttemp7	set	btemp+8
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           prodh	equ	0xFF4
  2284                           prodl	equ	0xFF3
  2285                           intcon	equ	0xFF2
  2286                           intcon2	equ	0xFF1
  2287                           postinc0	equ	0xFEE
  2288                           wreg	equ	0xFE8
  2289                           indf1	equ	0xFE7
  2290                           postinc1	equ	0xFE6
  2291                           fsr1h	equ	0xFE2
  2292                           fsr1l	equ	0xFE1
  2293                           bsr	equ	0xFE0
  2294                           indf2	equ	0xFDF
  2295                           postinc2	equ	0xFDE
  2296                           postdec2	equ	0xFDD
  2297                           fsr2h	equ	0xFDA
  2298                           fsr2l	equ	0xFD9
  2299                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      83
    BANK0           160     10      10
    BANK1           256      0       0

Pointer List with Targets:

    pCITmp	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(COMRAM[16]), ci1(COMRAM[16]), 

    pCIWrite	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(COMRAM[16]), ci1(COMRAM[16]), 

    pCIRead	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(COMRAM[16]), ci1(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_calculateTimerDiffsAndMask

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_pwmStep

Critical Paths under _main in BANK0

    _main->_calculateTimerDiffsAndMask

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1197
         _calculateTimerDiffsAndMask
                             _doRank
                       _initChannels
                            _initDMX
                       _initHardware
                            _initPwm
 ---------------------------------------------------------------------------------
 (1) _initPwm                                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _initHardware                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDMX                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initChannels                                         1     1      0      68
                                             10 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _doRank                                               4     4      0     180
                                             10 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _calculateTimerDiffsAndMask                          18    18      0     949
                                             10 COMRAM     8     8      0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _low_isr                                              5     5      0       0
                                              5 COMRAM     5     5      0
                          _handleDMX
 ---------------------------------------------------------------------------------
 (3) _handleDMX                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                             4     4      0       0
                                              1 COMRAM     4     4      0
                            _pwmStep
 ---------------------------------------------------------------------------------
 (5) _pwmStep                                              1     1      0       0
                                              0 COMRAM     1     1      0
                        _swapBuffers
 ---------------------------------------------------------------------------------
 (6) _swapBuffers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateTimerDiffsAndMask
   _doRank
   _initChannels
   _initDMX
   _initHardware
   _initPwm

 _low_isr (ROOT)
   _handleDMX

 _high_isr (ROOT)
   _pwmStep
     _swapBuffers

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      A       A       4        6.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      53       1       88.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D       7        0.0%
DATA                 0      0      5D       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Apr 08 21:34:51 2019

                        _swapBuffers 06CA                                   l53 067A  
                                 l54 0688                                   bsr 000FE0  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                                l141 05E2                                  l160 0584  
                                l162 0590                                  l171 00BA  
                                l180 0240                                  l164 05BC  
                                l181 02E0                                  l173 00FA  
                                l182 0286                                  l174 0104  
                                l158 0560                                  l175 0118  
                                l169 0060                                  l186 0376  
                                l178 0342                                  l187 0354  
                                l179 0198                                  l189 03CC  
                       __CFG_CPB$OFF 000000                                  u220 05D2  
                                u180 0578                                  u500 05FA  
                       __CFG_CPD$OFF 000000                                  u700 0428  
                                u550 008E                                  u634 027A  
                                u635 0276                                  u660 0340  
                                u644 02B0                                  u645 02AC  
                                u670 0346                                  u590 0108  
                                u584 00E2                                  u585 00DE  
                                _ci1 0031                                  _ci2 0021  
                       __CFG_BORV$19 000000                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                               l1110 0558                                 l1122 057C  
                               l1306 05DA                                 l1430 03C4  
                               l1356 0058                                 l1390 0110  
                               l1374 00B2                                 _FERR 007D5A  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 i1l19 0038  
                               _RCIE 007CED                                 i2l13 06B6  
                               _OERR 007D59                                 _SPEN 007D5F  
                _counterForSimulator 001F                                 _main 0666  
                               _tTmp 0011                                 fsr2h 000FDA  
                               indf1 000FE7                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0054                                 prodh 000FF4  
                               prodl 000FF3                                 start 0050  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC$IRC 000000  
                      __CFG_MCLRE$ON 000000                         ___param_bank 000000  
                _lastInChainReceived 0020         ??_calculateTimerDiffsAndMask 0060  
                              ?_main 0041                                _ANSEL 000F7E  
                              _T0CON 000FD5                                i1l231 046A  
                              i1l233 04A8                                i1l234 0498  
                              i1l235 04B6                                i1l229 0458  
                              i2l116 051A                                i2l117 0536  
                              i2l118 0550                                _RCREG 000FAE  
                     __CFG_BBSIZ$OFF 000000                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initDMX 0742  
                     __CFG_EBTRB$OFF 000000                      __end_of_initPwm 0754  
                              _dummy 0015                      __end_of_low_isr 0050  
                              tablat 000FF5                      __end_of_pwmStep 0554  
                              ttemp5 0055                                ttemp6 0058  
                              ttemp7 005C                                status 000FD8  
                              wtemp8 0055                        ?_initChannels 0041  
                     __CFG_HFOFST$ON 000000          ?_calculateTimerDiffsAndMask 0041  
                      ?_initHardware 0041                      __initialization 06F8  
                       __end_of_main 069C                       __CFG_PCLKEN$ON 000000  
                             ??_main 0053                        __activetblptr 000000  
                     __CFG_PLLEN$OFF 000000                               _ANSELH 000F7F  
                             i1l1050 04A8                       __CFG_WDTEN$OFF 000000  
                     ??_initChannels 004B                               _SPBRG1 000FAF  
                             _SPBRGH 000FB0                       ??_initHardware 004B  
                     __CFG_PWRTEN$ON 000000                       __CFG_XINST$OFF 000000  
                             _pCITmp 000D                     __end_of_high_isr 06CA  
                             _doRank 0554                       __CFG_STVREN$ON 000000  
                             _dummy1 001C                               clear_0 0710  
                          ??_initDMX 004B                            ??_initPwm 004B  
                       __pdataCOMRAM 0053                            ??_low_isr 0046  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                            ??_pwmStep 0041  
                         __accesstop 0060              __end_of__initialization 0716  
                      ___rparam_used 000001                       __pcstackCOMRAM 0041  
                       ?_swapBuffers 0041                         _channelLevel 0005  
                 __size_of_handleDMX 009A                        _currentAdress 0009  
                            ?_doRank 0041                              _CM1CON0 000F6D  
                            _CM2CON0 000F6B                 __end_of_initChannels 0624  
               __end_of_initHardware 0666                              i1u14_20 04C6  
                          ?_high_isr 0041                    __end_of_handleDMX 04CC  
                            __Hparam 0000                              _pCIRead 0013  
                            __Lparam 0000                      __size_of_doRank 0082  
                            __pcinit 06F8                              __ramtop 0200  
                            __ptext0 0666                              __ptext1 0742  
                            __ptext2 0624                              __ptext3 0720  
                            __ptext4 05D6                              __ptext5 0554  
                            __ptext6 0054                              __ptext8 0432  
                            _initDMX 0720                              doRank@i 004E  
                            doRank@j 004D                              _errflag 0017  
                            _initPwm 0742                              _low_isr 0018  
                            _pwmStep 04CC                              _updated 0019  
                         ??_high_isr 0042                       __pintcode_body 069C  
               end_of_initialization 0716                              int_func 069C  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
               __size_of_swapBuffers 002E  calculateTimerDiffsAndMask@sumTimers 004B  
              __size_of_initChannels 004E                           _writeIndex 0053  
                     __end_of_doRank 05D6                          _BAUDCONbits 000FB8  
                      __pidataCOMRAM 0754                __size_of_initHardware 0042  
                start_initialization 06F8                         _initChannels 05D6  
                       _initHardware 0624                             ??_doRank 004B  
                      initChannels@i 004B                          __pbssCOMRAM 0001  
                      __pcstackBANK0 0060                          _channelRank 0001  
                       _errorCounter 001E                    __size_of_high_isr 06C2  
                          __pintcode 0008                            _handleDMX 0432  
                        __pintcodelo 0018                             ?_initDMX 0041  
                           ?_initPwm 0041                             ?_low_isr 0041  
                          _readIndex 001B                             ?_pwmStep 0041  
__size_of_calculateTimerDiffsAndMask 03DE                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                         ?_handleDMX 0041                            _swapCount 000B  
                        _INTCON2bits 000FF1                             __Hrparam 0000  
                           __Lrparam 0000                             _pCIWrite 000F  
                      ??_swapBuffers 0041                   __CFG_BOREN$SBORDIS 000000  
       calculateTimerDiffsAndMask@i2 0051                     __size_of_initDMX 0022  
                   __size_of_initPwm 0012                     __size_of_low_isr 0038  
                           __ptext10 04CC                             __ptext11 06CA  
                   __size_of_pwmStep 0088                             _high_isr 0008  
                           _dmxState 0018                             _intCount 001D  
                      __size_of_main 0036                             _received 0016  
 __end_of_calculateTimerDiffsAndMask 0432           _calculateTimerDiffsAndMask 0054  
                        ??_handleDMX 0046                             int$flags 0054  
                           _syncLock 001A                  __end_of_swapBuffers 06F8  
                         _INTCONbits 000FF2                             intlevel1 0000  
                           intlevel2 0000          calculateTimerDiffsAndMask@i 0052  
                         _RCSTA1bits 000FAB                           _OSCCONbits 000FD3  
    calculateTimerDiffsAndMask@pivot 004D  
