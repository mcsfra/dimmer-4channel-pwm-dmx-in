

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Dec 22 14:57:52 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F14K22 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  0008AC                     __pidataCOMRAM:
    66                           	opt stack 0
    67                           
    68                           ;initializer for _writeIndex
    69  0008AC  01                 	db	1
    70  0000                     _RCREG	set	4014
    71  0000                     _IPR1bits	set	3999
    72  0000                     _PIE1bits	set	3997
    73  0000                     _RCSTA1bits	set	4011
    74  0000                     _SPBRGH	set	4016
    75  0000                     _SPBRG1	set	4015
    76  0000                     _BAUDCONbits	set	4024
    77  0000                     _TMR0L	set	4054
    78  0000                     _TMR0H	set	4055
    79  0000                     _INTCON2bits	set	4081
    80  0000                     _T0CON	set	4053
    81  0000                     _TRISC	set	3988
    82  0000                     _PORTC	set	3970
    83  0000                     _LATC	set	3979
    84  0000                     _TRISB	set	3987
    85  0000                     _LATB	set	3978
    86  0000                     _PORTB	set	3969
    87  0000                     _TRISA	set	3986
    88  0000                     _PORTA	set	3968
    89  0000                     _LATA	set	3977
    90  0000                     _ANSELH	set	3967
    91  0000                     _ANSEL	set	3966
    92  0000                     _CM2CON0	set	3947
    93  0000                     _CM1CON0	set	3949
    94  0000                     _OSCCONbits	set	4051
    95  0000                     _RCONbits	set	4048
    96  0000                     _PIR1bits	set	3998
    97  0000                     _INTCONbits	set	4082
    98  0000                     _FERR	set	32090
    99  0000                     _RCIE	set	31981
   100  0000                     _SPEN	set	32095
   101  0000                     _OERR	set	32089
   102                           
   103                           ; #config settings
   104  0000                     
   105                           	psect	cinit
   106  000814                     __pcinit:
   107                           	opt stack 0
   108  000814                     start_initialization:
   109                           	opt stack 0
   110  000814                     __initialization:
   111                           	opt stack 0
   112                           
   113                           ; Initialize objects allocated to COMRAM (1 bytes)
   114                           ; load TBLPTR registers with __pidataCOMRAM
   115  000814  0EAC               	movlw	low __pidataCOMRAM
   116  000816  6EF6               	movwf	tblptrl,c
   117  000818  0E08               	movlw	high __pidataCOMRAM
   118  00081A  6EF7               	movwf	tblptrh,c
   119  00081C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   120  00081E  6EF8               	movwf	tblptru,c
   121  000820  0009               	tblrd		*+	;fetch initializer
   122  000822  CFF5 F03F          	movff	tablat,__pdataCOMRAM
   123                           
   124                           ; Clear objects allocated to BANK0 (48 bytes)
   125  000826  EE00  F060         	lfsr	0,__pbssBANK0
   126  00082A  0E30               	movlw	48
   127  00082C                     clear_0:
   128  00082C  6AEE               	clrf	postinc0,c
   129  00082E  06E8               	decf	wreg,f,c
   130  000830  E1FD               	bnz	clear_0
   131                           
   132                           ; Clear objects allocated to COMRAM (16 bytes)
   133  000832  EE00  F02F         	lfsr	0,__pbssCOMRAM
   134  000836  0E10               	movlw	16
   135  000838                     clear_1:
   136  000838  6AEE               	clrf	postinc0,c
   137  00083A  06E8               	decf	wreg,f,c
   138  00083C  E1FD               	bnz	clear_1
   139  00083E                     end_of_initialization:
   140                           	opt stack 0
   141  00083E                     __end_of__initialization:
   142                           	opt stack 0
   143  00083E  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   144  000840  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   145  000842  0100               	movlb	0
   146  000844  EFEC  F003         	goto	_main	;jump to C main() function
   147                           tblptru	equ	0xFF8
   148                           tblptrh	equ	0xFF7
   149                           tblptrl	equ	0xFF6
   150                           tablat	equ	0xFF5
   151                           postinc0	equ	0xFEE
   152                           wreg	equ	0xFE8
   153                           
   154                           	psect	bssCOMRAM
   155  00002F                     __pbssCOMRAM:
   156                           	opt stack 0
   157  00002F                     _currentAdress:
   158                           	opt stack 0
   159  00002F                     	ds	2
   160  000031                     _swapCount:
   161                           	opt stack 0
   162  000031                     	ds	2
   163  000033                     _pCITmp:
   164                           	opt stack 0
   165  000033                     	ds	2
   166  000035                     _tTmp:
   167                           	opt stack 0
   168  000035                     	ds	2
   169  000037                     _dummy:
   170                           	opt stack 0
   171  000037                     	ds	1
   172  000038                     _received:
   173                           	opt stack 0
   174  000038                     	ds	1
   175  000039                     _errflag:
   176                           	opt stack 0
   177  000039                     	ds	1
   178  00003A                     _dmxState:
   179                           	opt stack 0
   180  00003A                     	ds	1
   181  00003B                     _readIndex:
   182                           	opt stack 0
   183  00003B                     	ds	1
   184  00003C                     _dummy1:
   185                           	opt stack 0
   186  00003C                     	ds	1
   187  00003D                     _intCount:
   188                           	opt stack 0
   189  00003D                     	ds	1
   190  00003E                     _counterForSimulator:
   191                           	opt stack 0
   192  00003E                     	ds	1
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           
   200                           	psect	dataCOMRAM
   201  00003F                     __pdataCOMRAM:
   202                           	opt stack 0
   203  00003F                     _writeIndex:
   204                           	opt stack 0
   205  00003F                     	ds	1
   206                           tblptru	equ	0xFF8
   207                           tblptrh	equ	0xFF7
   208                           tblptrl	equ	0xFF6
   209                           tablat	equ	0xFF5
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	bssBANK0
   214  000060                     __pbssBANK0:
   215                           	opt stack 0
   216  000060                     _channelRank:
   217                           	opt stack 0
   218  000060                     	ds	4
   219  000064                     _channelLevel:
   220                           	opt stack 0
   221  000064                     	ds	4
   222  000068                     _pCIWrite:
   223                           	opt stack 0
   224  000068                     	ds	2
   225  00006A                     _pCIRead:
   226                           	opt stack 0
   227  00006A                     	ds	2
   228  00006C                     _updated:
   229                           	opt stack 0
   230  00006C                     	ds	1
   231  00006D                     _syncLock:
   232                           	opt stack 0
   233  00006D                     	ds	1
   234  00006E                     _errorCounter:
   235                           	opt stack 0
   236  00006E                     	ds	1
   237  00006F                     _lastInChainReceived:
   238                           	opt stack 0
   239  00006F                     	ds	1
   240  000070                     _ci2:
   241                           	opt stack 0
   242  000070                     	ds	16
   243  000080                     _ci1:
   244                           	opt stack 0
   245  000080                     	ds	16
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           
   253                           	psect	cstackBANK0
   254  000090                     __pcstackBANK0:
   255                           	opt stack 0
   256  000090                     ??_calculateTimerDiffsAndMask:
   257  000090                     initChannels@i:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x0
   261  000090                     	ds	2
   262  000092                     doRank@j:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0x2
   266  000092                     	ds	1
   267  000093                     doRank@i:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x3
   271  000093                     	ds	7
   272  00009A                     calculateTimerDiffsAndMask@sumTimers:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0xA
   276  00009A                     	ds	2
   277  00009C                     calculateTimerDiffsAndMask@pivot:
   278                           	opt stack 0
   279                           
   280                           ; 4 bytes @ 0xC
   281  00009C                     	ds	4
   282  0000A0                     calculateTimerDiffsAndMask@i2:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0x10
   286  0000A0                     	ds	1
   287  0000A1                     calculateTimerDiffsAndMask@i:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x11
   291  0000A1                     	ds	1
   292  0000A2                     tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           
   299                           ; 1 bytes @ 0x12
   300                           
   301                           	psect	cstackCOMRAM
   302  000001                     __pcstackCOMRAM:
   303                           	opt stack 0
   304  000001                     
   305                           ; 1 bytes @ 0x0
   306  000001                     	ds	1
   307  000002                     ??_high_isr:
   308                           
   309                           ; 1 bytes @ 0x1
   310  000002                     	ds	18
   311  000014                     ??_handleDMX:
   312                           
   313                           ; 1 bytes @ 0x13
   314  000014                     	ds	4
   315  000018                     _handleDMX$699:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x17
   319  000018                     	ds	2
   320  00001A                     ??_low_isr:
   321                           
   322                           ; 1 bytes @ 0x19
   323  00001A                     	ds	21
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331 ;;
   332 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   333 ;;
   334 ;; *************** function _main *****************
   335 ;; Defined at:
   336 ;;		line 22 in file "main.c"
   337 ;; Parameters:    Size  Location     Type
   338 ;;		None
   339 ;; Auto vars:     Size  Location     Type
   340 ;;		None
   341 ;; Return value:  Size  Location     Type
   342 ;;                  1    wreg      void 
   343 ;; Registers used:
   344 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMRAM   BANK0   BANK1
   350 ;;      Params:         0       0       0
   351 ;;      Locals:         0       0       0
   352 ;;      Temps:          0       0       0
   353 ;;      Totals:         0       0       0
   354 ;;Total ram usage:        0 bytes
   355 ;; Hardware stack levels required when called:    6
   356 ;; This function calls:
   357 ;;		_calculateTimerDiffsAndMask
   358 ;;		_doRank
   359 ;;		_initChannels
   360 ;;		_initDMX
   361 ;;		_initHardware
   362 ;;		_initPwm
   363 ;; This function is called by:
   364 ;;		Startup code after reset
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368                           	psect	text0
   369  0007D8                     __ptext0:
   370                           	opt stack 0
   371  0007D8                     _main:
   372                           	opt stack 25
   373                           
   374                           ;main.c: 24: initHardware();
   375                           
   376                           ;incstack = 0
   377  0007D8  ECCB  F003         	call	_initHardware	;wreg free
   378                           
   379                           ;main.c: 25: initPwm();
   380  0007DC  EC4D  F004         	call	_initPwm	;wreg free
   381                           
   382                           ;main.c: 26: initChannels();
   383  0007E0  ECA3  F003         	call	_initChannels	;wreg free
   384                           
   385                           ;main.c: 27: initDMX();
   386  0007E4  EC3C  F004         	call	_initDMX	;wreg free
   387                           
   388                           ;main.c: 30: RCONbits.IPEN = 1;
   389  0007E8  8ED0               	bsf	4048,7,c	;volatile
   390                           
   391                           ;main.c: 33: INTCONbits.GIEH = 1;
   392  0007EA  8EF2               	bsf	intcon,7,c	;volatile
   393  0007EC                     
   394                           ;main.c: 68: if (OERR == 1) {
   395  0007EC  A2AB               	btfss	4011,1,c	;volatile
   396  0007EE  D006               	goto	l54
   397                           
   398                           ;main.c: 71: errorCounter++;
   399  0007F0  0100               	movlb	0	; () banked
   400  0007F2  2B6E               	incf	_errorCounter& (0+255),f,b
   401                           
   402                           ; BSR set to: 0
   403                           ;main.c: 72: SPEN = 0;
   404  0007F4  9EAB               	bcf	4011,7,c	;volatile
   405                           
   406                           ; BSR set to: 0
   407                           ;main.c: 73: RCIE = 0;
   408  0007F6  9A9D               	bcf	3997,5,c	;volatile
   409                           
   410                           ; BSR set to: 0
   411                           ;main.c: 74: initDMX();
   412  0007F8  EC3C  F004         	call	_initDMX	;wreg free
   413  0007FC                     l54:
   414                           
   415                           ;main.c: 75: }
   416                           ;main.c: 79: if (lastInChainReceived ) {
   417  0007FC  0100               	movlb	0	; () banked
   418  0007FE  516F               	movf	_lastInChainReceived& (0+255),w,b	;volatile
   419  000800  B4D8               	btfsc	status,2,c
   420  000802  D7F4               	goto	l53
   421                           
   422                           ; BSR set to: 0
   423                           ;main.c: 80: doRank();
   424  000804  EC61  F003         	call	_doRank	;wreg free
   425                           
   426                           ;main.c: 81: calculateTimerDiffsAndMask();
   427  000808  EC6A  F000         	call	_calculateTimerDiffsAndMask	;wreg free
   428                           
   429                           ;main.c: 82: lastInChainReceived = 0;
   430  00080C  0E00               	movlw	0
   431  00080E  0100               	movlb	0	; () banked
   432  000810  6F6F               	movwf	_lastInChainReceived& (0+255),b	;volatile
   433                           
   434                           ; BSR set to: 0
   435                           ;main.c: 83: }
   436                           ;main.c: 84: }
   437  000812  D7EC               	goto	l53
   438  000814                     __end_of_main:
   439                           	opt stack 0
   440                           tblptru	equ	0xFF8
   441                           tblptrh	equ	0xFF7
   442                           tblptrl	equ	0xFF6
   443                           tablat	equ	0xFF5
   444                           intcon	equ	0xFF2
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           status	equ	0xFD8
   448                           
   449 ;; *************** function _initPwm *****************
   450 ;; Defined at:
   451 ;;		line 19 in file "pwm.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;		None
   454 ;; Auto vars:     Size  Location     Type
   455 ;;  i               1    0        unsigned char 
   456 ;; Return value:  Size  Location     Type
   457 ;;                  1    wreg      void 
   458 ;; Registers used:
   459 ;;		wreg, status,2
   460 ;; Tracked objects:
   461 ;;		On entry : 0/0
   462 ;;		On exit  : 0/0
   463 ;;		Unchanged: 0/0
   464 ;; Data sizes:     COMRAM   BANK0   BANK1
   465 ;;      Params:         0       0       0
   466 ;;      Locals:         0       0       0
   467 ;;      Temps:          0       0       0
   468 ;;      Totals:         0       0       0
   469 ;;Total ram usage:        0 bytes
   470 ;; Hardware stack levels used:    1
   471 ;; Hardware stack levels required when called:    5
   472 ;; This function calls:
   473 ;;		Nothing
   474 ;; This function is called by:
   475 ;;		_main
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           	psect	text1
   480  00089A                     __ptext1:
   481                           	opt stack 0
   482  00089A                     _initPwm:
   483                           	opt stack 25
   484                           
   485                           ;pwm.c: 21: unsigned char i;
   486                           ;pwm.c: 23: INTCONbits.TMR0IF = 0;
   487                           
   488                           ; BSR set to: 0
   489                           ;incstack = 0
   490  00089A  94F2               	bcf	intcon,2,c	;volatile
   491                           
   492                           ;pwm.c: 25: T0CON = 0b10000001;
   493  00089C  0E81               	movlw	129
   494  00089E  6ED5               	movwf	4053,c	;volatile
   495                           
   496                           ;pwm.c: 27: INTCON2bits.TMR0IP = 1;
   497  0008A0  84F1               	bsf	intcon2,2,c	;volatile
   498                           
   499                           ;pwm.c: 28: INTCONbits.TMR0IE = 1;
   500  0008A2  8AF2               	bsf	intcon,5,c	;volatile
   501                           
   502                           ;pwm.c: 30: INTCONbits.GIEH = 1;
   503  0008A4  8EF2               	bsf	intcon,7,c	;volatile
   504                           
   505                           ;pwm.c: 31: INTCONbits.GIEL = 1;
   506  0008A6  8CF2               	bsf	intcon,6,c	;volatile
   507                           
   508                           ;pwm.c: 33: INTCONbits.PEIE = 1;
   509  0008A8  8CF2               	bsf	intcon,6,c	;volatile
   510  0008AA  0012               	return		;funcret
   511  0008AC                     __end_of_initPwm:
   512                           	opt stack 0
   513                           tblptru	equ	0xFF8
   514                           tblptrh	equ	0xFF7
   515                           tblptrl	equ	0xFF6
   516                           tablat	equ	0xFF5
   517                           intcon	equ	0xFF2
   518                           intcon2	equ	0xFF1
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           status	equ	0xFD8
   522                           
   523 ;; *************** function _initHardware *****************
   524 ;; Defined at:
   525 ;;		line 6 in file "hardware.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, status,2
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1
   539 ;;      Params:         0       0       0
   540 ;;      Locals:         0       0       0
   541 ;;      Temps:          0       0       0
   542 ;;      Totals:         0       0       0
   543 ;;Total ram usage:        0 bytes
   544 ;; Hardware stack levels used:    1
   545 ;; Hardware stack levels required when called:    5
   546 ;; This function calls:
   547 ;;		Nothing
   548 ;; This function is called by:
   549 ;;		_main
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text2
   554  000796                     __ptext2:
   555                           	opt stack 0
   556  000796                     _initHardware:
   557                           	opt stack 25
   558                           
   559                           ;hardware.c: 10: OSCCONbits.IDLEN = 0;
   560                           
   561                           ;incstack = 0
   562  000796  9ED3               	bcf	4051,7,c	;volatile
   563                           
   564                           ;hardware.c: 12: OSCCONbits.IRCF2 = 1;
   565  000798  8CD3               	bsf	4051,6,c	;volatile
   566                           
   567                           ;hardware.c: 13: OSCCONbits.IRCF1 = 1;
   568  00079A  8AD3               	bsf	4051,5,c	;volatile
   569                           
   570                           ;hardware.c: 14: OSCCONbits.IRCF0 = 0;
   571  00079C  98D3               	bcf	4051,4,c	;volatile
   572                           
   573                           ;hardware.c: 16: OSCCONbits.SCS1 = 1;
   574  00079E  82D3               	bsf	4051,1,c	;volatile
   575                           
   576                           ;hardware.c: 17: OSCCONbits.SCS0 = 0;
   577  0007A0  90D3               	bcf	4051,0,c	;volatile
   578                           
   579                           ;hardware.c: 23: CM1CON0 = 0;
   580  0007A2  0E00               	movlw	0
   581  0007A4  6E6D               	movwf	3949,c	;volatile
   582                           
   583                           ;hardware.c: 24: CM2CON0 = 0;
   584  0007A6  0E00               	movlw	0
   585  0007A8  6E6B               	movwf	3947,c	;volatile
   586                           
   587                           ;hardware.c: 27: ANSEL = 0x00;
   588  0007AA  0E00               	movlw	0
   589  0007AC  6E7E               	movwf	3966,c	;volatile
   590                           
   591                           ;hardware.c: 28: ANSELH = 0x00;
   592  0007AE  0E00               	movlw	0
   593  0007B0  6E7F               	movwf	3967,c	;volatile
   594                           
   595                           ;hardware.c: 30: LATA = 0x00;
   596  0007B2  0E00               	movlw	0
   597  0007B4  6E89               	movwf	3977,c	;volatile
   598                           
   599                           ;hardware.c: 31: PORTA = 0x00;
   600  0007B6  0E00               	movlw	0
   601  0007B8  6E80               	movwf	3968,c	;volatile
   602                           
   603                           ;hardware.c: 32: TRISA = 0b00000111;
   604  0007BA  0E07               	movlw	7
   605  0007BC  6E92               	movwf	3986,c	;volatile
   606                           
   607                           ;hardware.c: 41: PORTB = 0x00;
   608  0007BE  0E00               	movlw	0
   609  0007C0  6E81               	movwf	3969,c	;volatile
   610                           
   611                           ;hardware.c: 42: LATB = 0x00;
   612  0007C2  0E00               	movlw	0
   613  0007C4  6E8A               	movwf	3978,c	;volatile
   614                           
   615                           ;hardware.c: 44: TRISB = 0b00100111;
   616  0007C6  0E27               	movlw	39
   617  0007C8  6E93               	movwf	3987,c	;volatile
   618                           
   619                           ;hardware.c: 46: LATC = 0x00;
   620  0007CA  0E00               	movlw	0
   621  0007CC  6E8B               	movwf	3979,c	;volatile
   622                           
   623                           ;hardware.c: 47: PORTC = 0x00;
   624  0007CE  0E00               	movlw	0
   625  0007D0  6E82               	movwf	3970,c	;volatile
   626                           
   627                           ;hardware.c: 49: TRISC = 0b00000000;
   628  0007D2  0E00               	movlw	0
   629  0007D4  6E94               	movwf	3988,c	;volatile
   630  0007D6  0012               	return		;funcret
   631  0007D8                     __end_of_initHardware:
   632                           	opt stack 0
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           intcon	equ	0xFF2
   638                           intcon2	equ	0xFF1
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           status	equ	0xFD8
   642                           
   643 ;; *************** function _initDMX *****************
   644 ;; Defined at:
   645 ;;		line 31 in file "dmx.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, status,2
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1
   659 ;;      Params:         0       0       0
   660 ;;      Locals:         0       0       0
   661 ;;      Temps:          0       0       0
   662 ;;      Totals:         0       0       0
   663 ;;Total ram usage:        0 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; Hardware stack levels required when called:    5
   666 ;; This function calls:
   667 ;;		Nothing
   668 ;; This function is called by:
   669 ;;		_main
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           	psect	text3
   674  000878                     __ptext3:
   675                           	opt stack 0
   676  000878                     _initDMX:
   677                           	opt stack 25
   678                           
   679                           ;dmx.c: 35: BAUDCONbits.BRG16 = 1;
   680                           
   681                           ;incstack = 0
   682  000878  86B8               	bsf	4024,3,c	;volatile
   683                           
   684                           ;dmx.c: 36: BAUDCONbits.CKTXP = 1;
   685  00087A  88B8               	bsf	4024,4,c	;volatile
   686                           
   687                           ;dmx.c: 38: SPBRG1 = 1;
   688  00087C  0E01               	movlw	1
   689  00087E  6EAF               	movwf	4015,c	;volatile
   690                           
   691                           ;dmx.c: 39: SPBRGH = 0;
   692  000880  0E00               	movlw	0
   693  000882  6EB0               	movwf	4016,c	;volatile
   694                           
   695                           ;dmx.c: 41: RCSTA1bits.CREN = 1;
   696  000884  88AB               	bsf	4011,4,c	;volatile
   697                           
   698                           ;dmx.c: 43: RCSTA1bits.SPEN = 1;
   699  000886  8EAB               	bsf	4011,7,c	;volatile
   700                           
   701                           ;dmx.c: 45: PIE1bits.RCIE = 1;
   702  000888  8A9D               	bsf	3997,5,c	;volatile
   703                           
   704                           ;dmx.c: 46: IPR1bits.RCIP = 0;
   705  00088A  9A9F               	bcf	3999,5,c	;volatile
   706                           
   707                           ;dmx.c: 49: currentAdress = 0;
   708  00088C  0E00               	movlw	0
   709  00088E  6E30               	movwf	_currentAdress+1,c
   710  000890  0E00               	movlw	0
   711  000892  6E2F               	movwf	_currentAdress,c
   712                           
   713                           ;dmx.c: 51: dmxState = 0x00;
   714  000894  0E00               	movlw	0
   715  000896  6E3A               	movwf	_dmxState,c
   716  000898  0012               	return		;funcret
   717  00089A                     __end_of_initDMX:
   718                           	opt stack 0
   719                           tblptru	equ	0xFF8
   720                           tblptrh	equ	0xFF7
   721                           tblptrl	equ	0xFF6
   722                           tablat	equ	0xFF5
   723                           intcon	equ	0xFF2
   724                           intcon2	equ	0xFF1
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           status	equ	0xFD8
   728                           
   729 ;; *************** function _initChannels *****************
   730 ;; Defined at:
   731 ;;		line 38 in file "channels.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;		None
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  i               1    0[BANK0 ] unsigned char 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1
   745 ;;      Params:         0       0       0
   746 ;;      Locals:         0       1       0
   747 ;;      Temps:          0       0       0
   748 ;;      Totals:         0       1       0
   749 ;;Total ram usage:        1 bytes
   750 ;; Hardware stack levels used:    1
   751 ;; Hardware stack levels required when called:    5
   752 ;; This function calls:
   753 ;;		Nothing
   754 ;; This function is called by:
   755 ;;		_main
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text4
   760  000746                     __ptext4:
   761                           	opt stack 0
   762  000746                     _initChannels:
   763                           	opt stack 25
   764                           
   765                           ;channels.c: 40: unsigned char i;
   766                           ;channels.c: 42: for (i = 0; i < 4; i++) {
   767                           
   768                           ;incstack = 0
   769  000746  0E00               	movlw	0
   770  000748  0100               	movlb	0	; () banked
   771  00074A  6F90               	movwf	initChannels@i& (0+255),b
   772  00074C                     l1470:
   773                           
   774                           ; BSR set to: 0
   775  00074C  0E03               	movlw	3
   776  00074E  6590               	cpfsgt	initChannels@i& (0+255),b
   777  000750  D001               	goto	l141
   778  000752  D00C               	goto	u940
   779  000754                     l141:
   780                           
   781                           ; BSR set to: 0
   782                           ;channels.c: 43: channelLevel[i] = 10;
   783                           
   784                           ; BSR set to: 0
   785  000754  5190               	movf	initChannels@i& (0+255),w,b
   786  000756  0D01               	mullw	1
   787  000758  0E64               	movlw	low _channelLevel
   788  00075A  24F3               	addwf	prodl,w,c
   789  00075C  6ED9               	movwf	fsr2l,c
   790  00075E  0E00               	movlw	high _channelLevel
   791  000760  20F4               	addwfc	prodh,w,c
   792  000762  6EDA               	movwf	fsr2h,c
   793  000764  0E0A               	movlw	10
   794  000766  6EDF               	movwf	indf2,c
   795                           
   796                           ; BSR set to: 0
   797  000768  2B90               	incf	initChannels@i& (0+255),f,b
   798  00076A  D7F0               	goto	l1470
   799  00076C                     u940:
   800                           
   801                           ; BSR set to: 0
   802                           ;channels.c: 44: }
   803                           ;channels.c: 46: pCIRead = &ci1;
   804                           
   805                           ; BSR set to: 0
   806  00076C  0E80               	movlw	low _ci1
   807  00076E  6F6A               	movwf	_pCIRead& (0+255),b
   808  000770  0E00               	movlw	high _ci1
   809  000772  6F6B               	movwf	(_pCIRead+1)& (0+255),b
   810                           
   811                           ;channels.c: 47: pCIWrite = &ci2;
   812  000774  0E70               	movlw	low _ci2
   813  000776  6F68               	movwf	_pCIWrite& (0+255),b
   814  000778  0E00               	movlw	high _ci2
   815  00077A  6F69               	movwf	(_pCIWrite+1)& (0+255),b
   816                           
   817                           ; BSR set to: 0
   818                           ;channels.c: 49: pCIRead -> numInts = 4;
   819  00077C  C06A  FFD9         	movff	_pCIRead,fsr2l
   820  000780  C06B  FFDA         	movff	_pCIRead+1,fsr2h
   821  000784  0E04               	movlw	4
   822  000786  6EDF               	movwf	indf2,c
   823                           
   824                           ; BSR set to: 0
   825                           ;channels.c: 50: pCIWrite -> numInts = 4;
   826  000788  C068  FFD9         	movff	_pCIWrite,fsr2l
   827  00078C  C069  FFDA         	movff	_pCIWrite+1,fsr2h
   828  000790  0E04               	movlw	4
   829  000792  6EDF               	movwf	indf2,c
   830                           
   831                           ; BSR set to: 0
   832  000794  0012               	return		;funcret
   833  000796                     __end_of_initChannels:
   834                           	opt stack 0
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           prodh	equ	0xFF4
   840                           prodl	equ	0xFF3
   841                           intcon	equ	0xFF2
   842                           intcon2	equ	0xFF1
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           indf2	equ	0xFDF
   846                           fsr2h	equ	0xFDA
   847                           fsr2l	equ	0xFD9
   848                           status	equ	0xFD8
   849                           
   850 ;; *************** function _doRank *****************
   851 ;; Defined at:
   852 ;;		line 95 in file "channels.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  i               1    3[BANK0 ] unsigned char 
   857 ;;  j               1    2[BANK0 ] unsigned char 
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMRAM   BANK0   BANK1
   867 ;;      Params:         0       0       0
   868 ;;      Locals:         0       2       0
   869 ;;      Temps:          0       2       0
   870 ;;      Totals:         0       4       0
   871 ;;Total ram usage:        4 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; Hardware stack levels required when called:    5
   874 ;; This function calls:
   875 ;;		Nothing
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text5
   882  0006C2                     __ptext5:
   883                           	opt stack 0
   884  0006C2                     _doRank:
   885                           	opt stack 25
   886                           
   887                           ;channels.c: 97: unsigned char i, j;
   888                           ;channels.c: 99: for ( i = 0; i < 4; i++)
   889                           
   890                           ; BSR set to: 0
   891                           ;incstack = 0
   892  0006C2  0E00               	movlw	0
   893  0006C4  0100               	movlb	0	; () banked
   894  0006C6  6F93               	movwf	doRank@i& (0+255),b
   895  0006C8                     l1290:
   896                           
   897                           ; BSR set to: 0
   898  0006C8  0E03               	movlw	3
   899  0006CA  6593               	cpfsgt	doRank@i& (0+255),b
   900  0006CC  D001               	goto	l158
   901  0006CE  D00C               	goto	u660
   902  0006D0                     l158:
   903                           
   904                           ; BSR set to: 0
   905                           ;channels.c: 100: channelRank[i] = 0;
   906                           
   907                           ; BSR set to: 0
   908  0006D0  5193               	movf	doRank@i& (0+255),w,b
   909  0006D2  0D01               	mullw	1
   910  0006D4  0E60               	movlw	low _channelRank
   911  0006D6  24F3               	addwf	prodl,w,c
   912  0006D8  6ED9               	movwf	fsr2l,c
   913  0006DA  0E00               	movlw	high _channelRank
   914  0006DC  20F4               	addwfc	prodh,w,c
   915  0006DE  6EDA               	movwf	fsr2h,c
   916  0006E0  0E00               	movlw	0
   917  0006E2  6EDF               	movwf	indf2,c
   918                           
   919                           ; BSR set to: 0
   920  0006E4  2B93               	incf	doRank@i& (0+255),f,b
   921  0006E6  D7F0               	goto	l1290
   922  0006E8                     u660:
   923                           
   924                           ; BSR set to: 0
   925                           ;channels.c: 102: for ( i = 0; i < 4-1; i++) {
   926                           
   927                           ; BSR set to: 0
   928  0006E8  0E00               	movlw	0
   929  0006EA  6F93               	movwf	doRank@i& (0+255),b
   930  0006EC                     l1302:
   931                           
   932                           ; BSR set to: 0
   933  0006EC  0E02               	movlw	2
   934  0006EE  6593               	cpfsgt	doRank@i& (0+255),b
   935  0006F0  D001               	goto	l160
   936  0006F2  0012               	return	
   937  0006F4                     l160:
   938                           
   939                           ; BSR set to: 0
   940                           ;channels.c: 104: for ( j = i + 1; j < 4;j++) {
   941                           
   942                           ; BSR set to: 0
   943  0006F4  2993               	incf	doRank@i& (0+255),w,b
   944  0006F6  6F92               	movwf	doRank@j& (0+255),b
   945  0006F8  0E03               	movlw	3
   946  0006FA  6592               	cpfsgt	doRank@j& (0+255),b
   947  0006FC  D001               	goto	l162
   948  0006FE  D021               	goto	u700
   949  000700                     l162:
   950                           
   951                           ; BSR set to: 0
   952                           ;channels.c: 106: if (channelLevel[i] > channelLevel[j])
   953                           
   954                           ; BSR set to: 0
   955  000700  5193               	movf	doRank@i& (0+255),w,b
   956  000702  0D01               	mullw	1
   957  000704  0E64               	movlw	low _channelLevel
   958  000706  24F3               	addwf	prodl,w,c
   959  000708  6ED9               	movwf	fsr2l,c
   960  00070A  0E00               	movlw	high _channelLevel
   961  00070C  20F4               	addwfc	prodh,w,c
   962  00070E  6EDA               	movwf	fsr2h,c
   963  000710  5192               	movf	doRank@j& (0+255),w,b
   964  000712  0D01               	mullw	1
   965  000714  0E64               	movlw	low _channelLevel
   966  000716  24F3               	addwf	prodl,w,c
   967  000718  6EE1               	movwf	fsr1l,c
   968  00071A  0E00               	movlw	high _channelLevel
   969  00071C  20F4               	addwfc	prodh,w,c
   970  00071E  6EE2               	movwf	fsr1h,c
   971  000720  50DE               	movf	postinc2,w,c
   972  000722  5CE6               	subwf	postinc1,w,c
   973  000724  B0D8               	btfsc	status,0,c
   974  000726  D002               	goto	l164
   975                           
   976                           ; BSR set to: 0
   977                           ;channels.c: 107: channelRank[i]++;
   978  000728  5193               	movf	doRank@i& (0+255),w,b
   979  00072A  D001               	goto	L1
   980  00072C                     l164:
   981                           
   982                           ; BSR set to: 0
   983                           ;channels.c: 108: else
   984                           ;channels.c: 109: channelRank[j]++;
   985                           
   986                           ; BSR set to: 0
   987  00072C  5192               	movf	doRank@j& (0+255),w,b
   988  00072E                     L1:
   989  00072E  0D01               	mullw	1
   990  000730  0E60               	movlw	low _channelRank
   991  000732  24F3               	addwf	prodl,w,c
   992  000734  6ED9               	movwf	fsr2l,c
   993  000736  0E00               	movlw	high _channelRank
   994  000738  20F4               	addwfc	prodh,w,c
   995  00073A  6EDA               	movwf	fsr2h,c
   996  00073C  2ADF               	incf	indf2,f,c
   997                           
   998                           ; BSR set to: 0
   999                           
  1000                           ; BSR set to: 0
  1001  00073E  2B92               	incf	doRank@j& (0+255),f,b
  1002  000740  D7DB               	goto	L2
  1003  000742                     u700:
  1004                           
  1005                           ; BSR set to: 0
  1006                           
  1007                           ; BSR set to: 0
  1008  000742  2B93               	incf	doRank@i& (0+255),f,b
  1009  000744  D7D3               	goto	l1302
  1010  000746                     __end_of_doRank:
  1011                           	opt stack 0
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           prodh	equ	0xFF4
  1017                           prodl	equ	0xFF3
  1018                           intcon	equ	0xFF2
  1019                           intcon2	equ	0xFF1
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postinc1	equ	0xFE6
  1023                           fsr1h	equ	0xFE2
  1024                           fsr1l	equ	0xFE1
  1025                           indf2	equ	0xFDF
  1026                           postinc2	equ	0xFDE
  1027                           fsr2h	equ	0xFDA
  1028                           fsr2l	equ	0xFD9
  1029                           status	equ	0xFD8
  1030                           
  1031 ;; *************** function _calculateTimerDiffsAndMask *****************
  1032 ;; Defined at:
  1033 ;;		line 128 in file "channels.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  pivot           4   12[BANK0 ] unsigned char [4]
  1038 ;;  sumTimers       2   10[BANK0 ] unsigned int 
  1039 ;;  i               1   17[BANK0 ] unsigned char 
  1040 ;;  i2              1   16[BANK0 ] unsigned char 
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1
  1050 ;;      Params:         0       0       0
  1051 ;;      Locals:         0       8       0
  1052 ;;      Temps:          0      10       0
  1053 ;;      Totals:         0      18       0
  1054 ;;Total ram usage:       18 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:    5
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text6
  1065  0000D4                     __ptext6:
  1066                           	opt stack 0
  1067  0000D4                     _calculateTimerDiffsAndMask:
  1068                           	opt stack 25
  1069                           
  1070                           ;channels.c: 130: unsigned char i;
  1071                           ;channels.c: 131: unsigned char i2;
  1072                           ;channels.c: 132: unsigned int sumTimers;
  1073                           ;channels.c: 134: unsigned char pivot[4];
  1074                           ;channels.c: 136: for (i = 0; i < 4; i++) {
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;incstack = 0
  1078  0000D4  0E00               	movlw	0
  1079  0000D6  0100               	movlb	0	; () banked
  1080  0000D8  6FA1               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1081  0000DA                     l1326:
  1082                           
  1083                           ; BSR set to: 0
  1084  0000DA  0E03               	movlw	3
  1085  0000DC  65A1               	cpfsgt	calculateTimerDiffsAndMask@i& (0+255),b
  1086  0000DE  D001               	goto	l169
  1087  0000E0  D016               	goto	u730
  1088  0000E2                     l169:
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;channels.c: 137: pivot[channelRank[i]] = i;
  1092                           
  1093                           ; BSR set to: 0
  1094  0000E2  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1095  0000E4  0D01               	mullw	1
  1096  0000E6  0E60               	movlw	low _channelRank
  1097  0000E8  24F3               	addwf	prodl,w,c
  1098  0000EA  6ED9               	movwf	fsr2l,c
  1099  0000EC  0E00               	movlw	high _channelRank
  1100  0000EE  20F4               	addwfc	prodh,w,c
  1101  0000F0  6EDA               	movwf	fsr2h,c
  1102  0000F2  50DF               	movf	indf2,w,c
  1103  0000F4  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1104  0000F6  5190               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1105  0000F8  0D01               	mullw	1
  1106  0000FA  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1107  0000FC  24F3               	addwf	prodl,w,c
  1108  0000FE  6ED9               	movwf	fsr2l,c
  1109  000100  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1110  000102  20F4               	addwfc	prodh,w,c
  1111  000104  6EDA               	movwf	fsr2h,c
  1112  000106  C0A1  FFDF         	movff	calculateTimerDiffsAndMask@i,indf2
  1113                           
  1114                           ; BSR set to: 0
  1115  00010A  2BA1               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1116  00010C  D7E6               	goto	l1326
  1117  00010E                     u730:
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;channels.c: 138: }
  1121                           ;channels.c: 141: syncLock = 1;
  1122                           
  1123                           ; BSR set to: 0
  1124  00010E  0E01               	movlw	1
  1125  000110  6F6D               	movwf	_syncLock& (0+255),b	;volatile
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;channels.c: 143: pCIWrite -> numInts = 4;
  1129  000112  C068  FFD9         	movff	_pCIWrite,fsr2l
  1130  000116  C069  FFDA         	movff	_pCIWrite+1,fsr2h
  1131  00011A  0E04               	movlw	4
  1132  00011C  6EDF               	movwf	indf2,c
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;channels.c: 149: pCIWrite -> bitmask[0] = 0x00;
  1136  00011E  EE20 F00B          	lfsr	2,11
  1137  000122  5168               	movf	_pCIWrite& (0+255),w,b
  1138  000124  26D9               	addwf	fsr2l,f,c
  1139  000126  5169               	movf	(_pCIWrite+1)& (0+255),w,b
  1140  000128  22DA               	addwfc	fsr2h,f,c
  1141  00012A  0E00               	movlw	0
  1142  00012C  6EDF               	movwf	indf2,c
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;channels.c: 150: for ( i = 0; i < 4; i++) {
  1146  00012E  0E00               	movlw	0
  1147  000130  6FA1               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1148  000132                     l1344:
  1149                           
  1150                           ; BSR set to: 0
  1151  000132  0E03               	movlw	3
  1152  000134  65A1               	cpfsgt	calculateTimerDiffsAndMask@i& (0+255),b
  1153  000136  D001               	goto	l171
  1154  000138  D026               	goto	u770
  1155  00013A                     l171:
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;channels.c: 151: if ( channelLevel[i] > 0)
  1159                           
  1160                           ; BSR set to: 0
  1161  00013A  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1162  00013C  0D01               	mullw	1
  1163  00013E  0E64               	movlw	low _channelLevel
  1164  000140  24F3               	addwf	prodl,w,c
  1165  000142  6ED9               	movwf	fsr2l,c
  1166  000144  0E00               	movlw	high _channelLevel
  1167  000146  20F4               	addwfc	prodh,w,c
  1168  000148  6EDA               	movwf	fsr2h,c
  1169  00014A  50DF               	movf	indf2,w,c
  1170  00014C  B4D8               	btfsc	status,2,c
  1171  00014E  D014               	goto	l173
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;channels.c: 152: pCIWrite -> bitmask[0] |= (1 << i);
  1175  000150  C0A1  F090         	movff	calculateTimerDiffsAndMask@i,??_calculateTimerDiffsAndMask
  1176  000154  0E01               	movlw	1
  1177  000156  6F91               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1178  000158  2B90               	incf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1179  00015A  D002               	goto	u764
  1180  00015C                     u765:
  1181  00015C  90D8               	bcf	status,0,c
  1182  00015E  3791               	rlcf	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1183  000160                     u764:
  1184  000160  2F90               	decfsz	??_calculateTimerDiffsAndMask& (0+255),f,b
  1185  000162  D7FC               	goto	u765
  1186  000164  0100               	movlb	0	; () banked
  1187  000166  EE20 F00B          	lfsr	2,11
  1188  00016A  5168               	movf	_pCIWrite& (0+255),w,b
  1189  00016C  26D9               	addwf	fsr2l,f,c
  1190  00016E  5169               	movf	(_pCIWrite+1)& (0+255),w,b
  1191  000170  22DA               	addwfc	fsr2h,f,c
  1192  000172  5191               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1193  000174  12DF               	iorwf	indf2,f,c
  1194  000176  D005               	goto	l174
  1195  000178                     l173:
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;channels.c: 153: else {
  1199                           ;channels.c: 154: pCIWrite -> numInts--;
  1200                           
  1201                           ; BSR set to: 0
  1202  000178  C068  FFD9         	movff	_pCIWrite,fsr2l
  1203  00017C  C069  FFDA         	movff	_pCIWrite+1,fsr2h
  1204  000180  06DF               	decf	indf2,f,c
  1205  000182                     l174:
  1206                           
  1207                           ; BSR set to: 0
  1208                           
  1209                           ; BSR set to: 0
  1210  000182  2BA1               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1211  000184  D7D6               	goto	l1344
  1212  000186                     u770:
  1213                           
  1214                           ; BSR set to: 0
  1215                           ;channels.c: 155: }
  1216                           ;channels.c: 156: }
  1217                           ;channels.c: 162: i2 = 0;
  1218                           
  1219                           ; BSR set to: 0
  1220  000186  0E00               	movlw	0
  1221  000188  6FA0               	movwf	calculateTimerDiffsAndMask@i2& (0+255),b
  1222                           
  1223                           ;channels.c: 163: for ( i = 0; i < 4; i++) {
  1224  00018A  0E00               	movlw	0
  1225  00018C  6FA1               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1226  00018E                     l1360:
  1227                           
  1228                           ; BSR set to: 0
  1229  00018E  0E03               	movlw	3
  1230  000190  65A1               	cpfsgt	calculateTimerDiffsAndMask@i& (0+255),b
  1231  000192  D001               	goto	l175
  1232  000194  D116               	goto	u850
  1233  000196                     l175:
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;channels.c: 165: if ( channelLevel[pivot[i]] == 0) {
  1237                           
  1238                           ; BSR set to: 0
  1239  000196  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1240  000198  0D01               	mullw	1
  1241  00019A  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1242  00019C  24F3               	addwf	prodl,w,c
  1243  00019E  6ED9               	movwf	fsr2l,c
  1244  0001A0  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1245  0001A2  20F4               	addwfc	prodh,w,c
  1246  0001A4  6EDA               	movwf	fsr2h,c
  1247  0001A6  50DF               	movf	indf2,w,c
  1248  0001A8  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1249  0001AA  5190               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1250  0001AC  0D01               	mullw	1
  1251  0001AE  0E64               	movlw	low _channelLevel
  1252  0001B0  24F3               	addwf	prodl,w,c
  1253  0001B2  6ED9               	movwf	fsr2l,c
  1254  0001B4  0E00               	movlw	high _channelLevel
  1255  0001B6  20F4               	addwfc	prodh,w,c
  1256  0001B8  6EDA               	movwf	fsr2h,c
  1257  0001BA  50DF               	movf	indf2,w,c
  1258  0001BC  B4D8               	btfsc	status,2,c
  1259  0001BE  D0FF               	goto	l178
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;channels.c: 167: }
  1263                           ;channels.c: 169: if ( i == 0 ) {
  1264                           
  1265                           ; BSR set to: 0
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;channels.c: 166: continue;
  1269  0001C0  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1270  0001C2  A4D8               	btfss	status,2,c
  1271  0001C4  D027               	goto	l179
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;channels.c: 170: pCIWrite -> timer[i2] = channelLevel[pivot[i]] * 16;
  1275  0001C6  51A0               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1276  0001C8  0D02               	mullw	2
  1277  0001CA  0E01               	movlw	1
  1278  0001CC  26F3               	addwf	prodl,f,c
  1279  0001CE  0E00               	movlw	0
  1280  0001D0  22F4               	addwfc	prodh,f,c
  1281  0001D2  50F3               	movf	prodl,w,c
  1282  0001D4  2568               	addwf	_pCIWrite& (0+255),w,b
  1283  0001D6  6ED9               	movwf	fsr2l,c
  1284  0001D8  50F4               	movf	prodh,w,c
  1285  0001DA  2169               	addwfc	(_pCIWrite+1)& (0+255),w,b
  1286  0001DC  6EDA               	movwf	fsr2h,c
  1287  0001DE  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1288  0001E0  0D01               	mullw	1
  1289  0001E2  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1290  0001E4  24F3               	addwf	prodl,w,c
  1291  0001E6  6EE1               	movwf	fsr1l,c
  1292  0001E8  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1293  0001EA  20F4               	addwfc	prodh,w,c
  1294  0001EC  6EE2               	movwf	fsr1h,c
  1295  0001EE  50E7               	movf	indf1,w,c
  1296  0001F0  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1297  0001F2  5190               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1298  0001F4  0D01               	mullw	1
  1299  0001F6  0E64               	movlw	low _channelLevel
  1300  0001F8  24F3               	addwf	prodl,w,c
  1301  0001FA  6EE1               	movwf	fsr1l,c
  1302  0001FC  0E00               	movlw	high _channelLevel
  1303  0001FE  20F4               	addwfc	prodh,w,c
  1304  000200  6EE2               	movwf	fsr1h,c
  1305  000202  50E7               	movf	indf1,w,c
  1306  000204  6F91               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1307  000206  5191               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1308  000208  0D10               	mullw	16
  1309  00020A  CFF3 FFDE          	movff	prodl,postinc2
  1310  00020E  CFF4 FFDD          	movff	prodh,postdec2
  1311                           
  1312                           ;channels.c: 171: }
  1313  000212  D054               	goto	l180
  1314  000214                     l179:
  1315                           
  1316                           ; BSR set to: 0
  1317                           ;channels.c: 172: else {
  1318                           ;channels.c: 173: pCIWrite -> timer[i2] = (channelLevel[pivot[i]] - channelLevel[pivot[i
      +                          -1]]) * 16;
  1319                           
  1320                           ; BSR set to: 0
  1321  000214  0EFF               	movlw	255
  1322  000216  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1323  000218  0EFF               	movlw	255
  1324  00021A  6F91               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1325  00021C  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1326  00021E  6F92               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1327  000220  6B93               	clrf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1328  000222  5190               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1329  000224  2792               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1330  000226  5191               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1331  000228  2393               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1332  00022A  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1333  00022C  2592               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),w,b
  1334  00022E  6ED9               	movwf	fsr2l,c
  1335  000230  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1336  000232  2193               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1337  000234  6EDA               	movwf	fsr2h,c
  1338  000236  50DF               	movf	indf2,w,c
  1339  000238  6F94               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1340  00023A  5194               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1341  00023C  0D01               	mullw	1
  1342  00023E  0E64               	movlw	low _channelLevel
  1343  000240  24F3               	addwf	prodl,w,c
  1344  000242  6ED9               	movwf	fsr2l,c
  1345  000244  0E00               	movlw	high _channelLevel
  1346  000246  20F4               	addwfc	prodh,w,c
  1347  000248  6EDA               	movwf	fsr2h,c
  1348  00024A  50DF               	movf	indf2,w,c
  1349  00024C  6F95               	movwf	(??_calculateTimerDiffsAndMask+5)& (0+255),b
  1350  00024E  6B96               	clrf	(??_calculateTimerDiffsAndMask+6)& (0+255),b
  1351  000250  1F95               	comf	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1352  000252  1F96               	comf	(??_calculateTimerDiffsAndMask+6)& (0+255),f,b
  1353  000254  4B95               	infsnz	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1354  000256  2B96               	incf	(??_calculateTimerDiffsAndMask+6)& (0+255),f,b
  1355  000258  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1356  00025A  0D01               	mullw	1
  1357  00025C  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1358  00025E  24F3               	addwf	prodl,w,c
  1359  000260  6ED9               	movwf	fsr2l,c
  1360  000262  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1361  000264  20F4               	addwfc	prodh,w,c
  1362  000266  6EDA               	movwf	fsr2h,c
  1363  000268  50DF               	movf	indf2,w,c
  1364  00026A  6F97               	movwf	(??_calculateTimerDiffsAndMask+7)& (0+255),b
  1365  00026C  5197               	movf	(??_calculateTimerDiffsAndMask+7)& (0+255),w,b
  1366  00026E  0D01               	mullw	1
  1367  000270  0E64               	movlw	low _channelLevel
  1368  000272  24F3               	addwf	prodl,w,c
  1369  000274  6ED9               	movwf	fsr2l,c
  1370  000276  0E00               	movlw	high _channelLevel
  1371  000278  20F4               	addwfc	prodh,w,c
  1372  00027A  6EDA               	movwf	fsr2h,c
  1373  00027C  50DF               	movf	indf2,w,c
  1374  00027E  6F98               	movwf	(??_calculateTimerDiffsAndMask+8)& (0+255),b
  1375  000280  6B99               	clrf	(??_calculateTimerDiffsAndMask+9)& (0+255),b
  1376  000282  5195               	movf	(??_calculateTimerDiffsAndMask+5)& (0+255),w,b
  1377  000284  2798               	addwf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1378  000286  5196               	movf	(??_calculateTimerDiffsAndMask+6)& (0+255),w,b
  1379  000288  2399               	addwfc	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1380  00028A  3B98               	swapf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1381  00028C  3B99               	swapf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1382  00028E  0EF0               	movlw	240
  1383  000290  1799               	andwf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1384  000292  5198               	movf	(??_calculateTimerDiffsAndMask+8)& (0+255),w,b
  1385  000294  0B0F               	andlw	15
  1386  000296  1399               	iorwf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1387  000298  0EF0               	movlw	240
  1388  00029A  1798               	andwf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1389  00029C  51A0               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1390  00029E  0D02               	mullw	2
  1391  0002A0  0E01               	movlw	1
  1392  0002A2  26F3               	addwf	prodl,f,c
  1393  0002A4  0E00               	movlw	0
  1394  0002A6  22F4               	addwfc	prodh,f,c
  1395  0002A8  50F3               	movf	prodl,w,c
  1396  0002AA  2568               	addwf	_pCIWrite& (0+255),w,b
  1397  0002AC  6ED9               	movwf	fsr2l,c
  1398  0002AE  50F4               	movf	prodh,w,c
  1399  0002B0  2169               	addwfc	(_pCIWrite+1)& (0+255),w,b
  1400  0002B2  6EDA               	movwf	fsr2h,c
  1401  0002B4  C098  FFDE         	movff	??_calculateTimerDiffsAndMask+8,postinc2
  1402  0002B8  C099  FFDD         	movff	??_calculateTimerDiffsAndMask+9,postdec2
  1403  0002BC                     l180:
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;channels.c: 174: }
  1407                           ;channels.c: 176: pCIWrite -> bitmask[i2+1] = (1 << pivot[i]);
  1408                           
  1409                           ; BSR set to: 0
  1410  0002BC  51A0               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1411  0002BE  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1412  0002C0  6B91               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1413  0002C2  0E0C               	movlw	12
  1414  0002C4  2790               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1415  0002C6  0E00               	movlw	0
  1416  0002C8  2391               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1417  0002CA  5190               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1418  0002CC  2568               	addwf	_pCIWrite& (0+255),w,b
  1419  0002CE  6ED9               	movwf	fsr2l,c
  1420  0002D0  5191               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1421  0002D2  2169               	addwfc	(_pCIWrite+1)& (0+255),w,b
  1422  0002D4  6EDA               	movwf	fsr2h,c
  1423  0002D6  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1424  0002D8  0D01               	mullw	1
  1425  0002DA  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1426  0002DC  24F3               	addwf	prodl,w,c
  1427  0002DE  6EE1               	movwf	fsr1l,c
  1428  0002E0  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1429  0002E2  20F4               	addwfc	prodh,w,c
  1430  0002E4  6EE2               	movwf	fsr1h,c
  1431  0002E6  50E7               	movf	indf1,w,c
  1432  0002E8  6F92               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1433  0002EA  0E01               	movlw	1
  1434  0002EC  6F93               	movwf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1435  0002EE  2B92               	incf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1436  0002F0  D002               	goto	u814
  1437  0002F2                     u815:
  1438  0002F2  90D8               	bcf	status,0,c
  1439  0002F4  3793               	rlcf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1440  0002F6                     u814:
  1441  0002F6  2F92               	decfsz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1442  0002F8  D7FC               	goto	u815
  1443  0002FA  0100               	movlb	0	; () banked
  1444  0002FC  5193               	movf	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1445  0002FE  6EDF               	movwf	indf2,c
  1446                           
  1447                           ;channels.c: 182: while ((i < (4 - 1)) && (channelLevel[pivot[i]] == channelLevel[pivot[
      +                          i+1]] ) ) {
  1448  000300  D02D               	goto	l181
  1449  000302                     
  1450                           ; BSR set to: 0
  1451                           ;channels.c: 183: pCIWrite -> bitmask[i2+1] |= (1 << pivot[i+1]);
  1452                           
  1453                           ; BSR set to: 0
  1454  000302  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1455  000304  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1456  000306  6B91               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1457  000308  0E01               	movlw	1
  1458  00030A  2790               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1459  00030C  0E00               	movlw	0
  1460  00030E  2391               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1461  000310  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1462  000312  2590               	addwf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1463  000314  6ED9               	movwf	fsr2l,c
  1464  000316  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1465  000318  2191               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1466  00031A  6EDA               	movwf	fsr2h,c
  1467  00031C  50DF               	movf	indf2,w,c
  1468  00031E  6F92               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1469  000320  0E01               	movlw	1
  1470  000322  6F93               	movwf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1471  000324  2B92               	incf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1472  000326  D002               	goto	u824
  1473  000328                     u825:
  1474  000328  90D8               	bcf	status,0,c
  1475  00032A  3793               	rlcf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1476  00032C                     u824:
  1477  00032C  2F92               	decfsz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1478  00032E  D7FC               	goto	u825
  1479  000330  0100               	movlb	0	; () banked
  1480  000332  51A0               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1481  000334  6F94               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1482  000336  6B95               	clrf	(??_calculateTimerDiffsAndMask+5)& (0+255),b
  1483  000338  0E0C               	movlw	12
  1484  00033A  2794               	addwf	(??_calculateTimerDiffsAndMask+4)& (0+255),f,b
  1485  00033C  0E00               	movlw	0
  1486  00033E  2395               	addwfc	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1487  000340  5194               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1488  000342  2568               	addwf	_pCIWrite& (0+255),w,b
  1489  000344  6ED9               	movwf	fsr2l,c
  1490  000346  5195               	movf	(??_calculateTimerDiffsAndMask+5)& (0+255),w,b
  1491  000348  2169               	addwfc	(_pCIWrite+1)& (0+255),w,b
  1492  00034A  6EDA               	movwf	fsr2h,c
  1493  00034C  5193               	movf	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1494  00034E  12DF               	iorwf	indf2,f,c
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;channels.c: 184: i++;
  1498  000350  2BA1               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;channels.c: 185: pCIWrite -> numInts--;
  1502  000352  C068  FFD9         	movff	_pCIWrite,fsr2l
  1503  000356  C069  FFDA         	movff	_pCIWrite+1,fsr2h
  1504  00035A  06DF               	decf	indf2,f,c
  1505  00035C                     l181:
  1506                           
  1507                           ; BSR set to: 0
  1508  00035C  0E03               	movlw	3
  1509  00035E  61A1               	cpfslt	calculateTimerDiffsAndMask@i& (0+255),b
  1510  000360  D02D               	goto	u840
  1511                           
  1512                           ; BSR set to: 0
  1513  000362  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1514  000364  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1515  000366  6B91               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1516  000368  0E01               	movlw	1
  1517  00036A  2790               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1518  00036C  0E00               	movlw	0
  1519  00036E  2391               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1520  000370  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1521  000372  2590               	addwf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1522  000374  6ED9               	movwf	fsr2l,c
  1523  000376  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1524  000378  2191               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1525  00037A  6EDA               	movwf	fsr2h,c
  1526  00037C  50DF               	movf	indf2,w,c
  1527  00037E  6F92               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1528  000380  5192               	movf	(??_calculateTimerDiffsAndMask+2)& (0+255),w,b
  1529  000382  0D01               	mullw	1
  1530  000384  0E64               	movlw	low _channelLevel
  1531  000386  24F3               	addwf	prodl,w,c
  1532  000388  6ED9               	movwf	fsr2l,c
  1533  00038A  0E00               	movlw	high _channelLevel
  1534  00038C  20F4               	addwfc	prodh,w,c
  1535  00038E  6EDA               	movwf	fsr2h,c
  1536  000390  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1537  000392  0D01               	mullw	1
  1538  000394  0E9C               	movlw	low calculateTimerDiffsAndMask@pivot
  1539  000396  24F3               	addwf	prodl,w,c
  1540  000398  6EE1               	movwf	fsr1l,c
  1541  00039A  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1542  00039C  20F4               	addwfc	prodh,w,c
  1543  00039E  6EE2               	movwf	fsr1h,c
  1544  0003A0  50E7               	movf	indf1,w,c
  1545  0003A2  6F94               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1546  0003A4  5194               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1547  0003A6  0D01               	mullw	1
  1548  0003A8  0E64               	movlw	low _channelLevel
  1549  0003AA  24F3               	addwf	prodl,w,c
  1550  0003AC  6EE1               	movwf	fsr1l,c
  1551  0003AE  0E00               	movlw	high _channelLevel
  1552  0003B0  20F4               	addwfc	prodh,w,c
  1553  0003B2  6EE2               	movwf	fsr1h,c
  1554  0003B4  50DE               	movf	postinc2,w,c
  1555  0003B6  18E6               	xorwf	postinc1,w,c
  1556  0003B8  B4D8               	btfsc	status,2,c
  1557  0003BA  D7A3               	goto	l182
  1558  0003BC                     u840:
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;channels.c: 186: }
  1562                           ;channels.c: 188: i2++;
  1563                           
  1564                           ; BSR set to: 0
  1565                           
  1566                           ; BSR set to: 0
  1567  0003BC  2BA0               	incf	calculateTimerDiffsAndMask@i2& (0+255),f,b
  1568  0003BE                     l178:
  1569                           
  1570                           ; BSR set to: 0
  1571  0003BE  2BA1               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1572  0003C0  D6E6               	goto	l1360
  1573  0003C2                     u850:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;channels.c: 189: }
  1577                           ;channels.c: 195: sumTimers = 0;
  1578                           
  1579                           ; BSR set to: 0
  1580  0003C2  0E00               	movlw	0
  1581  0003C4  6F9B               	movwf	(calculateTimerDiffsAndMask@sumTimers+1)& (0+255),b
  1582  0003C6  0E00               	movlw	0
  1583  0003C8  6F9A               	movwf	calculateTimerDiffsAndMask@sumTimers& (0+255),b
  1584                           
  1585                           ;channels.c: 196: for ( i = 0; i < i2; i++) {
  1586  0003CA  0E00               	movlw	0
  1587  0003CC  6FA1               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1588  0003CE  D011               	goto	l186
  1589  0003D0                     
  1590                           ; BSR set to: 0
  1591                           ;channels.c: 197: sumTimers += pCIWrite -> timer[i];
  1592                           
  1593                           ; BSR set to: 0
  1594  0003D0  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1595  0003D2  0D02               	mullw	2
  1596  0003D4  0E01               	movlw	1
  1597  0003D6  26F3               	addwf	prodl,f,c
  1598  0003D8  0E00               	movlw	0
  1599  0003DA  22F4               	addwfc	prodh,f,c
  1600  0003DC  50F3               	movf	prodl,w,c
  1601  0003DE  2568               	addwf	_pCIWrite& (0+255),w,b
  1602  0003E0  6ED9               	movwf	fsr2l,c
  1603  0003E2  50F4               	movf	prodh,w,c
  1604  0003E4  2169               	addwfc	(_pCIWrite+1)& (0+255),w,b
  1605  0003E6  6EDA               	movwf	fsr2h,c
  1606  0003E8  50DE               	movf	postinc2,w,c
  1607  0003EA  279A               	addwf	calculateTimerDiffsAndMask@sumTimers& (0+255),f,b
  1608  0003EC  50DD               	movf	postdec2,w,c
  1609  0003EE  239B               	addwfc	(calculateTimerDiffsAndMask@sumTimers+1)& (0+255),f,b
  1610                           
  1611                           ; BSR set to: 0
  1612  0003F0  2BA1               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1613  0003F2                     l186:
  1614                           
  1615                           ; BSR set to: 0
  1616                           
  1617                           ; BSR set to: 0
  1618  0003F2  51A0               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1619  0003F4  5DA1               	subwf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1620  0003F6  A0D8               	btfss	status,0,c
  1621  0003F8  D7EB               	goto	l187
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;channels.c: 198: }
  1625                           ;channels.c: 200: pCIWrite -> timer[i2] = (0x00ff * 16) - sumTimers;
  1626                           
  1627                           ; BSR set to: 0
  1628  0003FA  0EF0               	movlw	240
  1629  0003FC  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1630  0003FE  0E0F               	movlw	15
  1631  000400  6F91               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1632  000402  C09A  F092         	movff	calculateTimerDiffsAndMask@sumTimers,??_calculateTimerDiffsAndMask+2
  1633  000406  C09B  F093         	movff	calculateTimerDiffsAndMask@sumTimers+1,??_calculateTimerDiffsAndMask+3
  1634  00040A  1F92               	comf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1635  00040C  1F93               	comf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1636  00040E  4B92               	infsnz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1637  000410  2B93               	incf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1638  000412  5190               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1639  000414  2792               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1640  000416  5191               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1641  000418  2393               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1642  00041A  51A0               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1643  00041C  0D02               	mullw	2
  1644  00041E  0E01               	movlw	1
  1645  000420  26F3               	addwf	prodl,f,c
  1646  000422  0E00               	movlw	0
  1647  000424  22F4               	addwfc	prodh,f,c
  1648  000426  50F3               	movf	prodl,w,c
  1649  000428  2568               	addwf	_pCIWrite& (0+255),w,b
  1650  00042A  6ED9               	movwf	fsr2l,c
  1651  00042C  50F4               	movf	prodh,w,c
  1652  00042E  2169               	addwfc	(_pCIWrite+1)& (0+255),w,b
  1653  000430  6EDA               	movwf	fsr2h,c
  1654  000432  C092  FFDE         	movff	??_calculateTimerDiffsAndMask+2,postinc2
  1655  000436  C093  FFDD         	movff	??_calculateTimerDiffsAndMask+3,postdec2
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;channels.c: 202: for ( i = 0; i < 4 + 1; i++) {
  1659  00043A  0E00               	movlw	0
  1660  00043C  6FA1               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1661  00043E                     l1400:
  1662                           
  1663                           ; BSR set to: 0
  1664  00043E  0E04               	movlw	4
  1665  000440  65A1               	cpfsgt	calculateTimerDiffsAndMask@i& (0+255),b
  1666  000442  D001               	goto	l189
  1667  000444  D02E               	goto	u880
  1668  000446                     l189:
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;channels.c: 203: pCIWrite -> timer[i] = 0xFFFF - pCIWrite -> timer[i];
  1672                           
  1673                           ; BSR set to: 0
  1674  000446  0EFF               	movlw	255
  1675  000448  6F90               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1676  00044A  0EFF               	movlw	255
  1677  00044C  6F91               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1678  00044E  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1679  000450  0D02               	mullw	2
  1680  000452  0E01               	movlw	1
  1681  000454  26F3               	addwf	prodl,f,c
  1682  000456  0E00               	movlw	0
  1683  000458  22F4               	addwfc	prodh,f,c
  1684  00045A  50F3               	movf	prodl,w,c
  1685  00045C  2568               	addwf	_pCIWrite& (0+255),w,b
  1686  00045E  6ED9               	movwf	fsr2l,c
  1687  000460  50F4               	movf	prodh,w,c
  1688  000462  2169               	addwfc	(_pCIWrite+1)& (0+255),w,b
  1689  000464  6EDA               	movwf	fsr2h,c
  1690  000466  CFDE F092          	movff	postinc2,??_calculateTimerDiffsAndMask+2
  1691  00046A  CFDD F093          	movff	postdec2,??_calculateTimerDiffsAndMask+3
  1692  00046E  1F92               	comf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1693  000470  1F93               	comf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1694  000472  4B92               	infsnz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1695  000474  2B93               	incf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1696  000476  5190               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1697  000478  2792               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1698  00047A  5191               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1699  00047C  2393               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1700  00047E  51A1               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1701  000480  0D02               	mullw	2
  1702  000482  0E01               	movlw	1
  1703  000484  26F3               	addwf	prodl,f,c
  1704  000486  0E00               	movlw	0
  1705  000488  22F4               	addwfc	prodh,f,c
  1706  00048A  50F3               	movf	prodl,w,c
  1707  00048C  2568               	addwf	_pCIWrite& (0+255),w,b
  1708  00048E  6ED9               	movwf	fsr2l,c
  1709  000490  50F4               	movf	prodh,w,c
  1710  000492  2169               	addwfc	(_pCIWrite+1)& (0+255),w,b
  1711  000494  6EDA               	movwf	fsr2h,c
  1712  000496  C092  FFDE         	movff	??_calculateTimerDiffsAndMask+2,postinc2
  1713  00049A  C093  FFDD         	movff	??_calculateTimerDiffsAndMask+3,postdec2
  1714                           
  1715                           ; BSR set to: 0
  1716  00049E  2BA1               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1717  0004A0  D7CE               	goto	l1400
  1718  0004A2                     u880:
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;channels.c: 204: }
  1722                           ;channels.c: 206: syncLock = 0;
  1723                           
  1724                           ; BSR set to: 0
  1725  0004A2  0E00               	movlw	0
  1726  0004A4  6F6D               	movwf	_syncLock& (0+255),b	;volatile
  1727                           
  1728                           ;channels.c: 207: updated = 1;
  1729  0004A6  0E01               	movlw	1
  1730  0004A8  6F6C               	movwf	_updated& (0+255),b	;volatile
  1731                           
  1732                           ; BSR set to: 0
  1733  0004AA  0012               	return		;funcret
  1734  0004AC                     __end_of_calculateTimerDiffsAndMask:
  1735                           	opt stack 0
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           prodh	equ	0xFF4
  1741                           prodl	equ	0xFF3
  1742                           intcon	equ	0xFF2
  1743                           intcon2	equ	0xFF1
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           indf1	equ	0xFE7
  1747                           postinc1	equ	0xFE6
  1748                           fsr1h	equ	0xFE2
  1749                           fsr1l	equ	0xFE1
  1750                           indf2	equ	0xFDF
  1751                           postinc2	equ	0xFDE
  1752                           postdec2	equ	0xFDD
  1753                           fsr2h	equ	0xFDA
  1754                           fsr2l	equ	0xFD9
  1755                           status	equ	0xFD8
  1756                           
  1757 ;; *************** function _low_isr *****************
  1758 ;; Defined at:
  1759 ;;		line 31 in file "interrupts.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1
  1773 ;;      Params:         0       0       0
  1774 ;;      Locals:         0       0       0
  1775 ;;      Temps:         21       0       0
  1776 ;;      Totals:        21       0       0
  1777 ;;Total ram usage:       21 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    4
  1780 ;; This function calls:
  1781 ;;		_handleDMX
  1782 ;; This function is called by:
  1783 ;;		Interrupt level 1
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	intcodelo
  1788  000018                     __pintcodelo:
  1789                           	opt stack 0
  1790  000018                     _low_isr:
  1791                           	opt stack 25
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;incstack = 0
  1795  000018  8040               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1796  00001A  CFD8 F01A          	movff	status,??_low_isr
  1797  00001E  CFE8 F01B          	movff	wreg,??_low_isr+1
  1798  000022  CFE0 F01C          	movff	bsr,??_low_isr+2
  1799  000026  CFFA F01D          	movff	pclath,??_low_isr+3
  1800  00002A  CFFB F01E          	movff	pclatu,??_low_isr+4
  1801  00002E  CFE9 F01F          	movff	fsr0l,??_low_isr+5
  1802  000032  CFEA F020          	movff	fsr0h,??_low_isr+6
  1803  000036  CFE1 F021          	movff	fsr1l,??_low_isr+7
  1804  00003A  CFE2 F022          	movff	fsr1h,??_low_isr+8
  1805  00003E  CFD9 F023          	movff	fsr2l,??_low_isr+9
  1806  000042  CFDA F024          	movff	fsr2h,??_low_isr+10
  1807  000046  CFF3 F025          	movff	prodl,??_low_isr+11
  1808  00004A  CFF4 F026          	movff	prodh,??_low_isr+12
  1809  00004E  CFF6 F027          	movff	tblptrl,??_low_isr+13
  1810  000052  CFF7 F028          	movff	tblptrh,??_low_isr+14
  1811  000056  CFF8 F029          	movff	tblptru,??_low_isr+15
  1812  00005A  CFF5 F02A          	movff	tablat,??_low_isr+16
  1813  00005E  C040  F02B         	movff	btemp,??_low_isr+17
  1814  000062  C041  F02C         	movff	btemp+1,??_low_isr+18
  1815  000066  C042  F02D         	movff	btemp+2,??_low_isr+19
  1816  00006A  C043  F02E         	movff	btemp+3,??_low_isr+20
  1817                           
  1818                           ;interrupts.c: 37: if (PIR1bits.RCIF == 1) {
  1819  00006E  AA9E               	btfss	3998,5,c	;volatile
  1820  000070  D003               	goto	i1l19
  1821                           
  1822                           ;interrupts.c: 38: handleDMX();
  1823  000072  EC56  F002         	call	_handleDMX	;wreg free
  1824                           
  1825                           ;interrupts.c: 39: PIR1bits.RCIF = 0;
  1826  000076  9A9E               	bcf	3998,5,c	;volatile
  1827  000078                     i1l19:
  1828  000078  C02E  F043         	movff	??_low_isr+20,btemp+3
  1829  00007C  C02D  F042         	movff	??_low_isr+19,btemp+2
  1830  000080  C02C  F041         	movff	??_low_isr+18,btemp+1
  1831  000084  C02B  F040         	movff	??_low_isr+17,btemp
  1832  000088  C02A  FFF5         	movff	??_low_isr+16,tablat
  1833  00008C  C029  FFF8         	movff	??_low_isr+15,tblptru
  1834  000090  C028  FFF7         	movff	??_low_isr+14,tblptrh
  1835  000094  C027  FFF6         	movff	??_low_isr+13,tblptrl
  1836  000098  C026  FFF4         	movff	??_low_isr+12,prodh
  1837  00009C  C025  FFF3         	movff	??_low_isr+11,prodl
  1838  0000A0  C024  FFDA         	movff	??_low_isr+10,fsr2h
  1839  0000A4  C023  FFD9         	movff	??_low_isr+9,fsr2l
  1840  0000A8  C022  FFE2         	movff	??_low_isr+8,fsr1h
  1841  0000AC  C021  FFE1         	movff	??_low_isr+7,fsr1l
  1842  0000B0  C020  FFEA         	movff	??_low_isr+6,fsr0h
  1843  0000B4  C01F  FFE9         	movff	??_low_isr+5,fsr0l
  1844  0000B8  C01E  FFFB         	movff	??_low_isr+4,pclatu
  1845  0000BC  C01D  FFFA         	movff	??_low_isr+3,pclath
  1846  0000C0  C01C  FFE0         	movff	??_low_isr+2,bsr
  1847  0000C4  C01B  FFE8         	movff	??_low_isr+1,wreg
  1848  0000C8  C01A  FFD8         	movff	??_low_isr,status
  1849  0000CC  9040               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1850  0000CE  0010               	retfie	
  1851  0000D0                     __end_of_low_isr:
  1852                           	opt stack 0
  1853                           pclatu	equ	0xFFB
  1854                           pclath	equ	0xFFA
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           intcon	equ	0xFF2
  1862                           intcon2	equ	0xFF1
  1863                           postinc0	equ	0xFEE
  1864                           fsr0h	equ	0xFEA
  1865                           fsr0l	equ	0xFE9
  1866                           wreg	equ	0xFE8
  1867                           indf1	equ	0xFE7
  1868                           postinc1	equ	0xFE6
  1869                           fsr1h	equ	0xFE2
  1870                           fsr1l	equ	0xFE1
  1871                           bsr	equ	0xFE0
  1872                           indf2	equ	0xFDF
  1873                           postinc2	equ	0xFDE
  1874                           postdec2	equ	0xFDD
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _handleDMX *****************
  1880 ;; Defined at:
  1881 ;;		line 60 in file "dmx.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1
  1895 ;;      Params:         0       0       0
  1896 ;;      Locals:         2       0       0
  1897 ;;      Temps:          4       0       0
  1898 ;;      Totals:         6       0       0
  1899 ;;Total ram usage:        6 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    3
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_low_isr
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text8
  1910  0004AC                     __ptext8:
  1911                           	opt stack 0
  1912  0004AC                     _handleDMX:
  1913                           	opt stack 25
  1914                           
  1915                           ;dmx.c: 65: errflag = FERR;
  1916                           
  1917                           ;incstack = 0
  1918  0004AC  0E00               	movlw	0
  1919  0004AE  B4AB               	btfsc	4011,2,c	;volatile
  1920  0004B0  0E01               	movlw	1
  1921  0004B2  6E39               	movwf	_errflag,c
  1922                           
  1923                           ;dmx.c: 70: received = RCREG;
  1924  0004B4  CFAE F038          	movff	4014,_received	;volatile
  1925                           
  1926                           ;dmx.c: 72: if ((errflag == 1) && ( dmxState == 0x00) ) {
  1927  0004B8  0439               	decf	_errflag,w,c
  1928  0004BA  A4D8               	btfss	status,2,c
  1929  0004BC  D00A               	goto	i1l229
  1930  0004BE  503A               	movf	_dmxState,w,c
  1931  0004C0  A4D8               	btfss	status,2,c
  1932  0004C2  D007               	goto	i1l229
  1933                           
  1934                           ;dmx.c: 73: currentAdress = 0;
  1935  0004C4  0E00               	movlw	0
  1936  0004C6  6E30               	movwf	_currentAdress+1,c
  1937  0004C8  0E00               	movlw	0
  1938  0004CA  6E2F               	movwf	_currentAdress,c
  1939                           
  1940                           ;dmx.c: 74: dmxState = 0x01;
  1941  0004CC  0E01               	movlw	1
  1942  0004CE  6E3A               	movwf	_dmxState,c
  1943                           
  1944                           ;dmx.c: 75: return;
  1945  0004D0  0012               	return	
  1946  0004D2                     i1l229:
  1947                           
  1948                           ;dmx.c: 76: }
  1949                           ;dmx.c: 78: if ( (dmxState == 0x01) && (received == 0x00)) {
  1950  0004D2  043A               	decf	_dmxState,w,c
  1951  0004D4  A4D8               	btfss	status,2,c
  1952  0004D6  D006               	goto	i1l231
  1953  0004D8  5038               	movf	_received,w,c
  1954  0004DA  A4D8               	btfss	status,2,c
  1955  0004DC  D003               	goto	i1l231
  1956                           
  1957                           ;dmx.c: 80: dmxState = 0x02;
  1958  0004DE  0E02               	movlw	2
  1959  0004E0  6E3A               	movwf	_dmxState,c
  1960                           
  1961                           ;dmx.c: 81: return;
  1962  0004E2  0012               	return	
  1963  0004E4                     i1l231:
  1964                           
  1965                           ;dmx.c: 82: }
  1966                           ;dmx.c: 84: if ( dmxState == 0x02) {
  1967  0004E4  0E02               	movlw	2
  1968  0004E6  183A               	xorwf	_dmxState,w,c
  1969  0004E8  A4D8               	btfss	status,2,c
  1970  0004EA  0012               	return	
  1971                           
  1972                           ;dmx.c: 86: if (currentAdress >= 16 && currentAdress < 16 + 4) {
  1973  0004EC  5030               	movf	_currentAdress+1,w,c
  1974  0004EE  E104               	bnz	i1u56_20
  1975  0004F0  0E10               	movlw	16
  1976  0004F2  5C2F               	subwf	_currentAdress,w,c
  1977  0004F4  A0D8               	btfss	status,0,c
  1978  0004F6  D03E               	goto	i1l233
  1979  0004F8                     i1u56_20:
  1980  0004F8  5030               	movf	_currentAdress+1,w,c
  1981  0004FA  E13C               	bnz	i1l1230
  1982  0004FC  0E14               	movlw	20
  1983  0004FE  5C2F               	subwf	_currentAdress,w,c
  1984  000500  B0D8               	btfsc	status,0,c
  1985  000502  D038               	goto	i1l233
  1986                           
  1987                           ;dmx.c: 88: if ( channelLevel[currentAdress-16] == 0 && received != 0) {
  1988  000504  0EF0               	movlw	240
  1989  000506  6E14               	movwf	??_handleDMX& (0+255),c
  1990  000508  0EFF               	movlw	255
  1991  00050A  6E15               	movwf	(??_handleDMX+1)& (0+255),c
  1992  00050C  C02F  F016         	movff	_currentAdress,??_handleDMX+2
  1993  000510  C030  F017         	movff	_currentAdress+1,??_handleDMX+3
  1994  000514  5014               	movf	??_handleDMX,w,c
  1995  000516  2616               	addwf	??_handleDMX+2,f,c
  1996  000518  5015               	movf	??_handleDMX+1,w,c
  1997  00051A  2217               	addwfc	??_handleDMX+3,f,c
  1998  00051C  0E64               	movlw	low _channelLevel
  1999  00051E  2416               	addwf	??_handleDMX+2,w,c
  2000  000520  6ED9               	movwf	fsr2l,c
  2001  000522  0E00               	movlw	high _channelLevel
  2002  000524  2017               	addwfc	??_handleDMX+3,w,c
  2003  000526  6EDA               	movwf	fsr2h,c
  2004  000528  50DF               	movf	indf2,w,c
  2005  00052A  A4D8               	btfss	status,2,c
  2006  00052C  D004               	goto	i1l234
  2007  00052E  5038               	movf	_received,w,c
  2008  000530  A4D8               	btfss	status,2,c
  2009                           
  2010                           ;dmx.c: 90: dummy = LATA;
  2011  000532  CF89 F037          	movff	3977,_dummy	;volatile
  2012  000536                     i1l234:
  2013                           
  2014                           ;dmx.c: 92: }
  2015                           ;dmx.c: 94: channelLevel[currentAdress-16] = (received < 64 ? 0xFA : 0x00);
  2016  000536  0E3F               	movlw	63
  2017  000538  6438               	cpfsgt	_received,c
  2018  00053A  D004               	goto	i1l236
  2019  00053C  0E00               	movlw	0
  2020  00053E  6E19               	movwf	_handleDMX$699+1,c
  2021  000540  0E00               	movlw	0
  2022  000542  D003               	goto	L3
  2023  000544                     i1l236:
  2024  000544  0E00               	movlw	0
  2025  000546  6E19               	movwf	_handleDMX$699+1,c
  2026  000548  0EFA               	movlw	250
  2027  00054A                     L3:
  2028  00054A  6E18               	movwf	_handleDMX$699,c
  2029  00054C  0EF0               	movlw	240
  2030  00054E  6E14               	movwf	??_handleDMX& (0+255),c
  2031  000550  0EFF               	movlw	255
  2032  000552  6E15               	movwf	(??_handleDMX+1)& (0+255),c
  2033  000554  C02F  F016         	movff	_currentAdress,??_handleDMX+2
  2034  000558  C030  F017         	movff	_currentAdress+1,??_handleDMX+3
  2035  00055C  5014               	movf	??_handleDMX,w,c
  2036  00055E  2616               	addwf	??_handleDMX+2,f,c
  2037  000560  5015               	movf	??_handleDMX+1,w,c
  2038  000562  2217               	addwfc	??_handleDMX+3,f,c
  2039  000564  0E64               	movlw	low _channelLevel
  2040  000566  2416               	addwf	??_handleDMX+2,w,c
  2041  000568  6ED9               	movwf	fsr2l,c
  2042  00056A  0E00               	movlw	high _channelLevel
  2043  00056C  2017               	addwfc	??_handleDMX+3,w,c
  2044  00056E  6EDA               	movwf	fsr2h,c
  2045  000570  C018  FFDF         	movff	_handleDMX$699,indf2
  2046  000574                     i1l233:
  2047  000574                     i1l1230:
  2048                           
  2049                           ;dmx.c: 103: }
  2050                           ;dmx.c: 106: if (currentAdress == 16 + 4)
  2051  000574  0E14               	movlw	20
  2052  000576  182F               	xorwf	_currentAdress,w,c
  2053  000578  1030               	iorwf	_currentAdress+1,w,c
  2054  00057A  A4D8               	btfss	status,2,c
  2055  00057C  D003               	goto	i1l239
  2056                           
  2057                           ;dmx.c: 107: lastInChainReceived = 1;
  2058  00057E  0E01               	movlw	1
  2059  000580  0100               	movlb	0	; () banked
  2060  000582  6F6F               	movwf	_lastInChainReceived& (0+255),b	;volatile
  2061  000584                     i1l239:
  2062                           
  2063                           ;dmx.c: 109: currentAdress++;
  2064                           
  2065                           ; BSR set to: 0
  2066  000584  4A2F               	infsnz	_currentAdress,f,c
  2067  000586  2A30               	incf	_currentAdress+1,f,c
  2068                           
  2069                           ;dmx.c: 111: if ( currentAdress >= 128)
  2070  000588  5030               	movf	_currentAdress+1,w,c
  2071  00058A  E104               	bnz	i1u62_20
  2072  00058C  0E80               	movlw	128
  2073  00058E  5C2F               	subwf	_currentAdress,w,c
  2074  000590  A0D8               	btfss	status,0,c
  2075  000592  0012               	return	
  2076  000594                     i1u62_20:
  2077                           
  2078                           ;dmx.c: 112: dmxState = 0x00;
  2079  000594  0E00               	movlw	0
  2080  000596  6E3A               	movwf	_dmxState,c
  2081  000598  0012               	return	
  2082  00059A                     __end_of_handleDMX:
  2083                           	opt stack 0
  2084                           pclatu	equ	0xFFB
  2085                           pclath	equ	0xFFA
  2086                           tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           prodh	equ	0xFF4
  2091                           prodl	equ	0xFF3
  2092                           intcon	equ	0xFF2
  2093                           intcon2	equ	0xFF1
  2094                           postinc0	equ	0xFEE
  2095                           fsr0h	equ	0xFEA
  2096                           fsr0l	equ	0xFE9
  2097                           wreg	equ	0xFE8
  2098                           indf1	equ	0xFE7
  2099                           postinc1	equ	0xFE6
  2100                           fsr1h	equ	0xFE2
  2101                           fsr1l	equ	0xFE1
  2102                           bsr	equ	0xFE0
  2103                           indf2	equ	0xFDF
  2104                           postinc2	equ	0xFDE
  2105                           postdec2	equ	0xFDD
  2106                           fsr2h	equ	0xFDA
  2107                           fsr2l	equ	0xFD9
  2108                           status	equ	0xFD8
  2109                           
  2110 ;; *************** function _high_isr *****************
  2111 ;; Defined at:
  2112 ;;		line 14 in file "interrupts.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;		None
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      void 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1
  2126 ;;      Params:         0       0       0
  2127 ;;      Locals:         0       0       0
  2128 ;;      Temps:         18       0       0
  2129 ;;      Totals:        18       0       0
  2130 ;;Total ram usage:       18 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    2
  2133 ;; This function calls:
  2134 ;;		_pwmStep
  2135 ;; This function is called by:
  2136 ;;		Interrupt level 2
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	intcode
  2141  000008                     __pintcode:
  2142                           	opt stack 0
  2143  000008                     _high_isr:
  2144                           	opt stack 25
  2145                           
  2146                           ;incstack = 0
  2147  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2148  00000A  EFCD  F002         	goto	int_func
  2149                           pclatu	equ	0xFFB
  2150                           pclath	equ	0xFFA
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           intcon	equ	0xFF2
  2158                           intcon2	equ	0xFF1
  2159                           postinc0	equ	0xFEE
  2160                           fsr0h	equ	0xFEA
  2161                           fsr0l	equ	0xFE9
  2162                           wreg	equ	0xFE8
  2163                           indf1	equ	0xFE7
  2164                           postinc1	equ	0xFE6
  2165                           fsr1h	equ	0xFE2
  2166                           fsr1l	equ	0xFE1
  2167                           bsr	equ	0xFE0
  2168                           indf2	equ	0xFDF
  2169                           postinc2	equ	0xFDE
  2170                           postdec2	equ	0xFDD
  2171                           fsr2h	equ	0xFDA
  2172                           fsr2l	equ	0xFD9
  2173                           status	equ	0xFD8
  2174                           
  2175                           	psect	intcode_body
  2176  00059A                     __pintcode_body:
  2177                           	opt stack 25
  2178  00059A                     int_func:
  2179                           	opt stack 25
  2180  00059A  CFFA F002          	movff	pclath,??_high_isr
  2181  00059E  CFFB F003          	movff	pclatu,??_high_isr+1
  2182  0005A2  CFE9 F004          	movff	fsr0l,??_high_isr+2
  2183  0005A6  CFEA F005          	movff	fsr0h,??_high_isr+3
  2184  0005AA  CFE1 F006          	movff	fsr1l,??_high_isr+4
  2185  0005AE  CFE2 F007          	movff	fsr1h,??_high_isr+5
  2186  0005B2  CFD9 F008          	movff	fsr2l,??_high_isr+6
  2187  0005B6  CFDA F009          	movff	fsr2h,??_high_isr+7
  2188  0005BA  CFF3 F00A          	movff	prodl,??_high_isr+8
  2189  0005BE  CFF4 F00B          	movff	prodh,??_high_isr+9
  2190  0005C2  CFF6 F00C          	movff	tblptrl,??_high_isr+10
  2191  0005C6  CFF7 F00D          	movff	tblptrh,??_high_isr+11
  2192  0005CA  CFF8 F00E          	movff	tblptru,??_high_isr+12
  2193  0005CE  CFF5 F00F          	movff	tablat,??_high_isr+13
  2194  0005D2  C040  F010         	movff	btemp,??_high_isr+14
  2195  0005D6  C041  F011         	movff	btemp+1,??_high_isr+15
  2196  0005DA  C042  F012         	movff	btemp+2,??_high_isr+16
  2197  0005DE  C043  F013         	movff	btemp+3,??_high_isr+17
  2198                           
  2199                           ;interrupts.c: 19: if ( INTCONbits.T0IF == 1) {
  2200  0005E2  A4F2               	btfss	intcon,2,c	;volatile
  2201  0005E4  D003               	goto	i2l13
  2202                           
  2203                           ;interrupts.c: 20: INTCONbits.T0IF = 0;
  2204  0005E6  94F2               	bcf	intcon,2,c	;volatile
  2205                           
  2206                           ;interrupts.c: 21: pwmStep();
  2207  0005E8  EC1C  F003         	call	_pwmStep	;wreg free
  2208  0005EC                     i2l13:
  2209  0005EC  C013  F043         	movff	??_high_isr+17,btemp+3
  2210  0005F0  C012  F042         	movff	??_high_isr+16,btemp+2
  2211  0005F4  C011  F041         	movff	??_high_isr+15,btemp+1
  2212  0005F8  C010  F040         	movff	??_high_isr+14,btemp
  2213  0005FC  C00F  FFF5         	movff	??_high_isr+13,tablat
  2214  000600  C00E  FFF8         	movff	??_high_isr+12,tblptru
  2215  000604  C00D  FFF7         	movff	??_high_isr+11,tblptrh
  2216  000608  C00C  FFF6         	movff	??_high_isr+10,tblptrl
  2217  00060C  C00B  FFF4         	movff	??_high_isr+9,prodh
  2218  000610  C00A  FFF3         	movff	??_high_isr+8,prodl
  2219  000614  C009  FFDA         	movff	??_high_isr+7,fsr2h
  2220  000618  C008  FFD9         	movff	??_high_isr+6,fsr2l
  2221  00061C  C007  FFE2         	movff	??_high_isr+5,fsr1h
  2222  000620  C006  FFE1         	movff	??_high_isr+4,fsr1l
  2223  000624  C005  FFEA         	movff	??_high_isr+3,fsr0h
  2224  000628  C004  FFE9         	movff	??_high_isr+2,fsr0l
  2225  00062C  C003  FFFB         	movff	??_high_isr+1,pclatu
  2226  000630  C002  FFFA         	movff	??_high_isr,pclath
  2227  000634  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2228  000636  0011               	retfie		f
  2229  000638                     __end_of_high_isr:
  2230                           	opt stack 0
  2231                           pclatu	equ	0xFFB
  2232                           pclath	equ	0xFFA
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           prodh	equ	0xFF4
  2238                           prodl	equ	0xFF3
  2239                           intcon	equ	0xFF2
  2240                           intcon2	equ	0xFF1
  2241                           postinc0	equ	0xFEE
  2242                           fsr0h	equ	0xFEA
  2243                           fsr0l	equ	0xFE9
  2244                           wreg	equ	0xFE8
  2245                           indf1	equ	0xFE7
  2246                           postinc1	equ	0xFE6
  2247                           fsr1h	equ	0xFE2
  2248                           fsr1l	equ	0xFE1
  2249                           bsr	equ	0xFE0
  2250                           indf2	equ	0xFDF
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _pwmStep *****************
  2258 ;; Defined at:
  2259 ;;		line 76 in file "pwm.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1
  2273 ;;      Params:         0       0       0
  2274 ;;      Locals:         0       0       0
  2275 ;;      Temps:          1       0       0
  2276 ;;      Totals:         1       0       0
  2277 ;;Total ram usage:        1 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    1
  2280 ;; This function calls:
  2281 ;;		_swapBuffers
  2282 ;; This function is called by:
  2283 ;;		_high_isr
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text10
  2288  000638                     __ptext10:
  2289                           	opt stack 0
  2290  000638                     _pwmStep:
  2291                           	opt stack 25
  2292                           
  2293                           ;pwm.c: 78: tTmp = pCIRead -> timer[intCount];
  2294                           
  2295                           ;incstack = 0
  2296  000638  503D               	movf	_intCount,w,c
  2297  00063A  0D02               	mullw	2
  2298  00063C  0E01               	movlw	1
  2299  00063E  26F3               	addwf	prodl,f,c
  2300  000640  0E00               	movlw	0
  2301  000642  22F4               	addwfc	prodh,f,c
  2302  000644  50F3               	movf	prodl,w,c
  2303  000646  0100               	movlb	0	; () banked
  2304  000648  256A               	addwf	_pCIRead& (0+255),w,b
  2305  00064A  6ED9               	movwf	fsr2l,c
  2306  00064C  50F4               	movf	prodh,w,c
  2307  00064E  216B               	addwfc	(_pCIRead+1)& (0+255),w,b
  2308  000650  6EDA               	movwf	fsr2h,c
  2309  000652  CFDE F035          	movff	postinc2,_tTmp
  2310  000656  CFDD F036          	movff	postdec2,_tTmp+1
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;pwm.c: 80: TMR0H = ((tTmp >> 8) & 0xFF);
  2314  00065A  5036               	movf	_tTmp+1,w,c
  2315  00065C  6ED7               	movwf	4055,c	;volatile
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;pwm.c: 81: TMR0L = (tTmp & 0xFF);
  2319  00065E  C035  FFD6         	movff	_tTmp,4054	;volatile
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;pwm.c: 83: if (intCount == 0) {
  2323  000662  503D               	movf	_intCount,w,c
  2324  000664  A4D8               	btfss	status,2,c
  2325  000666  D010               	goto	i2l116
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;pwm.c: 85: PORTC = ~pCIRead -> bitmask[intCount];
  2329  000668  503D               	movf	_intCount,w,c
  2330  00066A  0D01               	mullw	1
  2331  00066C  0E0B               	movlw	11
  2332  00066E  26F3               	addwf	prodl,f,c
  2333  000670  0E00               	movlw	0
  2334  000672  22F4               	addwfc	prodh,f,c
  2335  000674  50F3               	movf	prodl,w,c
  2336  000676  256A               	addwf	_pCIRead& (0+255),w,b
  2337  000678  6ED9               	movwf	fsr2l,c
  2338  00067A  50F4               	movf	prodh,w,c
  2339  00067C  216B               	addwfc	(_pCIRead+1)& (0+255),w,b
  2340  00067E  6EDA               	movwf	fsr2h,c
  2341  000680  50DF               	movf	indf2,w,c
  2342  000682  0AFF               	xorlw	255
  2343  000684  6E82               	movwf	3970,c	;volatile
  2344                           
  2345                           ;pwm.c: 86: }
  2346  000686  D00E               	goto	i2l117
  2347  000688                     i2l116:
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;pwm.c: 87: else {
  2351                           ;pwm.c: 88: PORTC |= (pCIRead -> bitmask[intCount]);
  2352                           
  2353                           ; BSR set to: 0
  2354  000688  503D               	movf	_intCount,w,c
  2355  00068A  0D01               	mullw	1
  2356  00068C  0E0B               	movlw	11
  2357  00068E  26F3               	addwf	prodl,f,c
  2358  000690  0E00               	movlw	0
  2359  000692  22F4               	addwfc	prodh,f,c
  2360  000694  50F3               	movf	prodl,w,c
  2361  000696  256A               	addwf	_pCIRead& (0+255),w,b
  2362  000698  6ED9               	movwf	fsr2l,c
  2363  00069A  50F4               	movf	prodh,w,c
  2364  00069C  216B               	addwfc	(_pCIRead+1)& (0+255),w,b
  2365  00069E  6EDA               	movwf	fsr2h,c
  2366  0006A0  50DF               	movf	indf2,w,c
  2367  0006A2  1282               	iorwf	3970,f,c	;volatile
  2368  0006A4                     i2l117:
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;pwm.c: 89: }
  2372                           ;pwm.c: 91: if (intCount >= pCIRead -> numInts ) {
  2373                           
  2374                           ; BSR set to: 0
  2375  0006A4  C06A  FFD9         	movff	_pCIRead,fsr2l
  2376  0006A8  C06B  FFDA         	movff	_pCIRead+1,fsr2h
  2377  0006AC  50DE               	movf	postinc2,w,c
  2378  0006AE  5C3D               	subwf	_intCount,w,c
  2379  0006B0  A0D8               	btfss	status,0,c
  2380  0006B2  D005               	goto	i2l118
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;pwm.c: 93: swapBuffers();
  2384  0006B4  EC24  F004         	call	_swapBuffers	;wreg free
  2385                           
  2386                           ;pwm.c: 94: intCount = 0;
  2387  0006B8  0E00               	movlw	0
  2388  0006BA  6E3D               	movwf	_intCount,c
  2389                           
  2390                           ;pwm.c: 96: }
  2391  0006BC  0012               	return	
  2392  0006BE                     i2l118:
  2393                           
  2394                           ;pwm.c: 97: else {
  2395                           ;pwm.c: 99: intCount++;
  2396  0006BE  2A3D               	incf	_intCount,f,c
  2397  0006C0  0012               	return	
  2398  0006C2                     __end_of_pwmStep:
  2399                           	opt stack 0
  2400                           pclatu	equ	0xFFB
  2401                           pclath	equ	0xFFA
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           intcon	equ	0xFF2
  2409                           intcon2	equ	0xFF1
  2410                           postinc0	equ	0xFEE
  2411                           fsr0h	equ	0xFEA
  2412                           fsr0l	equ	0xFE9
  2413                           wreg	equ	0xFE8
  2414                           indf1	equ	0xFE7
  2415                           postinc1	equ	0xFE6
  2416                           fsr1h	equ	0xFE2
  2417                           fsr1l	equ	0xFE1
  2418                           bsr	equ	0xFE0
  2419                           indf2	equ	0xFDF
  2420                           postinc2	equ	0xFDE
  2421                           postdec2	equ	0xFDD
  2422                           fsr2h	equ	0xFDA
  2423                           fsr2l	equ	0xFD9
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _swapBuffers *****************
  2427 ;; Defined at:
  2428 ;;		line 68 in file "channels.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;		None
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;		None
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1
  2442 ;;      Params:         0       0       0
  2443 ;;      Locals:         0       0       0
  2444 ;;      Temps:          0       0       0
  2445 ;;      Totals:         0       0       0
  2446 ;;Total ram usage:        0 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_pwmStep
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           	psect	text11
  2456  000848                     __ptext11:
  2457                           	opt stack 0
  2458  000848                     _swapBuffers:
  2459                           	opt stack 25
  2460                           
  2461                           ;channels.c: 71: if (syncLock == 1 || updated == 0)
  2462                           
  2463                           ;incstack = 0
  2464  000848  0100               	movlb	0	; () banked
  2465  00084A  056D               	decf	_syncLock& (0+255),w,b	;volatile
  2466  00084C  B4D8               	btfsc	status,2,c
  2467  00084E  0012               	return	
  2468                           
  2469                           ; BSR set to: 0
  2470  000850  516C               	movf	_updated& (0+255),w,b	;volatile
  2471  000852  B4D8               	btfsc	status,2,c
  2472  000854  0012               	return	
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;channels.c: 74: updated = 0;
  2476                           
  2477                           ; BSR set to: 0
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;channels.c: 72: return;
  2481  000856  0E00               	movlw	0
  2482  000858  6F6C               	movwf	_updated& (0+255),b	;volatile
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;channels.c: 76: swapCount++;
  2486  00085A  4A31               	infsnz	_swapCount,f,c
  2487  00085C  2A32               	incf	_swapCount+1,f,c
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;channels.c: 78: pCITmp = pCIRead;
  2491  00085E  C06A  F033         	movff	_pCIRead,_pCITmp
  2492  000862  C06B  F034         	movff	_pCIRead+1,_pCITmp+1
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;channels.c: 79: pCIRead = pCIWrite;
  2496  000866  C068  F06A         	movff	_pCIWrite,_pCIRead
  2497  00086A  C069  F06B         	movff	_pCIWrite+1,_pCIRead+1
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;channels.c: 80: pCIWrite = pCITmp;
  2501  00086E  C033  F068         	movff	_pCITmp,_pCIWrite
  2502  000872  C034  F069         	movff	_pCITmp+1,_pCIWrite+1
  2503                           
  2504                           ; BSR set to: 0
  2505  000876  0012               	return		;funcret
  2506  000878                     __end_of_swapBuffers:
  2507                           	opt stack 0
  2508  0000                     pclatu	equ	0xFFB
  2509                           pclath	equ	0xFFA
  2510                           tblptru	equ	0xFF8
  2511                           tblptrh	equ	0xFF7
  2512                           tblptrl	equ	0xFF6
  2513                           tablat	equ	0xFF5
  2514                           prodh	equ	0xFF4
  2515                           prodl	equ	0xFF3
  2516                           intcon	equ	0xFF2
  2517                           intcon2	equ	0xFF1
  2518                           postinc0	equ	0xFEE
  2519                           fsr0h	equ	0xFEA
  2520                           fsr0l	equ	0xFE9
  2521                           wreg	equ	0xFE8
  2522                           indf1	equ	0xFE7
  2523                           postinc1	equ	0xFE6
  2524                           fsr1h	equ	0xFE2
  2525                           fsr1l	equ	0xFE1
  2526                           bsr	equ	0xFE0
  2527                           indf2	equ	0xFDF
  2528                           postinc2	equ	0xFDE
  2529                           postdec2	equ	0xFDD
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           pclatu	equ	0xFFB
  2534                           pclath	equ	0xFFA
  2535                           tblptru	equ	0xFF8
  2536                           tblptrh	equ	0xFF7
  2537                           tblptrl	equ	0xFF6
  2538                           tablat	equ	0xFF5
  2539                           prodh	equ	0xFF4
  2540                           prodl	equ	0xFF3
  2541                           intcon	equ	0xFF2
  2542                           intcon2	equ	0xFF1
  2543                           postinc0	equ	0xFEE
  2544                           fsr0h	equ	0xFEA
  2545                           fsr0l	equ	0xFE9
  2546                           wreg	equ	0xFE8
  2547                           indf1	equ	0xFE7
  2548                           postinc1	equ	0xFE6
  2549                           fsr1h	equ	0xFE2
  2550                           fsr1l	equ	0xFE1
  2551                           bsr	equ	0xFE0
  2552                           indf2	equ	0xFDF
  2553                           postinc2	equ	0xFDE
  2554                           postdec2	equ	0xFDD
  2555                           fsr2h	equ	0xFDA
  2556                           fsr2l	equ	0xFD9
  2557                           status	equ	0xFD8
  2558                           
  2559                           	psect	rparam
  2560  0000                     pclatu	equ	0xFFB
  2561                           pclath	equ	0xFFA
  2562                           tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           prodh	equ	0xFF4
  2567                           prodl	equ	0xFF3
  2568                           intcon	equ	0xFF2
  2569                           intcon2	equ	0xFF1
  2570                           postinc0	equ	0xFEE
  2571                           fsr0h	equ	0xFEA
  2572                           fsr0l	equ	0xFE9
  2573                           wreg	equ	0xFE8
  2574                           indf1	equ	0xFE7
  2575                           postinc1	equ	0xFE6
  2576                           fsr1h	equ	0xFE2
  2577                           fsr1l	equ	0xFE1
  2578                           bsr	equ	0xFE0
  2579                           indf2	equ	0xFDF
  2580                           postinc2	equ	0xFDE
  2581                           postdec2	equ	0xFDD
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586                           	psect	temp
  2587  000040                     btemp:
  2588                           	opt stack 0
  2589  000040                     	ds	1
  2590  0000                     int$flags	set	btemp
  2591  0000                     wtemp6	set	btemp+1
  2592                           pclatu	equ	0xFFB
  2593                           pclath	equ	0xFFA
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           prodh	equ	0xFF4
  2599                           prodl	equ	0xFF3
  2600                           intcon	equ	0xFF2
  2601                           intcon2	equ	0xFF1
  2602                           postinc0	equ	0xFEE
  2603                           fsr0h	equ	0xFEA
  2604                           fsr0l	equ	0xFE9
  2605                           wreg	equ	0xFE8
  2606                           indf1	equ	0xFE7
  2607                           postinc1	equ	0xFE6
  2608                           fsr1h	equ	0xFE2
  2609                           fsr1l	equ	0xFE1
  2610                           bsr	equ	0xFE0
  2611                           indf2	equ	0xFDF
  2612                           postinc2	equ	0xFDE
  2613                           postdec2	equ	0xFDD
  2614                           fsr2h	equ	0xFDA
  2615                           fsr2l	equ	0xFD9
  2616                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     46      63
    BANK0           160     18      66
    BANK1           256      0       0

Pointer List with Targets:

    pCITmp	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(BANK0[16]), ci1(BANK0[16]), 

    pCIWrite	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(BANK0[16]), ci1(BANK0[16]), 

    pCIRead	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(BANK0[16]), ci1(BANK0[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_handleDMX

Critical Paths under _high_isr in COMRAM

    _high_isr->_pwmStep

Critical Paths under _main in BANK0

    _main->_calculateTimerDiffsAndMask

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1318
         _calculateTimerDiffsAndMask
                             _doRank
                       _initChannels
                            _initDMX
                       _initHardware
                            _initPwm
 ---------------------------------------------------------------------------------
 (1) _initPwm                                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _initHardware                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDMX                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initChannels                                         1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _doRank                                               4     4      0     270
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _calculateTimerDiffsAndMask                          18    18      0     949
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _low_isr                                             21    21      0      24
                                             25 COMRAM    21    21      0
                          _handleDMX
 ---------------------------------------------------------------------------------
 (3) _handleDMX                                            6     6      0      24
                                             19 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            18    18      0       0
                                              1 COMRAM    18    18      0
                            _pwmStep
 ---------------------------------------------------------------------------------
 (5) _pwmStep                                              1     1      0       0
                                              0 COMRAM     1     1      0
                        _swapBuffers
 ---------------------------------------------------------------------------------
 (6) _swapBuffers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateTimerDiffsAndMask
   _doRank
   _initChannels
   _initDMX
   _initHardware
   _initPwm

 _low_isr (ROOT)
   _handleDMX

 _high_isr (ROOT)
   _pwmStep
     _swapBuffers

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     12      42       4       41.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2E      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      81       7        0.0%
DATA                 0      0      81       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Dec 22 14:57:52 2019

                        _swapBuffers 0848                                   l53 07EC  
                                 l54 07FC                                   bsr 000FE0  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                                l141 0754                                  l160 06F4  
                                l162 0700                                  l171 013A  
                                l180 02BC                                  l164 072C  
                                l181 035C                                  l173 0178  
                                l182 0302                                  l174 0182  
                                l158 06D0                                  l175 0196  
                                l169 00E2                                  l186 03F2  
                                l178 03BE                                  l187 03D0  
                                l179 0214                                  l189 0446  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                                u700 0742                                  u730 010E  
                                u660 06E8                                  u814 02F6  
                                u815 02F2                                  u840 03BC  
                                u824 032C                                  u825 0328  
                                u850 03C2                                  u770 0186  
                                u764 0160                                  u940 076C  
                                u765 015C                                  u880 04A2  
                                _ci1 0080                                  _ci2 0070  
                       __CFG_BORV$19 000000                                  prod 000FF3  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                               l1302 06EC                                 l1400 043E  
                               l1326 00DA                                 l1360 018E  
                               l1344 0132                                 l1290 06C8  
                               l1470 074C                                 _FERR 007D5A  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 i1l19 0078  
                               _RCIE 007CED                                 i2l13 05EC  
                               _OERR 007D59                                 _SPEN 007D5F  
                _counterForSimulator 003E                                 _main 07D8  
                               _tTmp 0035                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0040  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00D0                        __CFG_IESO$OFF 000000  
                      __CFG_FOSC$IRC 000000                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000                  _lastInChainReceived 006F  
       ??_calculateTimerDiffsAndMask 0090                                ?_main 0001  
                              _ANSEL 000F7E                                _T0CON 000FD5  
                              i1l231 04E4                                i1l233 0574  
                              i1l234 0536                                i1l236 0544  
                              i1l229 04D2                                i1l239 0584  
                              i2l116 0688                                i2l117 06A4  
                              i2l118 06BE                                _RCREG 000FAE  
                     __CFG_BBSIZ$OFF 000000                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initDMX 089A  
                     __CFG_EBTRB$OFF 000000                      __end_of_initPwm 08AC  
                              _dummy 0037                      __end_of_low_isr 00D0  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_pwmStep 06C2                                status 000FD8  
                              wtemp6 0041                        ?_initChannels 0001  
                     __CFG_HFOFST$ON 000000          ?_calculateTimerDiffsAndMask 0001  
                      ?_initHardware 0001                      __initialization 0814  
                       __end_of_main 0814                       __CFG_PCLKEN$ON 000000  
                             ??_main 00A2                        __activetblptr 000000  
                     __CFG_PLLEN$OFF 000000                               _ANSELH 000F7F  
                             i1l1230 0574                       __CFG_WDTEN$OFF 000000  
                     ??_initChannels 0090                               _SPBRG1 000FAF  
                             _SPBRGH 000FB0                       ??_initHardware 0090  
                     __CFG_PWRTEN$ON 000000                       __CFG_XINST$OFF 000000  
                             _pCITmp 0033                     __end_of_high_isr 0638  
                             _doRank 06C2                       __CFG_STVREN$ON 000000  
                             _dummy1 003C                               clear_0 082C  
                             clear_1 0838                            ??_initDMX 0090  
                          ??_initPwm 0090                         __pdataCOMRAM 003F  
                          ??_low_isr 001A                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                          ??_pwmStep 0001                           __accesstop 0060  
            __end_of__initialization 083E                        ___rparam_used 000001  
                     __pcstackCOMRAM 0001                         ?_swapBuffers 0001  
                       _channelLevel 0064                   __size_of_handleDMX 00EE  
                      _currentAdress 002F                           __pbssBANK0 0060  
                            ?_doRank 0001                              _CM1CON0 000F6D  
                            _CM2CON0 000F6B                 __end_of_initChannels 0796  
               __end_of_initHardware 07D8                              i1u62_20 0594  
                            i1u56_20 04F8                            ?_high_isr 0001  
                  __end_of_handleDMX 059A                              __Hparam 0000  
                            _pCIRead 006A                              __Lparam 0000  
                    __size_of_doRank 0084                              __pcinit 0814  
                            __ramtop 0200                              __ptext0 07D8  
                            __ptext1 089A                              __ptext2 0796  
                            __ptext3 0878                              __ptext4 0746  
                            __ptext5 06C2                              __ptext6 00D4  
                            __ptext8 04AC                              _initDMX 0878  
                            doRank@i 0093                              doRank@j 0092  
                            _errflag 0039                              _initPwm 089A  
                            _low_isr 0018                              _pwmStep 0638  
                            _updated 006C                           ??_high_isr 0002  
                     __pintcode_body 059A                 end_of_initialization 083E  
                            int_func 059A                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 __size_of_swapBuffers 0030  
calculateTimerDiffsAndMask@sumTimers 009A                __size_of_initChannels 0050  
                         _writeIndex 003F                       __end_of_doRank 0746  
                        _BAUDCONbits 000FB8                        __pidataCOMRAM 08AC  
              __size_of_initHardware 0042                  start_initialization 0814  
                       _initChannels 0746                         _initHardware 0796  
                           ??_doRank 0090                        initChannels@i 0090  
                        __pbssCOMRAM 002F                        __pcstackBANK0 0090  
                        _channelRank 0060                         _errorCounter 006E  
                  __size_of_high_isr 0630                            __pintcode 0008  
                          _handleDMX 04AC                          __pintcodelo 0018  
                           ?_initDMX 0001                             ?_initPwm 0001  
                           ?_low_isr 0001                            _readIndex 003B  
                           ?_pwmStep 0001  __size_of_calculateTimerDiffsAndMask 03D8  
                      _handleDMX$699 0018                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D                             _PIR1bits 000F9E  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                         ?_handleDMX 0001                            _swapCount 0031  
                        _INTCON2bits 000FF1                             __Hrparam 0000  
                           __Lrparam 0000                             _pCIWrite 0068  
                      ??_swapBuffers 0001                   __CFG_BOREN$SBORDIS 000000  
       calculateTimerDiffsAndMask@i2 00A0                     __size_of_initDMX 0022  
                   __size_of_initPwm 0012                     __size_of_low_isr 00B8  
                           __ptext10 0638                             __ptext11 0848  
                   __size_of_pwmStep 008A                             _high_isr 0008  
                           _dmxState 003A                             _intCount 003D  
                      __size_of_main 003C                             _received 0038  
 __end_of_calculateTimerDiffsAndMask 04AC           _calculateTimerDiffsAndMask 00D4  
                        ??_handleDMX 0014                             int$flags 0040  
                           _syncLock 006D                  __end_of_swapBuffers 0878  
                         _INTCONbits 000FF2                             intlevel1 0000  
                           intlevel2 0000          calculateTimerDiffsAndMask@i 00A1  
                         _RCSTA1bits 000FAB                           _OSCCONbits 000FD3  
    calculateTimerDiffsAndMask@pivot 009C  
