

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 08 21:11:12 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F14K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F14K22 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	idataCOMRAM
    65  000850                     __pidataCOMRAM:
    66                           	opt stack 0
    67                           
    68                           ;initializer for _writeIndex
    69  000850  01                 	db	1
    70  0000                     _RCREG	set	4014
    71  0000                     _TMR0L	set	4054
    72  0000                     _TMR0H	set	4055
    73  0000                     _INTCON2bits	set	4081
    74  0000                     _T0CON	set	4053
    75  0000                     _TXREG1	set	4013
    76  0000                     _IPR1bits	set	3999
    77  0000                     _PIE1bits	set	3997
    78  0000                     _RCSTA1bits	set	4011
    79  0000                     _SPBRGH	set	4016
    80  0000                     _SPBRG1	set	4015
    81  0000                     _BAUDCONbits	set	4024
    82  0000                     _TRISC	set	3988
    83  0000                     _PORTC	set	3970
    84  0000                     _LATC	set	3979
    85  0000                     _TRISB	set	3987
    86  0000                     _LATB	set	3978
    87  0000                     _PORTB	set	3969
    88  0000                     _TRISA	set	3986
    89  0000                     _PORTA	set	3968
    90  0000                     _LATA	set	3977
    91  0000                     _ANSELH	set	3967
    92  0000                     _ANSEL	set	3966
    93  0000                     _CM2CON0	set	3947
    94  0000                     _CM1CON0	set	3949
    95  0000                     _OSCCONbits	set	4051
    96  0000                     _OSCCON	set	4051
    97  0000                     _RCONbits	set	4048
    98  0000                     _PIR1bits	set	3998
    99  0000                     _INTCONbits	set	4082
   100  0000                     _RCIF	set	31989
   101  0000                     _CREN	set	32092
   102  0000                     _FERR	set	32090
   103  0000                     _RCIE	set	31981
   104  0000                     _SPEN	set	32095
   105  0000                     _OERR	set	32089
   106                           
   107                           ; #config settings
   108  0000                     
   109                           	psect	cinit
   110  0007B8                     __pcinit:
   111                           	opt stack 0
   112  0007B8                     start_initialization:
   113                           	opt stack 0
   114  0007B8                     __initialization:
   115                           	opt stack 0
   116                           
   117                           ; Initialize objects allocated to COMRAM (1 bytes)
   118                           ; load TBLPTR registers with __pidataCOMRAM
   119  0007B8  0E50               	movlw	low __pidataCOMRAM
   120  0007BA  6EF6               	movwf	tblptrl,c
   121  0007BC  0E08               	movlw	high __pidataCOMRAM
   122  0007BE  6EF7               	movwf	tblptrh,c
   123  0007C0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   124  0007C2  6EF8               	movwf	tblptru,c
   125  0007C4  0009               	tblrd		*+	;fetch initializer
   126  0007C6  CFF5 F047          	movff	tablat,__pdataCOMRAM
   127                           
   128                           ; Clear objects allocated to BANK0 (34 bytes)
   129  0007CA  EE00  F060         	lfsr	0,__pbssBANK0
   130  0007CE  0E22               	movlw	34
   131  0007D0                     clear_0:
   132  0007D0  6AEE               	clrf	postinc0,c
   133  0007D2  06E8               	decf	wreg,f,c
   134  0007D4  E1FD               	bnz	clear_0
   135                           
   136                           ; Clear objects allocated to COMRAM (30 bytes)
   137  0007D6  EE00  F029         	lfsr	0,__pbssCOMRAM
   138  0007DA  0E1E               	movlw	30
   139  0007DC                     clear_1:
   140  0007DC  6AEE               	clrf	postinc0,c
   141  0007DE  06E8               	decf	wreg,f,c
   142  0007E0  E1FD               	bnz	clear_1
   143  0007E2                     end_of_initialization:
   144                           	opt stack 0
   145  0007E2                     __end_of__initialization:
   146                           	opt stack 0
   147  0007E2  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   148  0007E4  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   149  0007E6  0100               	movlb	0
   150  0007E8  EFC1  F003         	goto	_main	;jump to C main() function
   151                           tblptru	equ	0xFF8
   152                           tblptrh	equ	0xFF7
   153                           tblptrl	equ	0xFF6
   154                           tablat	equ	0xFF5
   155                           postinc0	equ	0xFEE
   156                           wreg	equ	0xFE8
   157                           
   158                           	psect	bssCOMRAM
   159  000029                     __pbssCOMRAM:
   160                           	opt stack 0
   161  000029                     _channelRank:
   162                           	opt stack 0
   163  000029                     	ds	4
   164  00002D                     _channelLevel:
   165                           	opt stack 0
   166  00002D                     	ds	4
   167  000031                     _currentAdress:
   168                           	opt stack 0
   169  000031                     	ds	2
   170  000033                     _swapCount:
   171                           	opt stack 0
   172  000033                     	ds	2
   173  000035                     _pCITmp:
   174                           	opt stack 0
   175  000035                     	ds	2
   176  000037                     _pCIWrite:
   177                           	opt stack 0
   178  000037                     	ds	2
   179  000039                     _tTmp:
   180                           	opt stack 0
   181  000039                     	ds	2
   182  00003B                     _pCIRead:
   183                           	opt stack 0
   184  00003B                     	ds	2
   185  00003D                     _dummy:
   186                           	opt stack 0
   187  00003D                     	ds	1
   188  00003E                     _received:
   189                           	opt stack 0
   190  00003E                     	ds	1
   191  00003F                     _errflag:
   192                           	opt stack 0
   193  00003F                     	ds	1
   194  000040                     _dmxState:
   195                           	opt stack 0
   196  000040                     	ds	1
   197  000041                     _readIndex:
   198                           	opt stack 0
   199  000041                     	ds	1
   200  000042                     _dummy1:
   201                           	opt stack 0
   202  000042                     	ds	1
   203  000043                     _intCount:
   204                           	opt stack 0
   205  000043                     	ds	1
   206  000044                     _errorCounter:
   207                           	opt stack 0
   208  000044                     	ds	1
   209  000045                     _counterForSimulator:
   210                           	opt stack 0
   211  000045                     	ds	1
   212  000046                     _lastInChainReceived:
   213                           	opt stack 0
   214  000046                     	ds	1
   215                           tblptru	equ	0xFF8
   216                           tblptrh	equ	0xFF7
   217                           tblptrl	equ	0xFF6
   218                           tablat	equ	0xFF5
   219                           postinc0	equ	0xFEE
   220                           wreg	equ	0xFE8
   221                           
   222                           	psect	dataCOMRAM
   223  000047                     __pdataCOMRAM:
   224                           	opt stack 0
   225  000047                     _writeIndex:
   226                           	opt stack 0
   227  000047                     	ds	1
   228                           tblptru	equ	0xFF8
   229                           tblptrh	equ	0xFF7
   230                           tblptrl	equ	0xFF6
   231                           tablat	equ	0xFF5
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           
   235                           	psect	bssBANK0
   236  000060                     __pbssBANK0:
   237                           	opt stack 0
   238  000060                     _updated:
   239                           	opt stack 0
   240  000060                     	ds	1
   241  000061                     _syncLock:
   242                           	opt stack 0
   243  000061                     	ds	1
   244  000062                     _ci2:
   245                           	opt stack 0
   246  000062                     	ds	16
   247  000072                     _ci1:
   248                           	opt stack 0
   249  000072                     	ds	16
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           tblptrl	equ	0xFF6
   253                           tablat	equ	0xFF5
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           
   257                           	psect	cstackBANK0
   258  000082                     __pcstackBANK0:
   259                           	opt stack 0
   260  000082                     ??_calculateTimerDiffsAndMask:
   261  000082                     initChannels@i:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x0
   265  000082                     	ds	2
   266  000084                     doRank@j:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x2
   270  000084                     	ds	1
   271  000085                     doRank@i:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0x3
   275  000085                     	ds	7
   276  00008C                     calculateTimerDiffsAndMask@sumTimers:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0xA
   280  00008C                     	ds	2
   281  00008E                     calculateTimerDiffsAndMask@pivot:
   282                           	opt stack 0
   283                           
   284                           ; 4 bytes @ 0xC
   285  00008E                     	ds	4
   286  000092                     calculateTimerDiffsAndMask@i2:
   287                           	opt stack 0
   288                           
   289                           ; 1 bytes @ 0x10
   290  000092                     	ds	1
   291  000093                     calculateTimerDiffsAndMask@i:
   292                           	opt stack 0
   293                           
   294                           ; 1 bytes @ 0x11
   295  000093                     	ds	1
   296  000094                     tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           
   303                           ; 1 bytes @ 0x12
   304                           
   305                           	psect	cstackCOMRAM
   306  000001                     __pcstackCOMRAM:
   307                           	opt stack 0
   308  000001                     
   309                           ; 1 bytes @ 0x0
   310  000001                     	ds	1
   311  000002                     ??_high_isr:
   312                           
   313                           ; 1 bytes @ 0x1
   314  000002                     	ds	18
   315  000014                     ??_low_isr:
   316                           
   317                           ; 1 bytes @ 0x13
   318  000014                     	ds	21
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326 ;;
   327 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   328 ;;
   329 ;; *************** function _main *****************
   330 ;; Defined at:
   331 ;;		line 35 in file "main.c"
   332 ;; Parameters:    Size  Location     Type
   333 ;;		None
   334 ;; Auto vars:     Size  Location     Type
   335 ;;		None
   336 ;; Return value:  Size  Location     Type
   337 ;;                  1    wreg      void 
   338 ;; Registers used:
   339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   340 ;; Tracked objects:
   341 ;;		On entry : 0/0
   342 ;;		On exit  : 0/0
   343 ;;		Unchanged: 0/0
   344 ;; Data sizes:     COMRAM   BANK0   BANK1
   345 ;;      Params:         0       0       0
   346 ;;      Locals:         0       0       0
   347 ;;      Temps:          0       0       0
   348 ;;      Totals:         0       0       0
   349 ;;Total ram usage:        0 bytes
   350 ;; Hardware stack levels required when called:    6
   351 ;; This function calls:
   352 ;;		_calculateTimerDiffsAndMask
   353 ;;		_doRank
   354 ;;		_initChannels
   355 ;;		_initDMX
   356 ;;		_initHardware
   357 ;;		_initPwm
   358 ;; This function is called by:
   359 ;;		Startup code after reset
   360 ;; This function uses a non-reentrant model
   361 ;;
   362                           
   363                           	psect	text0
   364  000782                     __ptext0:
   365                           	opt stack 0
   366  000782                     _main:
   367                           	opt stack 25
   368                           
   369                           ;main.c: 42: initHardware();
   370                           
   371                           ;incstack = 0
   372  000782  ECA0  F003         	call	_initHardware	;wreg free
   373                           
   374                           ;main.c: 43: initPwm();
   375  000786  EC1F  F004         	call	_initPwm	;wreg free
   376                           
   377                           ;main.c: 44: initChannels();
   378  00078A  EC78  F003         	call	_initChannels	;wreg free
   379                           
   380                           ;main.c: 45: initDMX();
   381  00078E  EC0E  F004         	call	_initDMX	;wreg free
   382                           
   383                           ;main.c: 48: RCONbits.IPEN = 1;
   384  000792  8ED0               	bsf	4048,7,c	;volatile
   385                           
   386                           ;main.c: 51: INTCONbits.GIEH = 1;
   387  000794  8EF2               	bsf	intcon,7,c	;volatile
   388  000796                     
   389                           ;main.c: 94: if (OERR == 1) {
   390  000796  A2AB               	btfss	4011,1,c	;volatile
   391  000798  D005               	goto	l54
   392                           
   393                           ;main.c: 97: errorCounter++;
   394  00079A  2A44               	incf	_errorCounter,f,c
   395                           
   396                           ;main.c: 98: SPEN = 0;
   397  00079C  9EAB               	bcf	4011,7,c	;volatile
   398                           
   399                           ;main.c: 99: RCIE = 0;
   400  00079E  9A9D               	bcf	3997,5,c	;volatile
   401                           
   402                           ;main.c: 100: initDMX();
   403  0007A0  EC0E  F004         	call	_initDMX	;wreg free
   404  0007A4                     l54:
   405                           
   406                           ;main.c: 101: }
   407                           ;main.c: 105: if (lastInChainReceived ) {
   408  0007A4  5046               	movf	_lastInChainReceived,w,c	;volatile
   409  0007A6  B4D8               	btfsc	status,2,c
   410  0007A8  D7F6               	goto	l53
   411                           
   412                           ;main.c: 106: doRank();
   413  0007AA  EC36  F003         	call	_doRank	;wreg free
   414                           
   415                           ;main.c: 107: calculateTimerDiffsAndMask();
   416  0007AE  EC6A  F000         	call	_calculateTimerDiffsAndMask	;wreg free
   417                           
   418                           ;main.c: 108: lastInChainReceived = 0;
   419  0007B2  0E00               	movlw	0
   420  0007B4  6E46               	movwf	_lastInChainReceived,c	;volatile
   421                           
   422                           ;main.c: 109: }
   423                           ;main.c: 110: }
   424  0007B6  D7EF               	goto	l53
   425  0007B8                     __end_of_main:
   426                           	opt stack 0
   427                           tblptru	equ	0xFF8
   428                           tblptrh	equ	0xFF7
   429                           tblptrl	equ	0xFF6
   430                           tablat	equ	0xFF5
   431                           intcon	equ	0xFF2
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           status	equ	0xFD8
   435                           
   436 ;; *************** function _initPwm *****************
   437 ;; Defined at:
   438 ;;		line 19 in file "pwm.c"
   439 ;; Parameters:    Size  Location     Type
   440 ;;		None
   441 ;; Auto vars:     Size  Location     Type
   442 ;;  i               1    0        unsigned char 
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		wreg, status,2
   447 ;; Tracked objects:
   448 ;;		On entry : 0/0
   449 ;;		On exit  : 0/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMRAM   BANK0   BANK1
   452 ;;      Params:         0       0       0
   453 ;;      Locals:         0       0       0
   454 ;;      Temps:          0       0       0
   455 ;;      Totals:         0       0       0
   456 ;;Total ram usage:        0 bytes
   457 ;; Hardware stack levels used:    1
   458 ;; Hardware stack levels required when called:    5
   459 ;; This function calls:
   460 ;;		Nothing
   461 ;; This function is called by:
   462 ;;		_main
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466                           	psect	text1
   467  00083E                     __ptext1:
   468                           	opt stack 0
   469  00083E                     _initPwm:
   470                           	opt stack 25
   471                           
   472                           ;pwm.c: 21: unsigned char i;
   473                           ;pwm.c: 23: INTCONbits.TMR0IF = 0;
   474                           
   475                           ;incstack = 0
   476  00083E  94F2               	bcf	intcon,2,c	;volatile
   477                           
   478                           ;pwm.c: 25: T0CON = 0b10000001;
   479  000840  0E81               	movlw	129
   480  000842  6ED5               	movwf	4053,c	;volatile
   481                           
   482                           ;pwm.c: 27: INTCON2bits.TMR0IP = 1;
   483  000844  84F1               	bsf	intcon2,2,c	;volatile
   484                           
   485                           ;pwm.c: 28: INTCONbits.TMR0IE = 1;
   486  000846  8AF2               	bsf	intcon,5,c	;volatile
   487                           
   488                           ;pwm.c: 30: INTCONbits.GIEH = 1;
   489  000848  8EF2               	bsf	intcon,7,c	;volatile
   490                           
   491                           ;pwm.c: 31: INTCONbits.GIEL = 1;
   492  00084A  8CF2               	bsf	intcon,6,c	;volatile
   493                           
   494                           ;pwm.c: 33: INTCONbits.PEIE = 1;
   495  00084C  8CF2               	bsf	intcon,6,c	;volatile
   496  00084E  0012               	return		;funcret
   497  000850                     __end_of_initPwm:
   498                           	opt stack 0
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           tblptrl	equ	0xFF6
   502                           tablat	equ	0xFF5
   503                           intcon	equ	0xFF2
   504                           intcon2	equ	0xFF1
   505                           postinc0	equ	0xFEE
   506                           wreg	equ	0xFE8
   507                           status	equ	0xFD8
   508                           
   509 ;; *************** function _initHardware *****************
   510 ;; Defined at:
   511 ;;		line 6 in file "hardware.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;		None
   514 ;; Auto vars:     Size  Location     Type
   515 ;;		None
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, status,2
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMRAM   BANK0   BANK1
   525 ;;      Params:         0       0       0
   526 ;;      Locals:         0       0       0
   527 ;;      Temps:          0       0       0
   528 ;;      Totals:         0       0       0
   529 ;;Total ram usage:        0 bytes
   530 ;; Hardware stack levels used:    1
   531 ;; Hardware stack levels required when called:    5
   532 ;; This function calls:
   533 ;;		Nothing
   534 ;; This function is called by:
   535 ;;		_main
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           	psect	text2
   540  000740                     __ptext2:
   541                           	opt stack 0
   542  000740                     _initHardware:
   543                           	opt stack 25
   544                           
   545                           ;hardware.c: 10: OSCCONbits.IDLEN = 0;
   546                           
   547                           ;incstack = 0
   548  000740  9ED3               	bcf	4051,7,c	;volatile
   549                           
   550                           ;hardware.c: 12: OSCCONbits.IRCF2 = 1;
   551  000742  8CD3               	bsf	4051,6,c	;volatile
   552                           
   553                           ;hardware.c: 13: OSCCONbits.IRCF1 = 1;
   554  000744  8AD3               	bsf	4051,5,c	;volatile
   555                           
   556                           ;hardware.c: 14: OSCCONbits.IRCF0 = 0;
   557  000746  98D3               	bcf	4051,4,c	;volatile
   558                           
   559                           ;hardware.c: 16: OSCCONbits.SCS1 = 1;
   560  000748  82D3               	bsf	4051,1,c	;volatile
   561                           
   562                           ;hardware.c: 17: OSCCONbits.SCS0 = 0;
   563  00074A  90D3               	bcf	4051,0,c	;volatile
   564                           
   565                           ;hardware.c: 23: CM1CON0 = 0;
   566  00074C  0E00               	movlw	0
   567  00074E  6E6D               	movwf	3949,c	;volatile
   568                           
   569                           ;hardware.c: 24: CM2CON0 = 0;
   570  000750  0E00               	movlw	0
   571  000752  6E6B               	movwf	3947,c	;volatile
   572                           
   573                           ;hardware.c: 27: ANSEL = 0x00;
   574  000754  0E00               	movlw	0
   575  000756  6E7E               	movwf	3966,c	;volatile
   576                           
   577                           ;hardware.c: 28: ANSELH = 0x00;
   578  000758  0E00               	movlw	0
   579  00075A  6E7F               	movwf	3967,c	;volatile
   580                           
   581                           ;hardware.c: 30: LATA = 0x00;
   582  00075C  0E00               	movlw	0
   583  00075E  6E89               	movwf	3977,c	;volatile
   584                           
   585                           ;hardware.c: 31: PORTA = 0x00;
   586  000760  0E00               	movlw	0
   587  000762  6E80               	movwf	3968,c	;volatile
   588                           
   589                           ;hardware.c: 32: TRISA = 0b00000111;
   590  000764  0E07               	movlw	7
   591  000766  6E92               	movwf	3986,c	;volatile
   592                           
   593                           ;hardware.c: 41: PORTB = 0x00;
   594  000768  0E00               	movlw	0
   595  00076A  6E81               	movwf	3969,c	;volatile
   596                           
   597                           ;hardware.c: 42: LATB = 0x00;
   598  00076C  0E00               	movlw	0
   599  00076E  6E8A               	movwf	3978,c	;volatile
   600                           
   601                           ;hardware.c: 44: TRISB = 0b00100111;
   602  000770  0E27               	movlw	39
   603  000772  6E93               	movwf	3987,c	;volatile
   604                           
   605                           ;hardware.c: 46: LATC = 0x00;
   606  000774  0E00               	movlw	0
   607  000776  6E8B               	movwf	3979,c	;volatile
   608                           
   609                           ;hardware.c: 47: PORTC = 0x00;
   610  000778  0E00               	movlw	0
   611  00077A  6E82               	movwf	3970,c	;volatile
   612                           
   613                           ;hardware.c: 49: TRISC = 0b00000000;
   614  00077C  0E00               	movlw	0
   615  00077E  6E94               	movwf	3988,c	;volatile
   616  000780  0012               	return		;funcret
   617  000782                     __end_of_initHardware:
   618                           	opt stack 0
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           intcon	equ	0xFF2
   624                           intcon2	equ	0xFF1
   625                           postinc0	equ	0xFEE
   626                           wreg	equ	0xFE8
   627                           status	equ	0xFD8
   628                           
   629 ;; *************** function _initDMX *****************
   630 ;; Defined at:
   631 ;;		line 31 in file "dmx.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;		None
   634 ;; Auto vars:     Size  Location     Type
   635 ;;		None
   636 ;; Return value:  Size  Location     Type
   637 ;;                  1    wreg      void 
   638 ;; Registers used:
   639 ;;		wreg, status,2
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMRAM   BANK0   BANK1
   645 ;;      Params:         0       0       0
   646 ;;      Locals:         0       0       0
   647 ;;      Temps:          0       0       0
   648 ;;      Totals:         0       0       0
   649 ;;Total ram usage:        0 bytes
   650 ;; Hardware stack levels used:    1
   651 ;; Hardware stack levels required when called:    5
   652 ;; This function calls:
   653 ;;		Nothing
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           	psect	text3
   660  00081C                     __ptext3:
   661                           	opt stack 0
   662  00081C                     _initDMX:
   663                           	opt stack 25
   664                           
   665                           ;dmx.c: 35: BAUDCONbits.BRG16 = 1;
   666                           
   667                           ;incstack = 0
   668  00081C  86B8               	bsf	4024,3,c	;volatile
   669                           
   670                           ;dmx.c: 36: BAUDCONbits.CKTXP = 1;
   671  00081E  88B8               	bsf	4024,4,c	;volatile
   672                           
   673                           ;dmx.c: 38: SPBRG1 = 1;
   674  000820  0E01               	movlw	1
   675  000822  6EAF               	movwf	4015,c	;volatile
   676                           
   677                           ;dmx.c: 39: SPBRGH = 0;
   678  000824  0E00               	movlw	0
   679  000826  6EB0               	movwf	4016,c	;volatile
   680                           
   681                           ;dmx.c: 41: RCSTA1bits.CREN = 1;
   682  000828  88AB               	bsf	4011,4,c	;volatile
   683                           
   684                           ;dmx.c: 43: RCSTA1bits.SPEN = 1;
   685  00082A  8EAB               	bsf	4011,7,c	;volatile
   686                           
   687                           ;dmx.c: 45: PIE1bits.RCIE = 1;
   688  00082C  8A9D               	bsf	3997,5,c	;volatile
   689                           
   690                           ;dmx.c: 46: IPR1bits.RCIP = 0;
   691  00082E  9A9F               	bcf	3999,5,c	;volatile
   692                           
   693                           ;dmx.c: 49: currentAdress = 0;
   694  000830  0E00               	movlw	0
   695  000832  6E32               	movwf	_currentAdress+1,c
   696  000834  0E00               	movlw	0
   697  000836  6E31               	movwf	_currentAdress,c
   698                           
   699                           ;dmx.c: 51: dmxState = 0x00;
   700  000838  0E00               	movlw	0
   701  00083A  6E40               	movwf	_dmxState,c
   702  00083C  0012               	return		;funcret
   703  00083E                     __end_of_initDMX:
   704                           	opt stack 0
   705                           tblptru	equ	0xFF8
   706                           tblptrh	equ	0xFF7
   707                           tblptrl	equ	0xFF6
   708                           tablat	equ	0xFF5
   709                           intcon	equ	0xFF2
   710                           intcon2	equ	0xFF1
   711                           postinc0	equ	0xFEE
   712                           wreg	equ	0xFE8
   713                           status	equ	0xFD8
   714                           
   715 ;; *************** function _initChannels *****************
   716 ;; Defined at:
   717 ;;		line 38 in file "channels.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  i               1    0[BANK0 ] unsigned char 
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1
   731 ;;      Params:         0       0       0
   732 ;;      Locals:         0       1       0
   733 ;;      Temps:          0       0       0
   734 ;;      Totals:         0       1       0
   735 ;;Total ram usage:        1 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; Hardware stack levels required when called:    5
   738 ;; This function calls:
   739 ;;		Nothing
   740 ;; This function is called by:
   741 ;;		_main
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text4
   746  0006F0                     __ptext4:
   747                           	opt stack 0
   748  0006F0                     _initChannels:
   749                           	opt stack 25
   750                           
   751                           ;channels.c: 40: unsigned char i;
   752                           ;channels.c: 42: for (i = 0; i < 4; i++) {
   753                           
   754                           ;incstack = 0
   755  0006F0  0E00               	movlw	0
   756  0006F2  0100               	movlb	0	; () banked
   757  0006F4  6F82               	movwf	initChannels@i& (0+255),b
   758  0006F6                     l1436:
   759                           
   760                           ; BSR set to: 0
   761  0006F6  0E03               	movlw	3
   762  0006F8  6582               	cpfsgt	initChannels@i& (0+255),b
   763  0006FA  D001               	goto	l180
   764  0006FC  D00C               	goto	u760
   765  0006FE                     l180:
   766                           
   767                           ; BSR set to: 0
   768                           ;channels.c: 43: channelLevel[i] = 10;
   769                           
   770                           ; BSR set to: 0
   771  0006FE  5182               	movf	initChannels@i& (0+255),w,b
   772  000700  0D01               	mullw	1
   773  000702  0E2D               	movlw	low _channelLevel
   774  000704  24F3               	addwf	prodl,w,c
   775  000706  6ED9               	movwf	fsr2l,c
   776  000708  0E00               	movlw	high _channelLevel
   777  00070A  20F4               	addwfc	prodh,w,c
   778  00070C  6EDA               	movwf	fsr2h,c
   779  00070E  0E0A               	movlw	10
   780  000710  6EDF               	movwf	indf2,c
   781                           
   782                           ; BSR set to: 0
   783  000712  2B82               	incf	initChannels@i& (0+255),f,b
   784  000714  D7F0               	goto	l1436
   785  000716                     u760:
   786                           
   787                           ; BSR set to: 0
   788                           ;channels.c: 44: }
   789                           ;channels.c: 46: pCIRead = &ci1;
   790                           
   791                           ; BSR set to: 0
   792  000716  0E72               	movlw	low _ci1
   793  000718  6E3B               	movwf	_pCIRead,c
   794  00071A  0E00               	movlw	high _ci1
   795  00071C  6E3C               	movwf	_pCIRead+1,c
   796                           
   797                           ;channels.c: 47: pCIWrite = &ci2;
   798  00071E  0E62               	movlw	low _ci2
   799  000720  6E37               	movwf	_pCIWrite,c
   800  000722  0E00               	movlw	high _ci2
   801  000724  6E38               	movwf	_pCIWrite+1,c
   802                           
   803                           ; BSR set to: 0
   804                           ;channels.c: 49: pCIRead -> numInts = 4;
   805  000726  C03B  FFD9         	movff	_pCIRead,fsr2l
   806  00072A  C03C  FFDA         	movff	_pCIRead+1,fsr2h
   807  00072E  0E04               	movlw	4
   808  000730  6EDF               	movwf	indf2,c
   809                           
   810                           ; BSR set to: 0
   811                           ;channels.c: 50: pCIWrite -> numInts = 4;
   812  000732  C037  FFD9         	movff	_pCIWrite,fsr2l
   813  000736  C038  FFDA         	movff	_pCIWrite+1,fsr2h
   814  00073A  0E04               	movlw	4
   815  00073C  6EDF               	movwf	indf2,c
   816                           
   817                           ; BSR set to: 0
   818  00073E  0012               	return		;funcret
   819  000740                     __end_of_initChannels:
   820                           	opt stack 0
   821                           tblptru	equ	0xFF8
   822                           tblptrh	equ	0xFF7
   823                           tblptrl	equ	0xFF6
   824                           tablat	equ	0xFF5
   825                           prodh	equ	0xFF4
   826                           prodl	equ	0xFF3
   827                           intcon	equ	0xFF2
   828                           intcon2	equ	0xFF1
   829                           postinc0	equ	0xFEE
   830                           wreg	equ	0xFE8
   831                           indf2	equ	0xFDF
   832                           fsr2h	equ	0xFDA
   833                           fsr2l	equ	0xFD9
   834                           status	equ	0xFD8
   835                           
   836 ;; *************** function _doRank *****************
   837 ;; Defined at:
   838 ;;		line 95 in file "channels.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  i               1    3[BANK0 ] unsigned char 
   843 ;;  j               1    2[BANK0 ] unsigned char 
   844 ;; Return value:  Size  Location     Type
   845 ;;                  1    wreg      void 
   846 ;; Registers used:
   847 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMRAM   BANK0   BANK1
   853 ;;      Params:         0       0       0
   854 ;;      Locals:         0       2       0
   855 ;;      Temps:          0       2       0
   856 ;;      Totals:         0       4       0
   857 ;;Total ram usage:        4 bytes
   858 ;; Hardware stack levels used:    1
   859 ;; Hardware stack levels required when called:    5
   860 ;; This function calls:
   861 ;;		Nothing
   862 ;; This function is called by:
   863 ;;		_main
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           	psect	text5
   868  00066C                     __ptext5:
   869                           	opt stack 0
   870  00066C                     _doRank:
   871                           	opt stack 25
   872                           
   873                           ;channels.c: 97: unsigned char i, j;
   874                           ;channels.c: 99: for ( i = 0; i < 4; i++)
   875                           
   876                           ; BSR set to: 0
   877                           ;incstack = 0
   878  00066C  0E00               	movlw	0
   879  00066E  0100               	movlb	0	; () banked
   880  000670  6F85               	movwf	doRank@i& (0+255),b
   881  000672                     l1466:
   882                           
   883                           ; BSR set to: 0
   884  000672  0E03               	movlw	3
   885  000674  6585               	cpfsgt	doRank@i& (0+255),b
   886  000676  D001               	goto	l197
   887  000678  D00C               	goto	u780
   888  00067A                     l197:
   889                           
   890                           ; BSR set to: 0
   891                           ;channels.c: 100: channelRank[i] = 0;
   892                           
   893                           ; BSR set to: 0
   894  00067A  5185               	movf	doRank@i& (0+255),w,b
   895  00067C  0D01               	mullw	1
   896  00067E  0E29               	movlw	low _channelRank
   897  000680  24F3               	addwf	prodl,w,c
   898  000682  6ED9               	movwf	fsr2l,c
   899  000684  0E00               	movlw	high _channelRank
   900  000686  20F4               	addwfc	prodh,w,c
   901  000688  6EDA               	movwf	fsr2h,c
   902  00068A  0E00               	movlw	0
   903  00068C  6EDF               	movwf	indf2,c
   904                           
   905                           ; BSR set to: 0
   906  00068E  2B85               	incf	doRank@i& (0+255),f,b
   907  000690  D7F0               	goto	l1466
   908  000692                     u780:
   909                           
   910                           ; BSR set to: 0
   911                           ;channels.c: 102: for ( i = 0; i < 4-1; i++) {
   912                           
   913                           ; BSR set to: 0
   914  000692  0E00               	movlw	0
   915  000694  6F85               	movwf	doRank@i& (0+255),b
   916  000696                     l1478:
   917                           
   918                           ; BSR set to: 0
   919  000696  0E02               	movlw	2
   920  000698  6585               	cpfsgt	doRank@i& (0+255),b
   921  00069A  D001               	goto	l199
   922  00069C  0012               	return	
   923  00069E                     l199:
   924                           
   925                           ; BSR set to: 0
   926                           ;channels.c: 104: for ( j = i + 1; j < 4;j++) {
   927                           
   928                           ; BSR set to: 0
   929  00069E  2985               	incf	doRank@i& (0+255),w,b
   930  0006A0  6F84               	movwf	doRank@j& (0+255),b
   931  0006A2  0E03               	movlw	3
   932  0006A4  6584               	cpfsgt	doRank@j& (0+255),b
   933  0006A6  D001               	goto	l201
   934  0006A8  D021               	goto	u820
   935  0006AA                     l201:
   936                           
   937                           ; BSR set to: 0
   938                           ;channels.c: 106: if (channelLevel[i] > channelLevel[j])
   939                           
   940                           ; BSR set to: 0
   941  0006AA  5185               	movf	doRank@i& (0+255),w,b
   942  0006AC  0D01               	mullw	1
   943  0006AE  0E2D               	movlw	low _channelLevel
   944  0006B0  24F3               	addwf	prodl,w,c
   945  0006B2  6ED9               	movwf	fsr2l,c
   946  0006B4  0E00               	movlw	high _channelLevel
   947  0006B6  20F4               	addwfc	prodh,w,c
   948  0006B8  6EDA               	movwf	fsr2h,c
   949  0006BA  5184               	movf	doRank@j& (0+255),w,b
   950  0006BC  0D01               	mullw	1
   951  0006BE  0E2D               	movlw	low _channelLevel
   952  0006C0  24F3               	addwf	prodl,w,c
   953  0006C2  6EE1               	movwf	fsr1l,c
   954  0006C4  0E00               	movlw	high _channelLevel
   955  0006C6  20F4               	addwfc	prodh,w,c
   956  0006C8  6EE2               	movwf	fsr1h,c
   957  0006CA  50DE               	movf	postinc2,w,c
   958  0006CC  5CE6               	subwf	postinc1,w,c
   959  0006CE  B0D8               	btfsc	status,0,c
   960  0006D0  D002               	goto	l203
   961                           
   962                           ; BSR set to: 0
   963                           ;channels.c: 107: channelRank[i]++;
   964  0006D2  5185               	movf	doRank@i& (0+255),w,b
   965  0006D4  D001               	goto	L1
   966  0006D6                     l203:
   967                           
   968                           ; BSR set to: 0
   969                           ;channels.c: 108: else
   970                           ;channels.c: 109: channelRank[j]++;
   971                           
   972                           ; BSR set to: 0
   973  0006D6  5184               	movf	doRank@j& (0+255),w,b
   974  0006D8                     L1:
   975  0006D8  0D01               	mullw	1
   976  0006DA  0E29               	movlw	low _channelRank
   977  0006DC  24F3               	addwf	prodl,w,c
   978  0006DE  6ED9               	movwf	fsr2l,c
   979  0006E0  0E00               	movlw	high _channelRank
   980  0006E2  20F4               	addwfc	prodh,w,c
   981  0006E4  6EDA               	movwf	fsr2h,c
   982  0006E6  2ADF               	incf	indf2,f,c
   983                           
   984                           ; BSR set to: 0
   985                           
   986                           ; BSR set to: 0
   987  0006E8  2B84               	incf	doRank@j& (0+255),f,b
   988  0006EA  D7DB               	goto	L2
   989  0006EC                     u820:
   990                           
   991                           ; BSR set to: 0
   992                           
   993                           ; BSR set to: 0
   994  0006EC  2B85               	incf	doRank@i& (0+255),f,b
   995  0006EE  D7D3               	goto	l1478
   996  0006F0                     __end_of_doRank:
   997                           	opt stack 0
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           prodh	equ	0xFF4
  1003                           prodl	equ	0xFF3
  1004                           intcon	equ	0xFF2
  1005                           intcon2	equ	0xFF1
  1006                           postinc0	equ	0xFEE
  1007                           wreg	equ	0xFE8
  1008                           postinc1	equ	0xFE6
  1009                           fsr1h	equ	0xFE2
  1010                           fsr1l	equ	0xFE1
  1011                           indf2	equ	0xFDF
  1012                           postinc2	equ	0xFDE
  1013                           fsr2h	equ	0xFDA
  1014                           fsr2l	equ	0xFD9
  1015                           status	equ	0xFD8
  1016                           
  1017 ;; *************** function _calculateTimerDiffsAndMask *****************
  1018 ;; Defined at:
  1019 ;;		line 128 in file "channels.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;		None
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  pivot           4   12[BANK0 ] unsigned char [4]
  1024 ;;  sumTimers       2   10[BANK0 ] unsigned int 
  1025 ;;  i               1   17[BANK0 ] unsigned char 
  1026 ;;  i2              1   16[BANK0 ] unsigned char 
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0   BANK1
  1036 ;;      Params:         0       0       0
  1037 ;;      Locals:         0       8       0
  1038 ;;      Temps:          0      10       0
  1039 ;;      Totals:         0      18       0
  1040 ;;Total ram usage:       18 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; Hardware stack levels required when called:    5
  1043 ;; This function calls:
  1044 ;;		Nothing
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           	psect	text6
  1051  0000D4                     __ptext6:
  1052                           	opt stack 0
  1053  0000D4                     _calculateTimerDiffsAndMask:
  1054                           	opt stack 25
  1055                           
  1056                           ;channels.c: 130: unsigned char i;
  1057                           ;channels.c: 131: unsigned char i2;
  1058                           ;channels.c: 132: unsigned int sumTimers;
  1059                           ;channels.c: 134: unsigned char pivot[4];
  1060                           ;channels.c: 136: for (i = 0; i < 4; i++) {
  1061                           
  1062                           ; BSR set to: 0
  1063                           ;incstack = 0
  1064  0000D4  0E00               	movlw	0
  1065  0000D6  0100               	movlb	0	; () banked
  1066  0000D8  6F93               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1067  0000DA                     l1502:
  1068                           
  1069                           ; BSR set to: 0
  1070  0000DA  0E03               	movlw	3
  1071  0000DC  6593               	cpfsgt	calculateTimerDiffsAndMask@i& (0+255),b
  1072  0000DE  D001               	goto	l208
  1073  0000E0  D016               	goto	u850
  1074  0000E2                     l208:
  1075                           
  1076                           ; BSR set to: 0
  1077                           ;channels.c: 137: pivot[channelRank[i]] = i;
  1078                           
  1079                           ; BSR set to: 0
  1080  0000E2  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1081  0000E4  0D01               	mullw	1
  1082  0000E6  0E29               	movlw	low _channelRank
  1083  0000E8  24F3               	addwf	prodl,w,c
  1084  0000EA  6ED9               	movwf	fsr2l,c
  1085  0000EC  0E00               	movlw	high _channelRank
  1086  0000EE  20F4               	addwfc	prodh,w,c
  1087  0000F0  6EDA               	movwf	fsr2h,c
  1088  0000F2  50DF               	movf	indf2,w,c
  1089  0000F4  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1090  0000F6  5182               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1091  0000F8  0D01               	mullw	1
  1092  0000FA  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1093  0000FC  24F3               	addwf	prodl,w,c
  1094  0000FE  6ED9               	movwf	fsr2l,c
  1095  000100  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1096  000102  20F4               	addwfc	prodh,w,c
  1097  000104  6EDA               	movwf	fsr2h,c
  1098  000106  C093  FFDF         	movff	calculateTimerDiffsAndMask@i,indf2
  1099                           
  1100                           ; BSR set to: 0
  1101  00010A  2B93               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1102  00010C  D7E6               	goto	l1502
  1103  00010E                     u850:
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;channels.c: 138: }
  1107                           ;channels.c: 141: syncLock = 1;
  1108                           
  1109                           ; BSR set to: 0
  1110  00010E  0E01               	movlw	1
  1111  000110  6F61               	movwf	_syncLock& (0+255),b	;volatile
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;channels.c: 143: pCIWrite -> numInts = 4;
  1115  000112  C037  FFD9         	movff	_pCIWrite,fsr2l
  1116  000116  C038  FFDA         	movff	_pCIWrite+1,fsr2h
  1117  00011A  0E04               	movlw	4
  1118  00011C  6EDF               	movwf	indf2,c
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;channels.c: 149: pCIWrite -> bitmask[0] = 0x00;
  1122  00011E  EE20 F00B          	lfsr	2,11
  1123  000122  5037               	movf	_pCIWrite,w,c
  1124  000124  26D9               	addwf	fsr2l,f,c
  1125  000126  5038               	movf	_pCIWrite+1,w,c
  1126  000128  22DA               	addwfc	fsr2h,f,c
  1127  00012A  0E00               	movlw	0
  1128  00012C  6EDF               	movwf	indf2,c
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;channels.c: 150: for ( i = 0; i < 4; i++) {
  1132  00012E  0E00               	movlw	0
  1133  000130  6F93               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1134  000132                     l1520:
  1135                           
  1136                           ; BSR set to: 0
  1137  000132  0E03               	movlw	3
  1138  000134  6593               	cpfsgt	calculateTimerDiffsAndMask@i& (0+255),b
  1139  000136  D001               	goto	l210
  1140  000138  D026               	goto	u890
  1141  00013A                     l210:
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;channels.c: 151: if ( channelLevel[i] > 0)
  1145                           
  1146                           ; BSR set to: 0
  1147  00013A  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1148  00013C  0D01               	mullw	1
  1149  00013E  0E2D               	movlw	low _channelLevel
  1150  000140  24F3               	addwf	prodl,w,c
  1151  000142  6ED9               	movwf	fsr2l,c
  1152  000144  0E00               	movlw	high _channelLevel
  1153  000146  20F4               	addwfc	prodh,w,c
  1154  000148  6EDA               	movwf	fsr2h,c
  1155  00014A  50DF               	movf	indf2,w,c
  1156  00014C  B4D8               	btfsc	status,2,c
  1157  00014E  D014               	goto	l212
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;channels.c: 152: pCIWrite -> bitmask[0] |= (1 << i);
  1161  000150  C093  F082         	movff	calculateTimerDiffsAndMask@i,??_calculateTimerDiffsAndMask
  1162  000154  0E01               	movlw	1
  1163  000156  6F83               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1164  000158  2B82               	incf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1165  00015A  D002               	goto	u884
  1166  00015C                     u885:
  1167  00015C  90D8               	bcf	status,0,c
  1168  00015E  3783               	rlcf	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1169  000160                     u884:
  1170  000160  2F82               	decfsz	??_calculateTimerDiffsAndMask& (0+255),f,b
  1171  000162  D7FC               	goto	u885
  1172  000164  EE20 F00B          	lfsr	2,11
  1173  000168  5037               	movf	_pCIWrite,w,c
  1174  00016A  26D9               	addwf	fsr2l,f,c
  1175  00016C  5038               	movf	_pCIWrite+1,w,c
  1176  00016E  22DA               	addwfc	fsr2h,f,c
  1177  000170  0100               	movlb	0	; () banked
  1178  000172  5183               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1179  000174  12DF               	iorwf	indf2,f,c
  1180  000176  D005               	goto	l213
  1181  000178                     l212:
  1182                           
  1183                           ; BSR set to: 0
  1184                           ;channels.c: 153: else {
  1185                           ;channels.c: 154: pCIWrite -> numInts--;
  1186                           
  1187                           ; BSR set to: 0
  1188  000178  C037  FFD9         	movff	_pCIWrite,fsr2l
  1189  00017C  C038  FFDA         	movff	_pCIWrite+1,fsr2h
  1190  000180  06DF               	decf	indf2,f,c
  1191  000182                     l213:
  1192                           
  1193                           ; BSR set to: 0
  1194                           
  1195                           ; BSR set to: 0
  1196  000182  2B93               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1197  000184  D7D6               	goto	l1520
  1198  000186                     u890:
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;channels.c: 155: }
  1202                           ;channels.c: 156: }
  1203                           ;channels.c: 162: i2 = 0;
  1204                           
  1205                           ; BSR set to: 0
  1206  000186  0E00               	movlw	0
  1207  000188  6F92               	movwf	calculateTimerDiffsAndMask@i2& (0+255),b
  1208                           
  1209                           ;channels.c: 163: for ( i = 0; i < 4; i++) {
  1210  00018A  0E00               	movlw	0
  1211  00018C  6F93               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1212  00018E                     l1536:
  1213                           
  1214                           ; BSR set to: 0
  1215  00018E  0E03               	movlw	3
  1216  000190  6593               	cpfsgt	calculateTimerDiffsAndMask@i& (0+255),b
  1217  000192  D001               	goto	l214
  1218  000194  D116               	goto	u970
  1219  000196                     l214:
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;channels.c: 165: if ( channelLevel[pivot[i]] == 0) {
  1223                           
  1224                           ; BSR set to: 0
  1225  000196  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1226  000198  0D01               	mullw	1
  1227  00019A  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1228  00019C  24F3               	addwf	prodl,w,c
  1229  00019E  6ED9               	movwf	fsr2l,c
  1230  0001A0  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1231  0001A2  20F4               	addwfc	prodh,w,c
  1232  0001A4  6EDA               	movwf	fsr2h,c
  1233  0001A6  50DF               	movf	indf2,w,c
  1234  0001A8  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1235  0001AA  5182               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1236  0001AC  0D01               	mullw	1
  1237  0001AE  0E2D               	movlw	low _channelLevel
  1238  0001B0  24F3               	addwf	prodl,w,c
  1239  0001B2  6ED9               	movwf	fsr2l,c
  1240  0001B4  0E00               	movlw	high _channelLevel
  1241  0001B6  20F4               	addwfc	prodh,w,c
  1242  0001B8  6EDA               	movwf	fsr2h,c
  1243  0001BA  50DF               	movf	indf2,w,c
  1244  0001BC  B4D8               	btfsc	status,2,c
  1245  0001BE  D0FF               	goto	l217
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;channels.c: 167: }
  1249                           ;channels.c: 169: if ( i == 0 ) {
  1250                           
  1251                           ; BSR set to: 0
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;channels.c: 166: continue;
  1255  0001C0  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1256  0001C2  A4D8               	btfss	status,2,c
  1257  0001C4  D027               	goto	l218
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;channels.c: 170: pCIWrite -> timer[i2] = channelLevel[pivot[i]] * 16;
  1261  0001C6  5192               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1262  0001C8  0D02               	mullw	2
  1263  0001CA  0E01               	movlw	1
  1264  0001CC  26F3               	addwf	prodl,f,c
  1265  0001CE  0E00               	movlw	0
  1266  0001D0  22F4               	addwfc	prodh,f,c
  1267  0001D2  50F3               	movf	prodl,w,c
  1268  0001D4  2437               	addwf	_pCIWrite,w,c
  1269  0001D6  6ED9               	movwf	fsr2l,c
  1270  0001D8  50F4               	movf	prodh,w,c
  1271  0001DA  2038               	addwfc	_pCIWrite+1,w,c
  1272  0001DC  6EDA               	movwf	fsr2h,c
  1273  0001DE  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1274  0001E0  0D01               	mullw	1
  1275  0001E2  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1276  0001E4  24F3               	addwf	prodl,w,c
  1277  0001E6  6EE1               	movwf	fsr1l,c
  1278  0001E8  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1279  0001EA  20F4               	addwfc	prodh,w,c
  1280  0001EC  6EE2               	movwf	fsr1h,c
  1281  0001EE  50E7               	movf	indf1,w,c
  1282  0001F0  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1283  0001F2  5182               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1284  0001F4  0D01               	mullw	1
  1285  0001F6  0E2D               	movlw	low _channelLevel
  1286  0001F8  24F3               	addwf	prodl,w,c
  1287  0001FA  6EE1               	movwf	fsr1l,c
  1288  0001FC  0E00               	movlw	high _channelLevel
  1289  0001FE  20F4               	addwfc	prodh,w,c
  1290  000200  6EE2               	movwf	fsr1h,c
  1291  000202  50E7               	movf	indf1,w,c
  1292  000204  6F83               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1293  000206  5183               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1294  000208  0D10               	mullw	16
  1295  00020A  CFF3 FFDE          	movff	prodl,postinc2
  1296  00020E  CFF4 FFDD          	movff	prodh,postdec2
  1297                           
  1298                           ;channels.c: 171: }
  1299  000212  D054               	goto	l219
  1300  000214                     l218:
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;channels.c: 172: else {
  1304                           ;channels.c: 173: pCIWrite -> timer[i2] = (channelLevel[pivot[i]] - channelLevel[pivot[i
      +                          -1]]) * 16;
  1305                           
  1306                           ; BSR set to: 0
  1307  000214  0EFF               	movlw	255
  1308  000216  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1309  000218  0EFF               	movlw	255
  1310  00021A  6F83               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1311  00021C  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1312  00021E  6F84               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1313  000220  6B85               	clrf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1314  000222  5182               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1315  000224  2784               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1316  000226  5183               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1317  000228  2385               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1318  00022A  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1319  00022C  2584               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),w,b
  1320  00022E  6ED9               	movwf	fsr2l,c
  1321  000230  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1322  000232  2185               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1323  000234  6EDA               	movwf	fsr2h,c
  1324  000236  50DF               	movf	indf2,w,c
  1325  000238  6F86               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1326  00023A  5186               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1327  00023C  0D01               	mullw	1
  1328  00023E  0E2D               	movlw	low _channelLevel
  1329  000240  24F3               	addwf	prodl,w,c
  1330  000242  6ED9               	movwf	fsr2l,c
  1331  000244  0E00               	movlw	high _channelLevel
  1332  000246  20F4               	addwfc	prodh,w,c
  1333  000248  6EDA               	movwf	fsr2h,c
  1334  00024A  50DF               	movf	indf2,w,c
  1335  00024C  6F87               	movwf	(??_calculateTimerDiffsAndMask+5)& (0+255),b
  1336  00024E  6B88               	clrf	(??_calculateTimerDiffsAndMask+6)& (0+255),b
  1337  000250  1F87               	comf	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1338  000252  1F88               	comf	(??_calculateTimerDiffsAndMask+6)& (0+255),f,b
  1339  000254  4B87               	infsnz	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1340  000256  2B88               	incf	(??_calculateTimerDiffsAndMask+6)& (0+255),f,b
  1341  000258  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1342  00025A  0D01               	mullw	1
  1343  00025C  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1344  00025E  24F3               	addwf	prodl,w,c
  1345  000260  6ED9               	movwf	fsr2l,c
  1346  000262  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1347  000264  20F4               	addwfc	prodh,w,c
  1348  000266  6EDA               	movwf	fsr2h,c
  1349  000268  50DF               	movf	indf2,w,c
  1350  00026A  6F89               	movwf	(??_calculateTimerDiffsAndMask+7)& (0+255),b
  1351  00026C  5189               	movf	(??_calculateTimerDiffsAndMask+7)& (0+255),w,b
  1352  00026E  0D01               	mullw	1
  1353  000270  0E2D               	movlw	low _channelLevel
  1354  000272  24F3               	addwf	prodl,w,c
  1355  000274  6ED9               	movwf	fsr2l,c
  1356  000276  0E00               	movlw	high _channelLevel
  1357  000278  20F4               	addwfc	prodh,w,c
  1358  00027A  6EDA               	movwf	fsr2h,c
  1359  00027C  50DF               	movf	indf2,w,c
  1360  00027E  6F8A               	movwf	(??_calculateTimerDiffsAndMask+8)& (0+255),b
  1361  000280  6B8B               	clrf	(??_calculateTimerDiffsAndMask+9)& (0+255),b
  1362  000282  5187               	movf	(??_calculateTimerDiffsAndMask+5)& (0+255),w,b
  1363  000284  278A               	addwf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1364  000286  5188               	movf	(??_calculateTimerDiffsAndMask+6)& (0+255),w,b
  1365  000288  238B               	addwfc	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1366  00028A  3B8A               	swapf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1367  00028C  3B8B               	swapf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1368  00028E  0EF0               	movlw	240
  1369  000290  178B               	andwf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1370  000292  518A               	movf	(??_calculateTimerDiffsAndMask+8)& (0+255),w,b
  1371  000294  0B0F               	andlw	15
  1372  000296  138B               	iorwf	(??_calculateTimerDiffsAndMask+9)& (0+255),f,b
  1373  000298  0EF0               	movlw	240
  1374  00029A  178A               	andwf	(??_calculateTimerDiffsAndMask+8)& (0+255),f,b
  1375  00029C  5192               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1376  00029E  0D02               	mullw	2
  1377  0002A0  0E01               	movlw	1
  1378  0002A2  26F3               	addwf	prodl,f,c
  1379  0002A4  0E00               	movlw	0
  1380  0002A6  22F4               	addwfc	prodh,f,c
  1381  0002A8  50F3               	movf	prodl,w,c
  1382  0002AA  2437               	addwf	_pCIWrite,w,c
  1383  0002AC  6ED9               	movwf	fsr2l,c
  1384  0002AE  50F4               	movf	prodh,w,c
  1385  0002B0  2038               	addwfc	_pCIWrite+1,w,c
  1386  0002B2  6EDA               	movwf	fsr2h,c
  1387  0002B4  C08A  FFDE         	movff	??_calculateTimerDiffsAndMask+8,postinc2
  1388  0002B8  C08B  FFDD         	movff	??_calculateTimerDiffsAndMask+9,postdec2
  1389  0002BC                     l219:
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;channels.c: 174: }
  1393                           ;channels.c: 176: pCIWrite -> bitmask[i2+1] = (1 << pivot[i]);
  1394                           
  1395                           ; BSR set to: 0
  1396  0002BC  5192               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1397  0002BE  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1398  0002C0  6B83               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1399  0002C2  0E0C               	movlw	12
  1400  0002C4  2782               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1401  0002C6  0E00               	movlw	0
  1402  0002C8  2383               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1403  0002CA  5182               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1404  0002CC  2437               	addwf	_pCIWrite,w,c
  1405  0002CE  6ED9               	movwf	fsr2l,c
  1406  0002D0  5183               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1407  0002D2  2038               	addwfc	_pCIWrite+1,w,c
  1408  0002D4  6EDA               	movwf	fsr2h,c
  1409  0002D6  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1410  0002D8  0D01               	mullw	1
  1411  0002DA  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1412  0002DC  24F3               	addwf	prodl,w,c
  1413  0002DE  6EE1               	movwf	fsr1l,c
  1414  0002E0  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1415  0002E2  20F4               	addwfc	prodh,w,c
  1416  0002E4  6EE2               	movwf	fsr1h,c
  1417  0002E6  50E7               	movf	indf1,w,c
  1418  0002E8  6F84               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1419  0002EA  0E01               	movlw	1
  1420  0002EC  6F85               	movwf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1421  0002EE  2B84               	incf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1422  0002F0  D002               	goto	u934
  1423  0002F2                     u935:
  1424  0002F2  90D8               	bcf	status,0,c
  1425  0002F4  3785               	rlcf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1426  0002F6                     u934:
  1427  0002F6  2F84               	decfsz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1428  0002F8  D7FC               	goto	u935
  1429  0002FA  0100               	movlb	0	; () banked
  1430  0002FC  5185               	movf	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1431  0002FE  6EDF               	movwf	indf2,c
  1432                           
  1433                           ;channels.c: 182: while ((i < (4 - 1)) && (channelLevel[pivot[i]] == channelLevel[pivot[
      +                          i+1]] ) ) {
  1434  000300  D02D               	goto	l220
  1435  000302                     
  1436                           ; BSR set to: 0
  1437                           ;channels.c: 183: pCIWrite -> bitmask[i2+1] |= (1 << pivot[i+1]);
  1438                           
  1439                           ; BSR set to: 0
  1440  000302  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1441  000304  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1442  000306  6B83               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1443  000308  0E01               	movlw	1
  1444  00030A  2782               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1445  00030C  0E00               	movlw	0
  1446  00030E  2383               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1447  000310  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1448  000312  2582               	addwf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1449  000314  6ED9               	movwf	fsr2l,c
  1450  000316  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1451  000318  2183               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1452  00031A  6EDA               	movwf	fsr2h,c
  1453  00031C  50DF               	movf	indf2,w,c
  1454  00031E  6F84               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1455  000320  0E01               	movlw	1
  1456  000322  6F85               	movwf	(??_calculateTimerDiffsAndMask+3)& (0+255),b
  1457  000324  2B84               	incf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1458  000326  D002               	goto	u944
  1459  000328                     u945:
  1460  000328  90D8               	bcf	status,0,c
  1461  00032A  3785               	rlcf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1462  00032C                     u944:
  1463  00032C  2F84               	decfsz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1464  00032E  D7FC               	goto	u945
  1465  000330  0100               	movlb	0	; () banked
  1466  000332  5192               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1467  000334  6F86               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1468  000336  6B87               	clrf	(??_calculateTimerDiffsAndMask+5)& (0+255),b
  1469  000338  0E0C               	movlw	12
  1470  00033A  2786               	addwf	(??_calculateTimerDiffsAndMask+4)& (0+255),f,b
  1471  00033C  0E00               	movlw	0
  1472  00033E  2387               	addwfc	(??_calculateTimerDiffsAndMask+5)& (0+255),f,b
  1473  000340  5186               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1474  000342  2437               	addwf	_pCIWrite,w,c
  1475  000344  6ED9               	movwf	fsr2l,c
  1476  000346  5187               	movf	(??_calculateTimerDiffsAndMask+5)& (0+255),w,b
  1477  000348  2038               	addwfc	_pCIWrite+1,w,c
  1478  00034A  6EDA               	movwf	fsr2h,c
  1479  00034C  5185               	movf	(??_calculateTimerDiffsAndMask+3)& (0+255),w,b
  1480  00034E  12DF               	iorwf	indf2,f,c
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;channels.c: 184: i++;
  1484  000350  2B93               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;channels.c: 185: pCIWrite -> numInts--;
  1488  000352  C037  FFD9         	movff	_pCIWrite,fsr2l
  1489  000356  C038  FFDA         	movff	_pCIWrite+1,fsr2h
  1490  00035A  06DF               	decf	indf2,f,c
  1491  00035C                     l220:
  1492                           
  1493                           ; BSR set to: 0
  1494  00035C  0E03               	movlw	3
  1495  00035E  6193               	cpfslt	calculateTimerDiffsAndMask@i& (0+255),b
  1496  000360  D02D               	goto	u960
  1497                           
  1498                           ; BSR set to: 0
  1499  000362  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1500  000364  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1501  000366  6B83               	clrf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1502  000368  0E01               	movlw	1
  1503  00036A  2782               	addwf	??_calculateTimerDiffsAndMask& (0+255),f,b
  1504  00036C  0E00               	movlw	0
  1505  00036E  2383               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),f,b
  1506  000370  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1507  000372  2582               	addwf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1508  000374  6ED9               	movwf	fsr2l,c
  1509  000376  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1510  000378  2183               	addwfc	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1511  00037A  6EDA               	movwf	fsr2h,c
  1512  00037C  50DF               	movf	indf2,w,c
  1513  00037E  6F84               	movwf	(??_calculateTimerDiffsAndMask+2)& (0+255),b
  1514  000380  5184               	movf	(??_calculateTimerDiffsAndMask+2)& (0+255),w,b
  1515  000382  0D01               	mullw	1
  1516  000384  0E2D               	movlw	low _channelLevel
  1517  000386  24F3               	addwf	prodl,w,c
  1518  000388  6ED9               	movwf	fsr2l,c
  1519  00038A  0E00               	movlw	high _channelLevel
  1520  00038C  20F4               	addwfc	prodh,w,c
  1521  00038E  6EDA               	movwf	fsr2h,c
  1522  000390  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1523  000392  0D01               	mullw	1
  1524  000394  0E8E               	movlw	low calculateTimerDiffsAndMask@pivot
  1525  000396  24F3               	addwf	prodl,w,c
  1526  000398  6EE1               	movwf	fsr1l,c
  1527  00039A  0E00               	movlw	high calculateTimerDiffsAndMask@pivot
  1528  00039C  20F4               	addwfc	prodh,w,c
  1529  00039E  6EE2               	movwf	fsr1h,c
  1530  0003A0  50E7               	movf	indf1,w,c
  1531  0003A2  6F86               	movwf	(??_calculateTimerDiffsAndMask+4)& (0+255),b
  1532  0003A4  5186               	movf	(??_calculateTimerDiffsAndMask+4)& (0+255),w,b
  1533  0003A6  0D01               	mullw	1
  1534  0003A8  0E2D               	movlw	low _channelLevel
  1535  0003AA  24F3               	addwf	prodl,w,c
  1536  0003AC  6EE1               	movwf	fsr1l,c
  1537  0003AE  0E00               	movlw	high _channelLevel
  1538  0003B0  20F4               	addwfc	prodh,w,c
  1539  0003B2  6EE2               	movwf	fsr1h,c
  1540  0003B4  50DE               	movf	postinc2,w,c
  1541  0003B6  18E6               	xorwf	postinc1,w,c
  1542  0003B8  B4D8               	btfsc	status,2,c
  1543  0003BA  D7A3               	goto	l221
  1544  0003BC                     u960:
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;channels.c: 186: }
  1548                           ;channels.c: 188: i2++;
  1549                           
  1550                           ; BSR set to: 0
  1551                           
  1552                           ; BSR set to: 0
  1553  0003BC  2B92               	incf	calculateTimerDiffsAndMask@i2& (0+255),f,b
  1554  0003BE                     l217:
  1555                           
  1556                           ; BSR set to: 0
  1557  0003BE  2B93               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1558  0003C0  D6E6               	goto	l1536
  1559  0003C2                     u970:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;channels.c: 189: }
  1563                           ;channels.c: 195: sumTimers = 0;
  1564                           
  1565                           ; BSR set to: 0
  1566  0003C2  0E00               	movlw	0
  1567  0003C4  6F8D               	movwf	(calculateTimerDiffsAndMask@sumTimers+1)& (0+255),b
  1568  0003C6  0E00               	movlw	0
  1569  0003C8  6F8C               	movwf	calculateTimerDiffsAndMask@sumTimers& (0+255),b
  1570                           
  1571                           ;channels.c: 196: for ( i = 0; i < i2; i++) {
  1572  0003CA  0E00               	movlw	0
  1573  0003CC  6F93               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1574  0003CE  D011               	goto	l225
  1575  0003D0                     
  1576                           ; BSR set to: 0
  1577                           ;channels.c: 197: sumTimers += pCIWrite -> timer[i];
  1578                           
  1579                           ; BSR set to: 0
  1580  0003D0  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1581  0003D2  0D02               	mullw	2
  1582  0003D4  0E01               	movlw	1
  1583  0003D6  26F3               	addwf	prodl,f,c
  1584  0003D8  0E00               	movlw	0
  1585  0003DA  22F4               	addwfc	prodh,f,c
  1586  0003DC  50F3               	movf	prodl,w,c
  1587  0003DE  2437               	addwf	_pCIWrite,w,c
  1588  0003E0  6ED9               	movwf	fsr2l,c
  1589  0003E2  50F4               	movf	prodh,w,c
  1590  0003E4  2038               	addwfc	_pCIWrite+1,w,c
  1591  0003E6  6EDA               	movwf	fsr2h,c
  1592  0003E8  50DE               	movf	postinc2,w,c
  1593  0003EA  278C               	addwf	calculateTimerDiffsAndMask@sumTimers& (0+255),f,b
  1594  0003EC  50DD               	movf	postdec2,w,c
  1595  0003EE  238D               	addwfc	(calculateTimerDiffsAndMask@sumTimers+1)& (0+255),f,b
  1596                           
  1597                           ; BSR set to: 0
  1598  0003F0  2B93               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1599  0003F2                     l225:
  1600                           
  1601                           ; BSR set to: 0
  1602                           
  1603                           ; BSR set to: 0
  1604  0003F2  5192               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1605  0003F4  5D93               	subwf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1606  0003F6  A0D8               	btfss	status,0,c
  1607  0003F8  D7EB               	goto	l226
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;channels.c: 198: }
  1611                           ;channels.c: 200: pCIWrite -> timer[i2] = (0x00ff * 16) - sumTimers;
  1612                           
  1613                           ; BSR set to: 0
  1614  0003FA  0EF0               	movlw	240
  1615  0003FC  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1616  0003FE  0E0F               	movlw	15
  1617  000400  6F83               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1618  000402  C08C  F084         	movff	calculateTimerDiffsAndMask@sumTimers,??_calculateTimerDiffsAndMask+2
  1619  000406  C08D  F085         	movff	calculateTimerDiffsAndMask@sumTimers+1,??_calculateTimerDiffsAndMask+3
  1620  00040A  1F84               	comf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1621  00040C  1F85               	comf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1622  00040E  4B84               	infsnz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1623  000410  2B85               	incf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1624  000412  5182               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1625  000414  2784               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1626  000416  5183               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1627  000418  2385               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1628  00041A  5192               	movf	calculateTimerDiffsAndMask@i2& (0+255),w,b
  1629  00041C  0D02               	mullw	2
  1630  00041E  0E01               	movlw	1
  1631  000420  26F3               	addwf	prodl,f,c
  1632  000422  0E00               	movlw	0
  1633  000424  22F4               	addwfc	prodh,f,c
  1634  000426  50F3               	movf	prodl,w,c
  1635  000428  2437               	addwf	_pCIWrite,w,c
  1636  00042A  6ED9               	movwf	fsr2l,c
  1637  00042C  50F4               	movf	prodh,w,c
  1638  00042E  2038               	addwfc	_pCIWrite+1,w,c
  1639  000430  6EDA               	movwf	fsr2h,c
  1640  000432  C084  FFDE         	movff	??_calculateTimerDiffsAndMask+2,postinc2
  1641  000436  C085  FFDD         	movff	??_calculateTimerDiffsAndMask+3,postdec2
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;channels.c: 202: for ( i = 0; i < 4 + 1; i++) {
  1645  00043A  0E00               	movlw	0
  1646  00043C  6F93               	movwf	calculateTimerDiffsAndMask@i& (0+255),b
  1647  00043E                     l1576:
  1648                           
  1649                           ; BSR set to: 0
  1650  00043E  0E04               	movlw	4
  1651  000440  6593               	cpfsgt	calculateTimerDiffsAndMask@i& (0+255),b
  1652  000442  D001               	goto	l228
  1653  000444  D02E               	goto	u1000
  1654  000446                     l228:
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;channels.c: 203: pCIWrite -> timer[i] = 0xFFFF - pCIWrite -> timer[i];
  1658                           
  1659                           ; BSR set to: 0
  1660  000446  0EFF               	movlw	255
  1661  000448  6F82               	movwf	??_calculateTimerDiffsAndMask& (0+255),b
  1662  00044A  0EFF               	movlw	255
  1663  00044C  6F83               	movwf	(??_calculateTimerDiffsAndMask+1)& (0+255),b
  1664  00044E  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1665  000450  0D02               	mullw	2
  1666  000452  0E01               	movlw	1
  1667  000454  26F3               	addwf	prodl,f,c
  1668  000456  0E00               	movlw	0
  1669  000458  22F4               	addwfc	prodh,f,c
  1670  00045A  50F3               	movf	prodl,w,c
  1671  00045C  2437               	addwf	_pCIWrite,w,c
  1672  00045E  6ED9               	movwf	fsr2l,c
  1673  000460  50F4               	movf	prodh,w,c
  1674  000462  2038               	addwfc	_pCIWrite+1,w,c
  1675  000464  6EDA               	movwf	fsr2h,c
  1676  000466  CFDE F084          	movff	postinc2,??_calculateTimerDiffsAndMask+2
  1677  00046A  CFDD F085          	movff	postdec2,??_calculateTimerDiffsAndMask+3
  1678  00046E  1F84               	comf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1679  000470  1F85               	comf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1680  000472  4B84               	infsnz	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1681  000474  2B85               	incf	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1682  000476  5182               	movf	??_calculateTimerDiffsAndMask& (0+255),w,b
  1683  000478  2784               	addwf	(??_calculateTimerDiffsAndMask+2)& (0+255),f,b
  1684  00047A  5183               	movf	(??_calculateTimerDiffsAndMask+1)& (0+255),w,b
  1685  00047C  2385               	addwfc	(??_calculateTimerDiffsAndMask+3)& (0+255),f,b
  1686  00047E  5193               	movf	calculateTimerDiffsAndMask@i& (0+255),w,b
  1687  000480  0D02               	mullw	2
  1688  000482  0E01               	movlw	1
  1689  000484  26F3               	addwf	prodl,f,c
  1690  000486  0E00               	movlw	0
  1691  000488  22F4               	addwfc	prodh,f,c
  1692  00048A  50F3               	movf	prodl,w,c
  1693  00048C  2437               	addwf	_pCIWrite,w,c
  1694  00048E  6ED9               	movwf	fsr2l,c
  1695  000490  50F4               	movf	prodh,w,c
  1696  000492  2038               	addwfc	_pCIWrite+1,w,c
  1697  000494  6EDA               	movwf	fsr2h,c
  1698  000496  C084  FFDE         	movff	??_calculateTimerDiffsAndMask+2,postinc2
  1699  00049A  C085  FFDD         	movff	??_calculateTimerDiffsAndMask+3,postdec2
  1700                           
  1701                           ; BSR set to: 0
  1702  00049E  2B93               	incf	calculateTimerDiffsAndMask@i& (0+255),f,b
  1703  0004A0  D7CE               	goto	l1576
  1704  0004A2                     u1000:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;channels.c: 204: }
  1708                           ;channels.c: 206: syncLock = 0;
  1709                           
  1710                           ; BSR set to: 0
  1711  0004A2  0E00               	movlw	0
  1712  0004A4  6F61               	movwf	_syncLock& (0+255),b	;volatile
  1713                           
  1714                           ;channels.c: 207: updated = 1;
  1715  0004A6  0E01               	movlw	1
  1716  0004A8  6F60               	movwf	_updated& (0+255),b	;volatile
  1717                           
  1718                           ; BSR set to: 0
  1719  0004AA  0012               	return		;funcret
  1720  0004AC                     __end_of_calculateTimerDiffsAndMask:
  1721                           	opt stack 0
  1722                           tblptru	equ	0xFF8
  1723                           tblptrh	equ	0xFF7
  1724                           tblptrl	equ	0xFF6
  1725                           tablat	equ	0xFF5
  1726                           prodh	equ	0xFF4
  1727                           prodl	equ	0xFF3
  1728                           intcon	equ	0xFF2
  1729                           intcon2	equ	0xFF1
  1730                           postinc0	equ	0xFEE
  1731                           wreg	equ	0xFE8
  1732                           indf1	equ	0xFE7
  1733                           postinc1	equ	0xFE6
  1734                           fsr1h	equ	0xFE2
  1735                           fsr1l	equ	0xFE1
  1736                           indf2	equ	0xFDF
  1737                           postinc2	equ	0xFDE
  1738                           postdec2	equ	0xFDD
  1739                           fsr2h	equ	0xFDA
  1740                           fsr2l	equ	0xFD9
  1741                           status	equ	0xFD8
  1742                           
  1743 ;; *************** function _low_isr *****************
  1744 ;; Defined at:
  1745 ;;		line 31 in file "interrupts.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;		None
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;		None
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1
  1759 ;;      Params:         0       0       0
  1760 ;;      Locals:         0       0       0
  1761 ;;      Temps:         21       0       0
  1762 ;;      Totals:        21       0       0
  1763 ;;Total ram usage:       21 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    4
  1766 ;; This function calls:
  1767 ;;		_handleDMX
  1768 ;; This function is called by:
  1769 ;;		Interrupt level 1
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772                           
  1773                           	psect	intcodelo
  1774  000018                     __pintcodelo:
  1775                           	opt stack 0
  1776  000018                     _low_isr:
  1777                           	opt stack 25
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;incstack = 0
  1781  000018  8048               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1782  00001A  CFD8 F014          	movff	status,??_low_isr
  1783  00001E  CFE8 F015          	movff	wreg,??_low_isr+1
  1784  000022  CFE0 F016          	movff	bsr,??_low_isr+2
  1785  000026  CFFA F017          	movff	pclath,??_low_isr+3
  1786  00002A  CFFB F018          	movff	pclatu,??_low_isr+4
  1787  00002E  CFE9 F019          	movff	fsr0l,??_low_isr+5
  1788  000032  CFEA F01A          	movff	fsr0h,??_low_isr+6
  1789  000036  CFE1 F01B          	movff	fsr1l,??_low_isr+7
  1790  00003A  CFE2 F01C          	movff	fsr1h,??_low_isr+8
  1791  00003E  CFD9 F01D          	movff	fsr2l,??_low_isr+9
  1792  000042  CFDA F01E          	movff	fsr2h,??_low_isr+10
  1793  000046  CFF3 F01F          	movff	prodl,??_low_isr+11
  1794  00004A  CFF4 F020          	movff	prodh,??_low_isr+12
  1795  00004E  CFF6 F021          	movff	tblptrl,??_low_isr+13
  1796  000052  CFF7 F022          	movff	tblptrh,??_low_isr+14
  1797  000056  CFF8 F023          	movff	tblptru,??_low_isr+15
  1798  00005A  CFF5 F024          	movff	tablat,??_low_isr+16
  1799  00005E  C048  F025         	movff	btemp,??_low_isr+17
  1800  000062  C049  F026         	movff	btemp+1,??_low_isr+18
  1801  000066  C04A  F027         	movff	btemp+2,??_low_isr+19
  1802  00006A  C04B  F028         	movff	btemp+3,??_low_isr+20
  1803                           
  1804                           ;interrupts.c: 37: if (PIR1bits.RCIF == 1) {
  1805  00006E  AA9E               	btfss	3998,5,c	;volatile
  1806  000070  D003               	goto	i1l19
  1807                           
  1808                           ;interrupts.c: 38: handleDMX();
  1809  000072  ECA5  F002         	call	_handleDMX	;wreg free
  1810                           
  1811                           ;interrupts.c: 39: PIR1bits.RCIF = 0;
  1812  000076  9A9E               	bcf	3998,5,c	;volatile
  1813  000078                     i1l19:
  1814  000078  C028  F04B         	movff	??_low_isr+20,btemp+3
  1815  00007C  C027  F04A         	movff	??_low_isr+19,btemp+2
  1816  000080  C026  F049         	movff	??_low_isr+18,btemp+1
  1817  000084  C025  F048         	movff	??_low_isr+17,btemp
  1818  000088  C024  FFF5         	movff	??_low_isr+16,tablat
  1819  00008C  C023  FFF8         	movff	??_low_isr+15,tblptru
  1820  000090  C022  FFF7         	movff	??_low_isr+14,tblptrh
  1821  000094  C021  FFF6         	movff	??_low_isr+13,tblptrl
  1822  000098  C020  FFF4         	movff	??_low_isr+12,prodh
  1823  00009C  C01F  FFF3         	movff	??_low_isr+11,prodl
  1824  0000A0  C01E  FFDA         	movff	??_low_isr+10,fsr2h
  1825  0000A4  C01D  FFD9         	movff	??_low_isr+9,fsr2l
  1826  0000A8  C01C  FFE2         	movff	??_low_isr+8,fsr1h
  1827  0000AC  C01B  FFE1         	movff	??_low_isr+7,fsr1l
  1828  0000B0  C01A  FFEA         	movff	??_low_isr+6,fsr0h
  1829  0000B4  C019  FFE9         	movff	??_low_isr+5,fsr0l
  1830  0000B8  C018  FFFB         	movff	??_low_isr+4,pclatu
  1831  0000BC  C017  FFFA         	movff	??_low_isr+3,pclath
  1832  0000C0  C016  FFE0         	movff	??_low_isr+2,bsr
  1833  0000C4  C015  FFE8         	movff	??_low_isr+1,wreg
  1834  0000C8  C014  FFD8         	movff	??_low_isr,status
  1835  0000CC  9048               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1836  0000CE  0010               	retfie	
  1837  0000D0                     __end_of_low_isr:
  1838                           	opt stack 0
  1839                           pclatu	equ	0xFFB
  1840                           pclath	equ	0xFFA
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           prodh	equ	0xFF4
  1846                           prodl	equ	0xFF3
  1847                           intcon	equ	0xFF2
  1848                           intcon2	equ	0xFF1
  1849                           postinc0	equ	0xFEE
  1850                           fsr0h	equ	0xFEA
  1851                           fsr0l	equ	0xFE9
  1852                           wreg	equ	0xFE8
  1853                           indf1	equ	0xFE7
  1854                           postinc1	equ	0xFE6
  1855                           fsr1h	equ	0xFE2
  1856                           fsr1l	equ	0xFE1
  1857                           bsr	equ	0xFE0
  1858                           indf2	equ	0xFDF
  1859                           postinc2	equ	0xFDE
  1860                           postdec2	equ	0xFDD
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865 ;; *************** function _handleDMX *****************
  1866 ;; Defined at:
  1867 ;;		line 60 in file "dmx.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1
  1881 ;;      Params:         0       0       0
  1882 ;;      Locals:         0       0       0
  1883 ;;      Temps:          0       0       0
  1884 ;;      Totals:         0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    3
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_low_isr
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text8
  1896  00054A                     __ptext8:
  1897                           	opt stack 0
  1898  00054A                     _handleDMX:
  1899                           	opt stack 25
  1900                           
  1901                           ;dmx.c: 65: errflag = FERR;
  1902                           
  1903                           ;incstack = 0
  1904  00054A  0E00               	movlw	0
  1905  00054C  B4AB               	btfsc	4011,2,c	;volatile
  1906  00054E  0E01               	movlw	1
  1907  000550  6E3F               	movwf	_errflag,c
  1908                           
  1909                           ;dmx.c: 70: received = RCREG;
  1910  000552  CFAE F03E          	movff	4014,_received	;volatile
  1911                           
  1912                           ;dmx.c: 72: if ((errflag == 1) && ( dmxState == 0x00) ) {
  1913  000556  043F               	decf	_errflag,w,c
  1914  000558  A4D8               	btfss	status,2,c
  1915  00055A  D00A               	goto	i1l276
  1916  00055C  5040               	movf	_dmxState,w,c
  1917  00055E  A4D8               	btfss	status,2,c
  1918  000560  D007               	goto	i1l276
  1919                           
  1920                           ;dmx.c: 73: currentAdress = 0;
  1921  000562  0E00               	movlw	0
  1922  000564  6E32               	movwf	_currentAdress+1,c
  1923  000566  0E00               	movlw	0
  1924  000568  6E31               	movwf	_currentAdress,c
  1925                           
  1926                           ;dmx.c: 74: dmxState = 0x01;
  1927  00056A  0E01               	movlw	1
  1928  00056C  6E40               	movwf	_dmxState,c
  1929                           
  1930                           ;dmx.c: 75: return;
  1931  00056E  0012               	return	
  1932  000570                     i1l276:
  1933                           
  1934                           ;dmx.c: 76: }
  1935                           ;dmx.c: 78: if ( (dmxState == 0x01) && (received == 0x00)) {
  1936  000570  0440               	decf	_dmxState,w,c
  1937  000572  A4D8               	btfss	status,2,c
  1938  000574  D006               	goto	i1l278
  1939  000576  503E               	movf	_received,w,c
  1940  000578  A4D8               	btfss	status,2,c
  1941  00057A  D003               	goto	i1l278
  1942                           
  1943                           ;dmx.c: 80: dmxState = 0x02;
  1944  00057C  0E02               	movlw	2
  1945  00057E  6E40               	movwf	_dmxState,c
  1946                           
  1947                           ;dmx.c: 81: return;
  1948  000580  0012               	return	
  1949  000582                     i1l278:
  1950                           
  1951                           ;dmx.c: 82: }
  1952                           ;dmx.c: 84: if ( dmxState == 0x02) {
  1953  000582  0E02               	movlw	2
  1954  000584  1840               	xorwf	_dmxState,w,c
  1955  000586  A4D8               	btfss	status,2,c
  1956  000588  0012               	return	
  1957                           
  1958                           ;dmx.c: 86: if (currentAdress >= 0 && currentAdress < 0 + 4) {
  1959  00058A  5032               	movf	_currentAdress+1,w,c
  1960  00058C  E119               	bnz	i1l974
  1961  00058E  0E04               	movlw	4
  1962  000590  5C31               	subwf	_currentAdress,w,c
  1963  000592  B0D8               	btfsc	status,0,c
  1964  000594  D015               	goto	i1l280
  1965                           
  1966                           ;dmx.c: 88: if ( channelLevel[currentAdress-0] == 0 && received != 0) {
  1967  000596  0E2D               	movlw	low _channelLevel
  1968  000598  2431               	addwf	_currentAdress,w,c
  1969  00059A  6ED9               	movwf	fsr2l,c
  1970  00059C  0E00               	movlw	high _channelLevel
  1971  00059E  2032               	addwfc	_currentAdress+1,w,c
  1972  0005A0  6EDA               	movwf	fsr2h,c
  1973  0005A2  50DF               	movf	indf2,w,c
  1974  0005A4  A4D8               	btfss	status,2,c
  1975  0005A6  D004               	goto	i1l281
  1976  0005A8  503E               	movf	_received,w,c
  1977  0005AA  A4D8               	btfss	status,2,c
  1978                           
  1979                           ;dmx.c: 90: dummy = LATA;
  1980  0005AC  CF89 F03D          	movff	3977,_dummy	;volatile
  1981  0005B0                     i1l281:
  1982                           
  1983                           ;dmx.c: 92: }
  1984                           ;dmx.c: 94: channelLevel[currentAdress-0] = received;
  1985  0005B0  0E2D               	movlw	low _channelLevel
  1986  0005B2  2431               	addwf	_currentAdress,w,c
  1987  0005B4  6ED9               	movwf	fsr2l,c
  1988  0005B6  0E00               	movlw	high _channelLevel
  1989  0005B8  2032               	addwfc	_currentAdress+1,w,c
  1990  0005BA  6EDA               	movwf	fsr2h,c
  1991  0005BC  C03E  FFDF         	movff	_received,indf2
  1992  0005C0                     i1l280:
  1993  0005C0                     i1l974:
  1994                           
  1995                           ;dmx.c: 104: }
  1996                           ;dmx.c: 107: if (currentAdress == 0 + 4)
  1997  0005C0  0E04               	movlw	4
  1998  0005C2  1831               	xorwf	_currentAdress,w,c
  1999  0005C4  1032               	iorwf	_currentAdress+1,w,c
  2000  0005C6  A4D8               	btfss	status,2,c
  2001  0005C8  D002               	goto	i1l282
  2002                           
  2003                           ;dmx.c: 108: lastInChainReceived = 1;
  2004  0005CA  0E01               	movlw	1
  2005  0005CC  6E46               	movwf	_lastInChainReceived,c	;volatile
  2006  0005CE                     i1l282:
  2007                           
  2008                           ;dmx.c: 110: currentAdress++;
  2009  0005CE  4A31               	infsnz	_currentAdress,f,c
  2010  0005D0  2A32               	incf	_currentAdress+1,f,c
  2011                           
  2012                           ;dmx.c: 112: if ( currentAdress >= 128)
  2013  0005D2  5032               	movf	_currentAdress+1,w,c
  2014  0005D4  E104               	bnz	i1u14_20
  2015  0005D6  0E80               	movlw	128
  2016  0005D8  5C31               	subwf	_currentAdress,w,c
  2017  0005DA  A0D8               	btfss	status,0,c
  2018  0005DC  0012               	return	
  2019  0005DE                     i1u14_20:
  2020                           
  2021                           ;dmx.c: 113: dmxState = 0x00;
  2022  0005DE  0E00               	movlw	0
  2023  0005E0  6E40               	movwf	_dmxState,c
  2024  0005E2  0012               	return	
  2025  0005E4                     __end_of_handleDMX:
  2026                           	opt stack 0
  2027                           pclatu	equ	0xFFB
  2028                           pclath	equ	0xFFA
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           prodh	equ	0xFF4
  2034                           prodl	equ	0xFF3
  2035                           intcon	equ	0xFF2
  2036                           intcon2	equ	0xFF1
  2037                           postinc0	equ	0xFEE
  2038                           fsr0h	equ	0xFEA
  2039                           fsr0l	equ	0xFE9
  2040                           wreg	equ	0xFE8
  2041                           indf1	equ	0xFE7
  2042                           postinc1	equ	0xFE6
  2043                           fsr1h	equ	0xFE2
  2044                           fsr1l	equ	0xFE1
  2045                           bsr	equ	0xFE0
  2046                           indf2	equ	0xFDF
  2047                           postinc2	equ	0xFDE
  2048                           postdec2	equ	0xFDD
  2049                           fsr2h	equ	0xFDA
  2050                           fsr2l	equ	0xFD9
  2051                           status	equ	0xFD8
  2052                           
  2053 ;; *************** function _high_isr *****************
  2054 ;; Defined at:
  2055 ;;		line 14 in file "interrupts.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1
  2069 ;;      Params:         0       0       0
  2070 ;;      Locals:         0       0       0
  2071 ;;      Temps:         18       0       0
  2072 ;;      Totals:        18       0       0
  2073 ;;Total ram usage:       18 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    2
  2076 ;; This function calls:
  2077 ;;		_pwmStep
  2078 ;; This function is called by:
  2079 ;;		Interrupt level 2
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	intcode
  2084  000008                     __pintcode:
  2085                           	opt stack 0
  2086  000008                     _high_isr:
  2087                           	opt stack 25
  2088                           
  2089                           ;incstack = 0
  2090  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2091  00000A  EF56  F002         	goto	int_func
  2092                           pclatu	equ	0xFFB
  2093                           pclath	equ	0xFFA
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           prodh	equ	0xFF4
  2099                           prodl	equ	0xFF3
  2100                           intcon	equ	0xFF2
  2101                           intcon2	equ	0xFF1
  2102                           postinc0	equ	0xFEE
  2103                           fsr0h	equ	0xFEA
  2104                           fsr0l	equ	0xFE9
  2105                           wreg	equ	0xFE8
  2106                           indf1	equ	0xFE7
  2107                           postinc1	equ	0xFE6
  2108                           fsr1h	equ	0xFE2
  2109                           fsr1l	equ	0xFE1
  2110                           bsr	equ	0xFE0
  2111                           indf2	equ	0xFDF
  2112                           postinc2	equ	0xFDE
  2113                           postdec2	equ	0xFDD
  2114                           fsr2h	equ	0xFDA
  2115                           fsr2l	equ	0xFD9
  2116                           status	equ	0xFD8
  2117                           
  2118                           	psect	intcode_body
  2119  0004AC                     __pintcode_body:
  2120                           	opt stack 25
  2121  0004AC                     int_func:
  2122                           	opt stack 25
  2123  0004AC  CFFA F002          	movff	pclath,??_high_isr
  2124  0004B0  CFFB F003          	movff	pclatu,??_high_isr+1
  2125  0004B4  CFE9 F004          	movff	fsr0l,??_high_isr+2
  2126  0004B8  CFEA F005          	movff	fsr0h,??_high_isr+3
  2127  0004BC  CFE1 F006          	movff	fsr1l,??_high_isr+4
  2128  0004C0  CFE2 F007          	movff	fsr1h,??_high_isr+5
  2129  0004C4  CFD9 F008          	movff	fsr2l,??_high_isr+6
  2130  0004C8  CFDA F009          	movff	fsr2h,??_high_isr+7
  2131  0004CC  CFF3 F00A          	movff	prodl,??_high_isr+8
  2132  0004D0  CFF4 F00B          	movff	prodh,??_high_isr+9
  2133  0004D4  CFF6 F00C          	movff	tblptrl,??_high_isr+10
  2134  0004D8  CFF7 F00D          	movff	tblptrh,??_high_isr+11
  2135  0004DC  CFF8 F00E          	movff	tblptru,??_high_isr+12
  2136  0004E0  CFF5 F00F          	movff	tablat,??_high_isr+13
  2137  0004E4  C048  F010         	movff	btemp,??_high_isr+14
  2138  0004E8  C049  F011         	movff	btemp+1,??_high_isr+15
  2139  0004EC  C04A  F012         	movff	btemp+2,??_high_isr+16
  2140  0004F0  C04B  F013         	movff	btemp+3,??_high_isr+17
  2141                           
  2142                           ;interrupts.c: 19: if ( INTCONbits.T0IF == 1) {
  2143  0004F4  A4F2               	btfss	intcon,2,c	;volatile
  2144  0004F6  D003               	goto	i2l13
  2145                           
  2146                           ;interrupts.c: 20: INTCONbits.T0IF = 0;
  2147  0004F8  94F2               	bcf	intcon,2,c	;volatile
  2148                           
  2149                           ;interrupts.c: 21: pwmStep();
  2150  0004FA  ECF2  F002         	call	_pwmStep	;wreg free
  2151  0004FE                     i2l13:
  2152  0004FE  C013  F04B         	movff	??_high_isr+17,btemp+3
  2153  000502  C012  F04A         	movff	??_high_isr+16,btemp+2
  2154  000506  C011  F049         	movff	??_high_isr+15,btemp+1
  2155  00050A  C010  F048         	movff	??_high_isr+14,btemp
  2156  00050E  C00F  FFF5         	movff	??_high_isr+13,tablat
  2157  000512  C00E  FFF8         	movff	??_high_isr+12,tblptru
  2158  000516  C00D  FFF7         	movff	??_high_isr+11,tblptrh
  2159  00051A  C00C  FFF6         	movff	??_high_isr+10,tblptrl
  2160  00051E  C00B  FFF4         	movff	??_high_isr+9,prodh
  2161  000522  C00A  FFF3         	movff	??_high_isr+8,prodl
  2162  000526  C009  FFDA         	movff	??_high_isr+7,fsr2h
  2163  00052A  C008  FFD9         	movff	??_high_isr+6,fsr2l
  2164  00052E  C007  FFE2         	movff	??_high_isr+5,fsr1h
  2165  000532  C006  FFE1         	movff	??_high_isr+4,fsr1l
  2166  000536  C005  FFEA         	movff	??_high_isr+3,fsr0h
  2167  00053A  C004  FFE9         	movff	??_high_isr+2,fsr0l
  2168  00053E  C003  FFFB         	movff	??_high_isr+1,pclatu
  2169  000542  C002  FFFA         	movff	??_high_isr,pclath
  2170  000546  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2171  000548  0011               	retfie		f
  2172  00054A                     __end_of_high_isr:
  2173                           	opt stack 0
  2174                           pclatu	equ	0xFFB
  2175                           pclath	equ	0xFFA
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           intcon2	equ	0xFF1
  2184                           postinc0	equ	0xFEE
  2185                           fsr0h	equ	0xFEA
  2186                           fsr0l	equ	0xFE9
  2187                           wreg	equ	0xFE8
  2188                           indf1	equ	0xFE7
  2189                           postinc1	equ	0xFE6
  2190                           fsr1h	equ	0xFE2
  2191                           fsr1l	equ	0xFE1
  2192                           bsr	equ	0xFE0
  2193                           indf2	equ	0xFDF
  2194                           postinc2	equ	0xFDE
  2195                           postdec2	equ	0xFDD
  2196                           fsr2h	equ	0xFDA
  2197                           fsr2l	equ	0xFD9
  2198                           status	equ	0xFD8
  2199                           
  2200 ;; *************** function _pwmStep *****************
  2201 ;; Defined at:
  2202 ;;		line 76 in file "pwm.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;		None
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;		None
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMRAM   BANK0   BANK1
  2216 ;;      Params:         0       0       0
  2217 ;;      Locals:         0       0       0
  2218 ;;      Temps:          1       0       0
  2219 ;;      Totals:         1       0       0
  2220 ;;Total ram usage:        1 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; Hardware stack levels required when called:    1
  2223 ;; This function calls:
  2224 ;;		_swapBuffers
  2225 ;; This function is called by:
  2226 ;;		_high_isr
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           	psect	text10
  2231  0005E4                     __ptext10:
  2232                           	opt stack 0
  2233  0005E4                     _pwmStep:
  2234                           	opt stack 25
  2235                           
  2236                           ;pwm.c: 78: tTmp = pCIRead -> timer[intCount];
  2237                           
  2238                           ;incstack = 0
  2239  0005E4  5043               	movf	_intCount,w,c
  2240  0005E6  0D02               	mullw	2
  2241  0005E8  0E01               	movlw	1
  2242  0005EA  26F3               	addwf	prodl,f,c
  2243  0005EC  0E00               	movlw	0
  2244  0005EE  22F4               	addwfc	prodh,f,c
  2245  0005F0  50F3               	movf	prodl,w,c
  2246  0005F2  243B               	addwf	_pCIRead,w,c
  2247  0005F4  6ED9               	movwf	fsr2l,c
  2248  0005F6  50F4               	movf	prodh,w,c
  2249  0005F8  203C               	addwfc	_pCIRead+1,w,c
  2250  0005FA  6EDA               	movwf	fsr2h,c
  2251  0005FC  CFDE F039          	movff	postinc2,_tTmp
  2252  000600  CFDD F03A          	movff	postdec2,_tTmp+1
  2253                           
  2254                           ;pwm.c: 80: TMR0H = ((tTmp >> 8) & 0xFF);
  2255  000604  503A               	movf	_tTmp+1,w,c
  2256  000606  6ED7               	movwf	4055,c	;volatile
  2257                           
  2258                           ;pwm.c: 81: TMR0L = (tTmp & 0xFF);
  2259  000608  C039  FFD6         	movff	_tTmp,4054	;volatile
  2260                           
  2261                           ;pwm.c: 83: if (intCount == 0) {
  2262  00060C  5043               	movf	_intCount,w,c
  2263  00060E  A4D8               	btfss	status,2,c
  2264  000610  D010               	goto	i2l155
  2265                           
  2266                           ;pwm.c: 85: PORTC = ~pCIRead -> bitmask[intCount];
  2267  000612  5043               	movf	_intCount,w,c
  2268  000614  0D01               	mullw	1
  2269  000616  0E0B               	movlw	11
  2270  000618  26F3               	addwf	prodl,f,c
  2271  00061A  0E00               	movlw	0
  2272  00061C  22F4               	addwfc	prodh,f,c
  2273  00061E  50F3               	movf	prodl,w,c
  2274  000620  243B               	addwf	_pCIRead,w,c
  2275  000622  6ED9               	movwf	fsr2l,c
  2276  000624  50F4               	movf	prodh,w,c
  2277  000626  203C               	addwfc	_pCIRead+1,w,c
  2278  000628  6EDA               	movwf	fsr2h,c
  2279  00062A  50DF               	movf	indf2,w,c
  2280  00062C  0AFF               	xorlw	255
  2281  00062E  6E82               	movwf	3970,c	;volatile
  2282                           
  2283                           ;pwm.c: 86: }
  2284  000630  D00E               	goto	i2l156
  2285  000632                     i2l155:
  2286                           
  2287                           ;pwm.c: 87: else {
  2288                           ;pwm.c: 88: PORTC |= (pCIRead -> bitmask[intCount]);
  2289  000632  5043               	movf	_intCount,w,c
  2290  000634  0D01               	mullw	1
  2291  000636  0E0B               	movlw	11
  2292  000638  26F3               	addwf	prodl,f,c
  2293  00063A  0E00               	movlw	0
  2294  00063C  22F4               	addwfc	prodh,f,c
  2295  00063E  50F3               	movf	prodl,w,c
  2296  000640  243B               	addwf	_pCIRead,w,c
  2297  000642  6ED9               	movwf	fsr2l,c
  2298  000644  50F4               	movf	prodh,w,c
  2299  000646  203C               	addwfc	_pCIRead+1,w,c
  2300  000648  6EDA               	movwf	fsr2h,c
  2301  00064A  50DF               	movf	indf2,w,c
  2302  00064C  1282               	iorwf	3970,f,c	;volatile
  2303  00064E                     i2l156:
  2304                           
  2305                           ;pwm.c: 89: }
  2306                           ;pwm.c: 91: if (intCount >= pCIRead -> numInts ) {
  2307  00064E  C03B  FFD9         	movff	_pCIRead,fsr2l
  2308  000652  C03C  FFDA         	movff	_pCIRead+1,fsr2h
  2309  000656  50DE               	movf	postinc2,w,c
  2310  000658  5C43               	subwf	_intCount,w,c
  2311  00065A  A0D8               	btfss	status,0,c
  2312  00065C  D005               	goto	i2l157
  2313                           
  2314                           ;pwm.c: 93: swapBuffers();
  2315  00065E  ECF6  F003         	call	_swapBuffers	;wreg free
  2316                           
  2317                           ;pwm.c: 94: intCount = 0;
  2318  000662  0E00               	movlw	0
  2319  000664  6E43               	movwf	_intCount,c
  2320                           
  2321                           ;pwm.c: 96: }
  2322  000666  0012               	return	
  2323  000668                     i2l157:
  2324                           
  2325                           ;pwm.c: 97: else {
  2326                           ;pwm.c: 99: intCount++;
  2327  000668  2A43               	incf	_intCount,f,c
  2328  00066A  0012               	return	
  2329  00066C                     __end_of_pwmStep:
  2330                           	opt stack 0
  2331                           pclatu	equ	0xFFB
  2332                           pclath	equ	0xFFA
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           prodh	equ	0xFF4
  2338                           prodl	equ	0xFF3
  2339                           intcon	equ	0xFF2
  2340                           intcon2	equ	0xFF1
  2341                           postinc0	equ	0xFEE
  2342                           fsr0h	equ	0xFEA
  2343                           fsr0l	equ	0xFE9
  2344                           wreg	equ	0xFE8
  2345                           indf1	equ	0xFE7
  2346                           postinc1	equ	0xFE6
  2347                           fsr1h	equ	0xFE2
  2348                           fsr1l	equ	0xFE1
  2349                           bsr	equ	0xFE0
  2350                           indf2	equ	0xFDF
  2351                           postinc2	equ	0xFDE
  2352                           postdec2	equ	0xFDD
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _swapBuffers *****************
  2358 ;; Defined at:
  2359 ;;		line 68 in file "channels.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1
  2373 ;;      Params:         0       0       0
  2374 ;;      Locals:         0       0       0
  2375 ;;      Temps:          0       0       0
  2376 ;;      Totals:         0       0       0
  2377 ;;Total ram usage:        0 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_pwmStep
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text11
  2387  0007EC                     __ptext11:
  2388                           	opt stack 0
  2389  0007EC                     _swapBuffers:
  2390                           	opt stack 25
  2391                           
  2392                           ;channels.c: 71: if (syncLock == 1 || updated == 0)
  2393                           
  2394                           ;incstack = 0
  2395  0007EC  0100               	movlb	0	; () banked
  2396  0007EE  0561               	decf	_syncLock& (0+255),w,b	;volatile
  2397  0007F0  B4D8               	btfsc	status,2,c
  2398  0007F2  0012               	return	
  2399                           
  2400                           ; BSR set to: 0
  2401  0007F4  5160               	movf	_updated& (0+255),w,b	;volatile
  2402  0007F6  B4D8               	btfsc	status,2,c
  2403  0007F8  0012               	return	
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;channels.c: 74: updated = 0;
  2407                           
  2408                           ; BSR set to: 0
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;channels.c: 72: return;
  2412  0007FA  0E00               	movlw	0
  2413  0007FC  6F60               	movwf	_updated& (0+255),b	;volatile
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;channels.c: 76: swapCount++;
  2417  0007FE  4A33               	infsnz	_swapCount,f,c
  2418  000800  2A34               	incf	_swapCount+1,f,c
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;channels.c: 78: pCITmp = pCIRead;
  2422  000802  C03B  F035         	movff	_pCIRead,_pCITmp
  2423  000806  C03C  F036         	movff	_pCIRead+1,_pCITmp+1
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;channels.c: 79: pCIRead = pCIWrite;
  2427  00080A  C037  F03B         	movff	_pCIWrite,_pCIRead
  2428  00080E  C038  F03C         	movff	_pCIWrite+1,_pCIRead+1
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;channels.c: 80: pCIWrite = pCITmp;
  2432  000812  C035  F037         	movff	_pCITmp,_pCIWrite
  2433  000816  C036  F038         	movff	_pCITmp+1,_pCIWrite+1
  2434                           
  2435                           ; BSR set to: 0
  2436  00081A  0012               	return		;funcret
  2437  00081C                     __end_of_swapBuffers:
  2438                           	opt stack 0
  2439  0000                     pclatu	equ	0xFFB
  2440                           pclath	equ	0xFFA
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodh	equ	0xFF4
  2446                           prodl	equ	0xFF3
  2447                           intcon	equ	0xFF2
  2448                           intcon2	equ	0xFF1
  2449                           postinc0	equ	0xFEE
  2450                           fsr0h	equ	0xFEA
  2451                           fsr0l	equ	0xFE9
  2452                           wreg	equ	0xFE8
  2453                           indf1	equ	0xFE7
  2454                           postinc1	equ	0xFE6
  2455                           fsr1h	equ	0xFE2
  2456                           fsr1l	equ	0xFE1
  2457                           bsr	equ	0xFE0
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           postdec2	equ	0xFDD
  2461                           fsr2h	equ	0xFDA
  2462                           fsr2l	equ	0xFD9
  2463                           status	equ	0xFD8
  2464                           pclatu	equ	0xFFB
  2465                           pclath	equ	0xFFA
  2466                           tblptru	equ	0xFF8
  2467                           tblptrh	equ	0xFF7
  2468                           tblptrl	equ	0xFF6
  2469                           tablat	equ	0xFF5
  2470                           prodh	equ	0xFF4
  2471                           prodl	equ	0xFF3
  2472                           intcon	equ	0xFF2
  2473                           intcon2	equ	0xFF1
  2474                           postinc0	equ	0xFEE
  2475                           fsr0h	equ	0xFEA
  2476                           fsr0l	equ	0xFE9
  2477                           wreg	equ	0xFE8
  2478                           indf1	equ	0xFE7
  2479                           postinc1	equ	0xFE6
  2480                           fsr1h	equ	0xFE2
  2481                           fsr1l	equ	0xFE1
  2482                           bsr	equ	0xFE0
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           postdec2	equ	0xFDD
  2486                           fsr2h	equ	0xFDA
  2487                           fsr2l	equ	0xFD9
  2488                           status	equ	0xFD8
  2489                           
  2490                           	psect	rparam
  2491  0000                     pclatu	equ	0xFFB
  2492                           pclath	equ	0xFFA
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           prodh	equ	0xFF4
  2498                           prodl	equ	0xFF3
  2499                           intcon	equ	0xFF2
  2500                           intcon2	equ	0xFF1
  2501                           postinc0	equ	0xFEE
  2502                           fsr0h	equ	0xFEA
  2503                           fsr0l	equ	0xFE9
  2504                           wreg	equ	0xFE8
  2505                           indf1	equ	0xFE7
  2506                           postinc1	equ	0xFE6
  2507                           fsr1h	equ	0xFE2
  2508                           fsr1l	equ	0xFE1
  2509                           bsr	equ	0xFE0
  2510                           indf2	equ	0xFDF
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517                           	psect	temp
  2518  000048                     btemp:
  2519                           	opt stack 0
  2520  000048                     	ds	1
  2521  0000                     int$flags	set	btemp
  2522  0000                     wtemp6	set	btemp+1
  2523                           pclatu	equ	0xFFB
  2524                           pclath	equ	0xFFA
  2525                           tblptru	equ	0xFF8
  2526                           tblptrh	equ	0xFF7
  2527                           tblptrl	equ	0xFF6
  2528                           tablat	equ	0xFF5
  2529                           prodh	equ	0xFF4
  2530                           prodl	equ	0xFF3
  2531                           intcon	equ	0xFF2
  2532                           intcon2	equ	0xFF1
  2533                           postinc0	equ	0xFEE
  2534                           fsr0h	equ	0xFEA
  2535                           fsr0l	equ	0xFE9
  2536                           wreg	equ	0xFE8
  2537                           indf1	equ	0xFE7
  2538                           postinc1	equ	0xFE6
  2539                           fsr1h	equ	0xFE2
  2540                           fsr1l	equ	0xFE1
  2541                           bsr	equ	0xFE0
  2542                           indf2	equ	0xFDF
  2543                           postinc2	equ	0xFDE
  2544                           postdec2	equ	0xFDD
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      71
    BANK0           160     18      52
    BANK1           256      0       0

Pointer List with Targets:

    pCITmp	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(BANK0[16]), ci1(BANK0[16]), 

    pCIWrite	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(BANK0[16]), ci1(BANK0[16]), 

    pCIRead	PTR struct channelinfo size(2) Largest target is 16
		 -> NULL(NULL[0]), ci2(BANK0[16]), ci1(BANK0[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_pwmStep

Critical Paths under _main in BANK0

    _main->_calculateTimerDiffsAndMask

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1746
         _calculateTimerDiffsAndMask
                             _doRank
                       _initChannels
                            _initDMX
                       _initHardware
                            _initPwm
 ---------------------------------------------------------------------------------
 (1) _initPwm                                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _initHardware                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDMX                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initChannels                                         1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _doRank                                               4     4      0     270
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _calculateTimerDiffsAndMask                          18    18      0    1377
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _low_isr                                             21    21      0       0
                                             19 COMRAM    21    21      0
                          _handleDMX
 ---------------------------------------------------------------------------------
 (3) _handleDMX                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            18    18      0       0
                                              1 COMRAM    18    18      0
                            _pwmStep
 ---------------------------------------------------------------------------------
 (5) _pwmStep                                              1     1      0       0
                                              0 COMRAM     1     1      0
                        _swapBuffers
 ---------------------------------------------------------------------------------
 (6) _swapBuffers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateTimerDiffsAndMask
   _doRank
   _initChannels
   _initDMX
   _initHardware
   _initPwm

 _low_isr (ROOT)
   _handleDMX

 _high_isr (ROOT)
   _pwmStep
     _swapBuffers

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     12      34       4       32.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      47       1       75.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7B       7        0.0%
DATA                 0      0      7B       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 08 21:11:12 2019

                        _swapBuffers 07EC                                   l53 0796  
                                 l54 07A4                                   bsr 000FE0  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                                l201 06AA                                  l210 013A  
                                l203 06D6                                  l220 035C  
                                l212 0178                                  l221 0302  
                                l213 0182                                  l214 0196  
                                l208 00E2                                  l225 03F2  
                                l217 03BE                                  l226 03D0  
                                l218 0214                                  l219 02BC  
                                l228 0446                                  l180 06FE  
                                l197 067A                                  l199 069E  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                                u820 06EC                                  u760 0716  
                                u850 010E                                  u780 0692  
                                u934 02F6                                  u935 02F2  
                                u960 03BC                                  u944 032C  
                                u945 0328                                  u970 03C2  
                                u890 0186                                  u884 0160  
                                u885 015C                                  _ci1 0072  
                                _ci2 0062                         __CFG_BORV$19 000000  
                                prod 000FF3                                  wreg 000FE8  
                       __CFG_LVP$OFF 000000                                 l1502 00DA  
                               l1520 0132                                 l1436 06F6  
                               l1536 018E                                 l1466 0672  
                               l1478 0696                                 l1576 043E  
                               u1000 04A2                                 _CREN 007D5C  
                               _FERR 007D5A                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               i1l19 0078                                 _RCIE 007CED  
                               _RCIF 007CF5                                 i2l13 04FE  
                               _OERR 007D59                                 _SPEN 007D5F  
                _counterForSimulator 0045                                 _main 0782  
                               _tTmp 0039                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf1 000FE7  
                               indf2 000FDF                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0048  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00D0                        __CFG_IESO$OFF 000000  
                      __CFG_FOSC$IRC 000000                        __CFG_MCLRE$ON 000000  
                       ___param_bank 000000                  _lastInChainReceived 0046  
       ??_calculateTimerDiffsAndMask 0082                                ?_main 0001  
                              _ANSEL 000F7E                                _T0CON 000FD5  
                              i1l280 05C0                                i1l281 05B0  
                              i1l282 05CE                                i1l276 0570  
                              i1l278 0582                                i2l155 0632  
                              i2l156 064E                                i2l157 0668  
                              i1l974 05C0                                _RCREG 000FAE  
                     __CFG_BBSIZ$OFF 000000                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initDMX 083E  
                     __CFG_EBTRB$OFF 000000                      __end_of_initPwm 0850  
                              _dummy 003D                      __end_of_low_isr 00D0  
                              pclath 000FFA                                tablat 000FF5  
                    __end_of_pwmStep 066C                                status 000FD8  
                              wtemp6 0049                        ?_initChannels 0001  
                     __CFG_HFOFST$ON 000000          ?_calculateTimerDiffsAndMask 0001  
                      ?_initHardware 0001                      __initialization 07B8  
                       __end_of_main 07B8                       __CFG_PCLKEN$ON 000000  
                             ??_main 0094                        __activetblptr 000000  
                     __CFG_PLLEN$OFF 000000                               _ANSELH 000F7F  
                     __CFG_WDTEN$OFF 000000                               _OSCCON 000FD3  
                     ??_initChannels 0082                               _SPBRG1 000FAF  
                             _SPBRGH 000FB0                               _TXREG1 000FAD  
                     ??_initHardware 0082                       __CFG_PWRTEN$ON 000000  
                     __CFG_XINST$OFF 000000                               _pCITmp 0035  
                   __end_of_high_isr 054A                               _doRank 066C  
                     __CFG_STVREN$ON 000000                               _dummy1 0042  
                             clear_0 07D0                               clear_1 07DC  
                          ??_initDMX 0082                            ??_initPwm 0082  
                       __pdataCOMRAM 0047                            ??_low_isr 0014  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                            ??_pwmStep 0001  
                         __accesstop 0060              __end_of__initialization 07E2  
                      ___rparam_used 000001                       __pcstackCOMRAM 0001  
                       ?_swapBuffers 0001                         _channelLevel 002D  
                 __size_of_handleDMX 009A                        _currentAdress 0031  
                         __pbssBANK0 0060                              ?_doRank 0001  
                            _CM1CON0 000F6D                              _CM2CON0 000F6B  
               __end_of_initChannels 0740                 __end_of_initHardware 0782  
                            i1u14_20 05DE                            ?_high_isr 0001  
                  __end_of_handleDMX 05E4                              __Hparam 0000  
                            _pCIRead 003B                              __Lparam 0000  
                    __size_of_doRank 0084                              __pcinit 07B8  
                            __ramtop 0200                              __ptext0 0782  
                            __ptext1 083E                              __ptext2 0740  
                            __ptext3 081C                              __ptext4 06F0  
                            __ptext5 066C                              __ptext6 00D4  
                            __ptext8 054A                              _initDMX 081C  
                            doRank@i 0085                              doRank@j 0084  
                            _errflag 003F                              _initPwm 083E  
                            _low_isr 0018                              _pwmStep 05E4  
                            _updated 0060                           ??_high_isr 0002  
                     __pintcode_body 04AC                 end_of_initialization 07E2  
                            int_func 04AC                              postdec2 000FDD  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                 __size_of_swapBuffers 0030  
calculateTimerDiffsAndMask@sumTimers 008C                __size_of_initChannels 0050  
                         _writeIndex 0047                       __end_of_doRank 06F0  
                        _BAUDCONbits 000FB8                        __pidataCOMRAM 0850  
              __size_of_initHardware 0042                  start_initialization 07B8  
                       _initChannels 06F0                         _initHardware 0740  
                           ??_doRank 0082                        initChannels@i 0082  
                        __pbssCOMRAM 0029                        __pcstackBANK0 0082  
                        _channelRank 0029                         _errorCounter 0044  
                  __size_of_high_isr 0542                            __pintcode 0008  
                          _handleDMX 054A                          __pintcodelo 0018  
                           ?_initDMX 0001                             ?_initPwm 0001  
                           ?_low_isr 0001                            _readIndex 0041  
                           ?_pwmStep 0001  __size_of_calculateTimerDiffsAndMask 03D8  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
                           _PIR1bits 000F9E                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                           ?_handleDMX 0001  
                          _swapCount 0033                          _INTCON2bits 000FF1  
                           __Hrparam 0000                             __Lrparam 0000  
                           _pCIWrite 0037                        ??_swapBuffers 0001  
                 __CFG_BOREN$SBORDIS 000000         calculateTimerDiffsAndMask@i2 0092  
                   __size_of_initDMX 0022                     __size_of_initPwm 0012  
                   __size_of_low_isr 00B8                             __ptext10 05E4  
                           __ptext11 07EC                     __size_of_pwmStep 0088  
                           _high_isr 0008                             _dmxState 0040  
                           _intCount 0043                        __size_of_main 0036  
                           _received 003E   __end_of_calculateTimerDiffsAndMask 04AC  
         _calculateTimerDiffsAndMask 00D4                          ??_handleDMX 0014  
                           int$flags 0048                             _syncLock 0061  
                __end_of_swapBuffers 081C                           _INTCONbits 000FF2  
                           intlevel1 0000                             intlevel2 0000  
        calculateTimerDiffsAndMask@i 0093                           _RCSTA1bits 000FAB  
                         _OSCCONbits 000FD3      calculateTimerDiffsAndMask@pivot 008E  
